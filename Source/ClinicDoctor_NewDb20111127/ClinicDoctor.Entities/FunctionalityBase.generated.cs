
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Functionality.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using ClinicDoctor.Entities.Validation;
#endregion

namespace ClinicDoctor.Entities
{
	///<summary>
	/// An object representation of the 'Functionality' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FunctionalityBase : EntityBase, IFunctionality, IEntityId<FunctionalityKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FunctionalityEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FunctionalityEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FunctionalityEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Functionality> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FunctionalityEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FunctionalityEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FunctionalityBase"/> instance.
		///</summary>
		public FunctionalityBase()
		{
			this.entityData = new FunctionalityEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FunctionalityBase"/> instance.
		///</summary>
		///<param name="_title"></param>
		///<param name="_colorCode"></param>
		///<param name="_note"></param>
		///<param name="_isDisabled"></param>
		///<param name="_createUser"></param>
		///<param name="_createDate"></param>
		///<param name="_updateUser"></param>
		///<param name="_updateDate"></param>
		public FunctionalityBase(System.String _title, System.String _colorCode, System.String _note, 
			System.Boolean _isDisabled, System.String _createUser, System.DateTime _createDate, 
			System.String _updateUser, System.DateTime _updateDate)
		{
			this.entityData = new FunctionalityEntityData();
			this.backupData = null;

			this.Title = _title;
			this.ColorCode = _colorCode;
			this.Note = _note;
			this.IsDisabled = _isDisabled;
			this.CreateUser = _createUser;
			this.CreateDate = _createDate;
			this.UpdateUser = _updateUser;
			this.UpdateDate = _updateDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Functionality"/> instance.
		///</summary>
		///<param name="_title"></param>
		///<param name="_colorCode"></param>
		///<param name="_note"></param>
		///<param name="_isDisabled"></param>
		///<param name="_createUser"></param>
		///<param name="_createDate"></param>
		///<param name="_updateUser"></param>
		///<param name="_updateDate"></param>
		public static Functionality CreateFunctionality(System.String _title, System.String _colorCode, System.String _note, 
			System.Boolean _isDisabled, System.String _createUser, System.DateTime _createDate, 
			System.String _updateUser, System.DateTime _updateDate)
		{
			Functionality newFunctionality = new Functionality();
			newFunctionality.Title = _title;
			newFunctionality.ColorCode = _colorCode;
			newFunctionality.Note = _note;
			newFunctionality.IsDisabled = _isDisabled;
			newFunctionality.CreateUser = _createUser;
			newFunctionality.CreateDate = _createDate;
			newFunctionality.UpdateUser = _updateUser;
			newFunctionality.UpdateDate = _updateDate;
			return newFunctionality;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(FunctionalityColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FunctionalityColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 200)]
		public virtual System.String Title
		{
			get
			{
				return this.entityData.Title; 
			}
			
			set
			{
				if (this.entityData.Title == value)
					return;
					
				OnColumnChanging(FunctionalityColumn.Title, this.entityData.Title);
				this.entityData.Title = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FunctionalityColumn.Title, this.entityData.Title);
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ColorCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String ColorCode
		{
			get
			{
				return this.entityData.ColorCode; 
			}
			
			set
			{
				if (this.entityData.ColorCode == value)
					return;
					
				OnColumnChanging(FunctionalityColumn.ColorCode, this.entityData.ColorCode);
				this.entityData.ColorCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FunctionalityColumn.ColorCode, this.entityData.ColorCode);
				OnPropertyChanged("ColorCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Note property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Note
		{
			get
			{
				return this.entityData.Note; 
			}
			
			set
			{
				if (this.entityData.Note == value)
					return;
					
				OnColumnChanging(FunctionalityColumn.Note, this.entityData.Note);
				this.entityData.Note = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FunctionalityColumn.Note, this.entityData.Note);
				OnPropertyChanged("Note");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDisabled property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public override System.Boolean IsDisabled
		{
			get
			{
				return this.entityData.IsDisabled; 
			}
			
			set
			{
				if (this.entityData.IsDisabled == value)
					return;
					
				OnColumnChanging(FunctionalityColumn.IsDisabled, this.entityData.IsDisabled);
				this.entityData.IsDisabled = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FunctionalityColumn.IsDisabled, this.entityData.IsDisabled);
				OnPropertyChanged("IsDisabled");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public override System.String CreateUser
		{
			get
			{
				return this.entityData.CreateUser; 
			}
			
			set
			{
				if (this.entityData.CreateUser == value)
					return;
					
				OnColumnChanging(FunctionalityColumn.CreateUser, this.entityData.CreateUser);
				this.entityData.CreateUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FunctionalityColumn.CreateUser, this.entityData.CreateUser);
				OnPropertyChanged("CreateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public override System.DateTime CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
					
				OnColumnChanging(FunctionalityColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FunctionalityColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public override System.String UpdateUser
		{
			get
			{
				return this.entityData.UpdateUser; 
			}
			
			set
			{
				if (this.entityData.UpdateUser == value)
					return;
					
				OnColumnChanging(FunctionalityColumn.UpdateUser, this.entityData.UpdateUser);
				this.entityData.UpdateUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FunctionalityColumn.UpdateUser, this.entityData.UpdateUser);
				OnPropertyChanged("UpdateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public override System.DateTime UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
					
				OnColumnChanging(FunctionalityColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FunctionalityColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of DoctorFunc objects
		///	which are related to this object through the relation FK_DoctorFunc_Functionality
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<DoctorFunc> DoctorFuncCollection
		{
			get { return entityData.DoctorFuncCollection; }
			set { entityData.DoctorFuncCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Content objects
		///	which are related to this object through the relation FK_Content_Functionality
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Content> ContentCollection
		{
			get { return entityData.ContentCollection; }
			set { entityData.ContentCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of RoomFunc objects
		///	which are related to this object through the relation FK_RoomFunc_Functionality
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<RoomFunc> RoomFuncCollection
		{
			get { return entityData.RoomFuncCollection; }
			set { entityData.RoomFuncCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Title", "Title"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Title", "Title", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ColorCode", "Color Code", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Note", "Note", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CreateUser", "Create User", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdateUser", "Update User", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Functionality"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "Title", "ColorCode", "Note", "IsDisabled", "CreateUser", "CreateDate", "UpdateUser", "UpdateDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FunctionalityEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Functionality) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Functionality>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Functionality);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Functionality Entity 
		///</summary>
		protected virtual Functionality Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Functionality copy = new Functionality();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.Title = this.Title;
				copy.ColorCode = this.ColorCode;
				copy.Note = this.Note;
				copy.IsDisabled = this.IsDisabled;
				copy.CreateUser = this.CreateUser;
				copy.CreateDate = this.CreateDate;
				copy.UpdateUser = this.UpdateUser;
				copy.UpdateDate = this.UpdateDate;
			
		
			//deep copy nested objects
			copy.DoctorFuncCollection = (TList<DoctorFunc>) MakeCopyOf(this.DoctorFuncCollection, existingCopies); 
			copy.ContentCollection = (TList<Content>) MakeCopyOf(this.ContentCollection, existingCopies); 
			copy.RoomFuncCollection = (TList<RoomFunc>) MakeCopyOf(this.RoomFuncCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Functionality Entity 
		///</summary>
		public virtual Functionality Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Functionality Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Functionality DeepCopy()
		{
			return EntityHelper.Clone<Functionality>(this as Functionality);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FunctionalityEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FunctionalityEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FunctionalityEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FunctionalityColumn column)
		{
			switch(column)
			{
					case FunctionalityColumn.Id:
					return entityData.Id != _originalData.Id;
					case FunctionalityColumn.Title:
					return entityData.Title != _originalData.Title;
					case FunctionalityColumn.ColorCode:
					return entityData.ColorCode != _originalData.ColorCode;
					case FunctionalityColumn.Note:
					return entityData.Note != _originalData.Note;
					case FunctionalityColumn.IsDisabled:
					return entityData.IsDisabled != _originalData.IsDisabled;
					case FunctionalityColumn.CreateUser:
					return entityData.CreateUser != _originalData.CreateUser;
					case FunctionalityColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case FunctionalityColumn.UpdateUser:
					return entityData.UpdateUser != _originalData.UpdateUser;
					case FunctionalityColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FunctionalityColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Title != _originalData.Title;
			result = result || entityData.ColorCode != _originalData.ColorCode;
			result = result || entityData.Note != _originalData.Note;
			result = result || entityData.IsDisabled != _originalData.IsDisabled;
			result = result || entityData.CreateUser != _originalData.CreateUser;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.UpdateUser != _originalData.UpdateUser;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			return result;
		}	
		
		///<summary>
		///  Returns a Functionality Entity with the original data.
		///</summary>
		public Functionality GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFunctionality(
				_originalData.Title,
				_originalData.ColorCode,
				_originalData.Note,
				_originalData.IsDisabled,
				_originalData.CreateUser,
				_originalData.CreateDate,
				_originalData.UpdateUser,
				_originalData.UpdateDate
				);
				
			return (Functionality)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FunctionalityBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FunctionalityBase)
				return ValueEquals(this, (FunctionalityBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FunctionalityBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.Title.GetHashCode() ^ 
					((this.ColorCode == null) ? string.Empty : this.ColorCode.ToString()).GetHashCode() ^ 
					((this.Note == null) ? string.Empty : this.Note.ToString()).GetHashCode() ^ 
					this.IsDisabled.GetHashCode() ^ 
					((this.CreateUser == null) ? string.Empty : this.CreateUser.ToString()).GetHashCode() ^ 
					this.CreateDate.GetHashCode() ^ 
					((this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString()).GetHashCode() ^ 
					this.UpdateDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FunctionalityBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FunctionalityBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FunctionalityBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FunctionalityBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FunctionalityBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FunctionalityBase Object1, FunctionalityBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.Title != Object2.Title)
				equal = false;
			if ( Object1.ColorCode != null && Object2.ColorCode != null )
			{
				if (Object1.ColorCode != Object2.ColorCode)
					equal = false;
			}
			else if (Object1.ColorCode == null ^ Object2.ColorCode == null )
			{
				equal = false;
			}
			if ( Object1.Note != null && Object2.Note != null )
			{
				if (Object1.Note != Object2.Note)
					equal = false;
			}
			else if (Object1.Note == null ^ Object2.Note == null )
			{
				equal = false;
			}
			if (Object1.IsDisabled != Object2.IsDisabled)
				equal = false;
			if ( Object1.CreateUser != null && Object2.CreateUser != null )
			{
				if (Object1.CreateUser != Object2.CreateUser)
					equal = false;
			}
			else if (Object1.CreateUser == null ^ Object2.CreateUser == null )
			{
				equal = false;
			}
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if ( Object1.UpdateUser != null && Object2.UpdateUser != null )
			{
				if (Object1.UpdateUser != Object2.UpdateUser)
					equal = false;
			}
			else if (Object1.UpdateUser == null ^ Object2.UpdateUser == null )
			{
				equal = false;
			}
			if (Object1.UpdateDate != Object2.UpdateDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FunctionalityBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FunctionalityComparer GetComparer()
        {
            return new FunctionalityComparer();
        }
        */

        // Comparer delegates back to Functionality
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Functionality rhs, FunctionalityColumn which)
        {
            switch (which)
            {
            	
            	
            	case FunctionalityColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case FunctionalityColumn.Title:
            		return this.Title.CompareTo(rhs.Title);
            		
            		                 
            	
            	
            	case FunctionalityColumn.ColorCode:
            		return this.ColorCode.CompareTo(rhs.ColorCode);
            		
            		                 
            	
            	
            	case FunctionalityColumn.Note:
            		return this.Note.CompareTo(rhs.Note);
            		
            		                 
            	
            	
            	case FunctionalityColumn.IsDisabled:
            		return this.IsDisabled.CompareTo(rhs.IsDisabled);
            		
            		                 
            	
            	
            	case FunctionalityColumn.CreateUser:
            		return this.CreateUser.CompareTo(rhs.CreateUser);
            		
            		                 
            	
            	
            	case FunctionalityColumn.CreateDate:
            		return this.CreateDate.CompareTo(rhs.CreateDate);
            		
            		                 
            	
            	
            	case FunctionalityColumn.UpdateUser:
            		return this.UpdateUser.CompareTo(rhs.UpdateUser);
            		
            		                 
            	
            	
            	case FunctionalityColumn.UpdateDate:
            		return this.UpdateDate.CompareTo(rhs.UpdateDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FunctionalityKey> Members
		
		// member variable for the EntityId property
		private FunctionalityKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FunctionalityKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FunctionalityKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Functionality")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- Id: {0}{9}- Title: {1}{9}- ColorCode: {2}{9}- Note: {3}{9}- IsDisabled: {4}{9}- CreateUser: {5}{9}- CreateDate: {6}{9}- UpdateUser: {7}{9}- UpdateDate: {8}{9}{11}", 
				this.Id,
				this.Title,
				(this.ColorCode == null) ? string.Empty : this.ColorCode.ToString(),
				(this.Note == null) ? string.Empty : this.Note.ToString(),
				this.IsDisabled,
				(this.CreateUser == null) ? string.Empty : this.CreateUser.ToString(),
				this.CreateDate,
				(this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString(),
				this.UpdateDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Functionality' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FunctionalityEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Functionality"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Title : 
		/// </summary>
		public System.String		  Title = string.Empty;
		
		/// <summary>
		/// ColorCode : 
		/// </summary>
		public System.String		  ColorCode = null;
		
		/// <summary>
		/// Note : 
		/// </summary>
		public System.String		  Note = null;
		
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		public System.Boolean		  IsDisabled = false;
		
		/// <summary>
		/// CreateUser : 
		/// </summary>
		public System.String		  CreateUser = null;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		public System.DateTime		  CreateDate = DateTime.Now;
		
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		public System.String		  UpdateUser = null;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		public System.DateTime		  UpdateDate = DateTime.Now;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region DoctorFuncCollection
		
		private TList<DoctorFunc> _doctorFuncFuncId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _doctorFuncFuncId
		/// </summary>
		
		public TList<DoctorFunc> DoctorFuncCollection
		{
			get
			{
				if (_doctorFuncFuncId == null)
				{
				_doctorFuncFuncId = new TList<DoctorFunc>();
				}
	
				return _doctorFuncFuncId;
			}
			set { _doctorFuncFuncId = value; }
		}
		
		#endregion

		#region ContentCollection
		
		private TList<Content> _contentFuncId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _contentFuncId
		/// </summary>
		
		public TList<Content> ContentCollection
		{
			get
			{
				if (_contentFuncId == null)
				{
				_contentFuncId = new TList<Content>();
				}
	
				return _contentFuncId;
			}
			set { _contentFuncId = value; }
		}
		
		#endregion

		#region RoomFuncCollection
		
		private TList<RoomFunc> _roomFuncFuncId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _roomFuncFuncId
		/// </summary>
		
		public TList<RoomFunc> RoomFuncCollection
		{
			get
			{
				if (_roomFuncFuncId == null)
				{
				_roomFuncFuncId = new TList<RoomFunc>();
				}
	
				return _roomFuncFuncId;
			}
			set { _roomFuncFuncId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FunctionalityEntityData _tmp = new FunctionalityEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Title = this.Title;
			_tmp.ColorCode = this.ColorCode;
			_tmp.Note = this.Note;
			_tmp.IsDisabled = this.IsDisabled;
			_tmp.CreateUser = this.CreateUser;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateUser = this.UpdateUser;
			_tmp.UpdateDate = this.UpdateDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._doctorFuncFuncId != null)
				_tmp.DoctorFuncCollection = (TList<DoctorFunc>) MakeCopyOf(this.DoctorFuncCollection); 
			if (this._contentFuncId != null)
				_tmp.ContentCollection = (TList<Content>) MakeCopyOf(this.ContentCollection); 
			if (this._roomFuncFuncId != null)
				_tmp.RoomFuncCollection = (TList<RoomFunc>) MakeCopyOf(this.RoomFuncCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FunctionalityEntityData _tmp = new FunctionalityEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Title = this.Title;
			_tmp.ColorCode = this.ColorCode;
			_tmp.Note = this.Note;
			_tmp.IsDisabled = this.IsDisabled;
			_tmp.CreateUser = this.CreateUser;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateUser = this.UpdateUser;
			_tmp.UpdateDate = this.UpdateDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.DoctorFuncCollection = (TList<DoctorFunc>) MakeCopyOf(this.DoctorFuncCollection, existingCopies); 
			_tmp.ContentCollection = (TList<Content>) MakeCopyOf(this.ContentCollection, existingCopies); 
			_tmp.RoomFuncCollection = (TList<RoomFunc>) MakeCopyOf(this.RoomFuncCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FunctionalityColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FunctionalityColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FunctionalityColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FunctionalityColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FunctionalityColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FunctionalityColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FunctionalityEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FunctionalityEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FunctionalityColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FunctionalityColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FunctionalityEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FunctionalityEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FunctionalityEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Functionality"/> object.
	/// </remarks>
	public class FunctionalityEventArgs : System.EventArgs
	{
		private FunctionalityColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FunctionalityEventArgs class.
		///</summary>
		public FunctionalityEventArgs(FunctionalityColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FunctionalityEventArgs class.
		///</summary>
		public FunctionalityEventArgs(FunctionalityColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FunctionalityColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FunctionalityColumn" />
		public FunctionalityColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Functionality related events.
	///</summary>
	public delegate void FunctionalityEventHandler(object sender, FunctionalityEventArgs e);
	
	#region FunctionalityComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FunctionalityComparer : System.Collections.Generic.IComparer<Functionality>
	{
		FunctionalityColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FunctionalityComparer"/> class.
        /// </summary>
		public FunctionalityComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FunctionalityComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FunctionalityComparer(FunctionalityColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Functionality"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Functionality"/> to compare.</param>
        /// <param name="b">The second <c>Functionality</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Functionality a, Functionality b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Functionality entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Functionality a, Functionality b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FunctionalityColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FunctionalityKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Functionality"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FunctionalityKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FunctionalityKey class.
		/// </summary>
		public FunctionalityKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FunctionalityKey class.
		/// </summary>
		public FunctionalityKey(FunctionalityBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FunctionalityKey class.
		/// </summary>
		public FunctionalityKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FunctionalityBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FunctionalityBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FunctionalityColumn Enum
	
	/// <summary>
	/// Enumerate the Functionality columns.
	/// </summary>
	[Serializable]
	public enum FunctionalityColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, false, 200)]
		Title = 2,
		/// <summary>
		/// ColorCode : 
		/// </summary>
		[EnumTextValue("ColorCode")]
		[ColumnEnum("ColorCode", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		ColorCode = 3,
		/// <summary>
		/// Note : 
		/// </summary>
		[EnumTextValue("Note")]
		[ColumnEnum("Note", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		Note = 4,
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		[EnumTextValue("IsDisabled")]
		[ColumnEnum("IsDisabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsDisabled = 5,
		/// <summary>
		/// CreateUser : 
		/// </summary>
		[EnumTextValue("CreateUser")]
		[ColumnEnum("CreateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		CreateUser = 6,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("CreateDate")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate = 7,
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		[EnumTextValue("UpdateUser")]
		[ColumnEnum("UpdateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		UpdateUser = 8,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("UpdateDate")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		UpdateDate = 9
	}//End enum

	#endregion FunctionalityColumn Enum

} // end namespace
