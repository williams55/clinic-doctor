
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Appointment.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using ClinicDoctor.Entities.Validation;
#endregion

namespace ClinicDoctor.Entities
{
	///<summary>
	/// An object representation of the 'Appointment' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AppointmentBase : EntityBase, IAppointment, IEntityId<AppointmentKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AppointmentEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AppointmentEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AppointmentEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Appointment> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AppointmentEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AppointmentEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AppointmentBase"/> instance.
		///</summary>
		public AppointmentBase()
		{
			this.entityData = new AppointmentEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AppointmentBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_customerId"></param>
		///<param name="_customerName"></param>
		///<param name="_contentId"></param>
		///<param name="_contentTitle"></param>
		///<param name="_doctorUsername"></param>
		///<param name="_doctorShortName"></param>
		///<param name="_doctorEmail"></param>
		///<param name="_roomId"></param>
		///<param name="_roomTitle"></param>
		///<param name="_nurseUsername"></param>
		///<param name="_nurseShortName"></param>
		///<param name="_statusId"></param>
		///<param name="_statusTitle"></param>
		///<param name="_note"></param>
		///<param name="_startTime"></param>
		///<param name="_endTime"></param>
		///<param name="_colorCode"></param>
		///<param name="_isComplete"></param>
		///<param name="_isDisabled"></param>
		///<param name="_createUser"></param>
		///<param name="_createDate"></param>
		///<param name="_updateUser"></param>
		///<param name="_updateDate"></param>
		public AppointmentBase(System.String _id, System.String _customerId, System.String _customerName, 
			System.Int64 _contentId, System.String _contentTitle, System.String _doctorUsername, System.String _doctorShortName, 
			System.String _doctorEmail, System.Int64? _roomId, System.String _roomTitle, System.String _nurseUsername, 
			System.String _nurseShortName, System.Int64? _statusId, System.String _statusTitle, System.String _note, 
			System.DateTime? _startTime, System.DateTime? _endTime, System.String _colorCode, System.Boolean _isComplete, 
			System.Boolean _isDisabled, System.String _createUser, System.DateTime _createDate, System.String _updateUser, 
			System.DateTime _updateDate)
		{
			this.entityData = new AppointmentEntityData();
			this.backupData = null;

			this.Id = _id;
			this.CustomerId = _customerId;
			this.CustomerName = _customerName;
			this.ContentId = _contentId;
			this.ContentTitle = _contentTitle;
			this.DoctorUsername = _doctorUsername;
			this.DoctorShortName = _doctorShortName;
			this.DoctorEmail = _doctorEmail;
			this.RoomId = _roomId;
			this.RoomTitle = _roomTitle;
			this.NurseUsername = _nurseUsername;
			this.NurseShortName = _nurseShortName;
			this.StatusId = _statusId;
			this.StatusTitle = _statusTitle;
			this.Note = _note;
			this.StartTime = _startTime;
			this.EndTime = _endTime;
			this.ColorCode = _colorCode;
			this.IsComplete = _isComplete;
			this.IsDisabled = _isDisabled;
			this.CreateUser = _createUser;
			this.CreateDate = _createDate;
			this.UpdateUser = _updateUser;
			this.UpdateDate = _updateDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Appointment"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_customerId"></param>
		///<param name="_customerName"></param>
		///<param name="_contentId"></param>
		///<param name="_contentTitle"></param>
		///<param name="_doctorUsername"></param>
		///<param name="_doctorShortName"></param>
		///<param name="_doctorEmail"></param>
		///<param name="_roomId"></param>
		///<param name="_roomTitle"></param>
		///<param name="_nurseUsername"></param>
		///<param name="_nurseShortName"></param>
		///<param name="_statusId"></param>
		///<param name="_statusTitle"></param>
		///<param name="_note"></param>
		///<param name="_startTime"></param>
		///<param name="_endTime"></param>
		///<param name="_colorCode"></param>
		///<param name="_isComplete"></param>
		///<param name="_isDisabled"></param>
		///<param name="_createUser"></param>
		///<param name="_createDate"></param>
		///<param name="_updateUser"></param>
		///<param name="_updateDate"></param>
		public static Appointment CreateAppointment(System.String _id, System.String _customerId, System.String _customerName, 
			System.Int64 _contentId, System.String _contentTitle, System.String _doctorUsername, System.String _doctorShortName, 
			System.String _doctorEmail, System.Int64? _roomId, System.String _roomTitle, System.String _nurseUsername, 
			System.String _nurseShortName, System.Int64? _statusId, System.String _statusTitle, System.String _note, 
			System.DateTime? _startTime, System.DateTime? _endTime, System.String _colorCode, System.Boolean _isComplete, 
			System.Boolean _isDisabled, System.String _createUser, System.DateTime _createDate, System.String _updateUser, 
			System.DateTime _updateDate)
		{
			Appointment newAppointment = new Appointment();
			newAppointment.Id = _id;
			newAppointment.CustomerId = _customerId;
			newAppointment.CustomerName = _customerName;
			newAppointment.ContentId = _contentId;
			newAppointment.ContentTitle = _contentTitle;
			newAppointment.DoctorUsername = _doctorUsername;
			newAppointment.DoctorShortName = _doctorShortName;
			newAppointment.DoctorEmail = _doctorEmail;
			newAppointment.RoomId = _roomId;
			newAppointment.RoomTitle = _roomTitle;
			newAppointment.NurseUsername = _nurseUsername;
			newAppointment.NurseShortName = _nurseShortName;
			newAppointment.StatusId = _statusId;
			newAppointment.StatusTitle = _statusTitle;
			newAppointment.Note = _note;
			newAppointment.StartTime = _startTime;
			newAppointment.EndTime = _endTime;
			newAppointment.ColorCode = _colorCode;
			newAppointment.IsComplete = _isComplete;
			newAppointment.IsDisabled = _isDisabled;
			newAppointment.CreateUser = _createUser;
			newAppointment.CreateDate = _createDate;
			newAppointment.UpdateUser = _updateUser;
			newAppointment.UpdateDate = _updateDate;
			return newAppointment;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 20)]
		public virtual System.String Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(AppointmentColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the Id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the Id property.</remarks>
		/// <value>This type is nvarchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
					
				OnColumnChanging(AppointmentColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String CustomerName
		{
			get
			{
				return this.entityData.CustomerName; 
			}
			
			set
			{
				if (this.entityData.CustomerName == value)
					return;
					
				OnColumnChanging(AppointmentColumn.CustomerName, this.entityData.CustomerName);
				this.entityData.CustomerName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.CustomerName, this.entityData.CustomerName);
				OnPropertyChanged("CustomerName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContentId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 ContentId
		{
			get
			{
				return this.entityData.ContentId; 
			}
			
			set
			{
				if (this.entityData.ContentId == value)
					return;
					
				OnColumnChanging(AppointmentColumn.ContentId, this.entityData.ContentId);
				this.entityData.ContentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.ContentId, this.entityData.ContentId);
				OnPropertyChanged("ContentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContentTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String ContentTitle
		{
			get
			{
				return this.entityData.ContentTitle; 
			}
			
			set
			{
				if (this.entityData.ContentTitle == value)
					return;
					
				OnColumnChanging(AppointmentColumn.ContentTitle, this.entityData.ContentTitle);
				this.entityData.ContentTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.ContentTitle, this.entityData.ContentTitle);
				OnPropertyChanged("ContentTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoctorUsername property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String DoctorUsername
		{
			get
			{
				return this.entityData.DoctorUsername; 
			}
			
			set
			{
				if (this.entityData.DoctorUsername == value)
					return;
					
				OnColumnChanging(AppointmentColumn.DoctorUsername, this.entityData.DoctorUsername);
				this.entityData.DoctorUsername = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.DoctorUsername, this.entityData.DoctorUsername);
				OnPropertyChanged("DoctorUsername");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoctorShortName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DoctorShortName
		{
			get
			{
				return this.entityData.DoctorShortName; 
			}
			
			set
			{
				if (this.entityData.DoctorShortName == value)
					return;
					
				OnColumnChanging(AppointmentColumn.DoctorShortName, this.entityData.DoctorShortName);
				this.entityData.DoctorShortName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.DoctorShortName, this.entityData.DoctorShortName);
				OnPropertyChanged("DoctorShortName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoctorEmail property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String DoctorEmail
		{
			get
			{
				return this.entityData.DoctorEmail; 
			}
			
			set
			{
				if (this.entityData.DoctorEmail == value)
					return;
					
				OnColumnChanging(AppointmentColumn.DoctorEmail, this.entityData.DoctorEmail);
				this.entityData.DoctorEmail = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.DoctorEmail, this.entityData.DoctorEmail);
				OnPropertyChanged("DoctorEmail");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RoomId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsRoomIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? RoomId
		{
			get
			{
				return this.entityData.RoomId; 
			}
			
			set
			{
				if (this.entityData.RoomId == value)
					return;
					
				OnColumnChanging(AppointmentColumn.RoomId, this.entityData.RoomId);
				this.entityData.RoomId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.RoomId, this.entityData.RoomId);
				OnPropertyChanged("RoomId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RoomTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String RoomTitle
		{
			get
			{
				return this.entityData.RoomTitle; 
			}
			
			set
			{
				if (this.entityData.RoomTitle == value)
					return;
					
				OnColumnChanging(AppointmentColumn.RoomTitle, this.entityData.RoomTitle);
				this.entityData.RoomTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.RoomTitle, this.entityData.RoomTitle);
				OnPropertyChanged("RoomTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NurseUsername property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String NurseUsername
		{
			get
			{
				return this.entityData.NurseUsername; 
			}
			
			set
			{
				if (this.entityData.NurseUsername == value)
					return;
					
				OnColumnChanging(AppointmentColumn.NurseUsername, this.entityData.NurseUsername);
				this.entityData.NurseUsername = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.NurseUsername, this.entityData.NurseUsername);
				OnPropertyChanged("NurseUsername");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NurseShortName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NurseShortName
		{
			get
			{
				return this.entityData.NurseShortName; 
			}
			
			set
			{
				if (this.entityData.NurseShortName == value)
					return;
					
				OnColumnChanging(AppointmentColumn.NurseShortName, this.entityData.NurseShortName);
				this.entityData.NurseShortName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.NurseShortName, this.entityData.NurseShortName);
				OnPropertyChanged("NurseShortName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StatusId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsStatusIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? StatusId
		{
			get
			{
				return this.entityData.StatusId; 
			}
			
			set
			{
				if (this.entityData.StatusId == value)
					return;
					
				OnColumnChanging(AppointmentColumn.StatusId, this.entityData.StatusId);
				this.entityData.StatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.StatusId, this.entityData.StatusId);
				OnPropertyChanged("StatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StatusTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String StatusTitle
		{
			get
			{
				return this.entityData.StatusTitle; 
			}
			
			set
			{
				if (this.entityData.StatusTitle == value)
					return;
					
				OnColumnChanging(AppointmentColumn.StatusTitle, this.entityData.StatusTitle);
				this.entityData.StatusTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.StatusTitle, this.entityData.StatusTitle);
				OnPropertyChanged("StatusTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Note property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Note
		{
			get
			{
				return this.entityData.Note; 
			}
			
			set
			{
				if (this.entityData.Note == value)
					return;
					
				OnColumnChanging(AppointmentColumn.Note, this.entityData.Note);
				this.entityData.Note = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.Note, this.entityData.Note);
				OnPropertyChanged("Note");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStartTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StartTime
		{
			get
			{
				return this.entityData.StartTime; 
			}
			
			set
			{
				if (this.entityData.StartTime == value)
					return;
					
				OnColumnChanging(AppointmentColumn.StartTime, this.entityData.StartTime);
				this.entityData.StartTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.StartTime, this.entityData.StartTime);
				OnPropertyChanged("StartTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEndTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EndTime
		{
			get
			{
				return this.entityData.EndTime; 
			}
			
			set
			{
				if (this.entityData.EndTime == value)
					return;
					
				OnColumnChanging(AppointmentColumn.EndTime, this.entityData.EndTime);
				this.entityData.EndTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.EndTime, this.entityData.EndTime);
				OnPropertyChanged("EndTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ColorCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String ColorCode
		{
			get
			{
				return this.entityData.ColorCode; 
			}
			
			set
			{
				if (this.entityData.ColorCode == value)
					return;
					
				OnColumnChanging(AppointmentColumn.ColorCode, this.entityData.ColorCode);
				this.entityData.ColorCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.ColorCode, this.entityData.ColorCode);
				OnPropertyChanged("ColorCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsComplete property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsComplete
		{
			get
			{
				return this.entityData.IsComplete; 
			}
			
			set
			{
				if (this.entityData.IsComplete == value)
					return;
					
				OnColumnChanging(AppointmentColumn.IsComplete, this.entityData.IsComplete);
				this.entityData.IsComplete = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.IsComplete, this.entityData.IsComplete);
				OnPropertyChanged("IsComplete");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDisabled property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsDisabled
		{
			get
			{
				return this.entityData.IsDisabled; 
			}
			
			set
			{
				if (this.entityData.IsDisabled == value)
					return;
					
				OnColumnChanging(AppointmentColumn.IsDisabled, this.entityData.IsDisabled);
				this.entityData.IsDisabled = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.IsDisabled, this.entityData.IsDisabled);
				OnPropertyChanged("IsDisabled");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public override System.String CreateUser
		{
			get
			{
				return this.entityData.CreateUser; 
			}
			
			set
			{
				if (this.entityData.CreateUser == value)
					return;
					
				OnColumnChanging(AppointmentColumn.CreateUser, this.entityData.CreateUser);
				this.entityData.CreateUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.CreateUser, this.entityData.CreateUser);
				OnPropertyChanged("CreateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public override System.DateTime CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
					
				OnColumnChanging(AppointmentColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public override System.String UpdateUser
		{
			get
			{
				return this.entityData.UpdateUser; 
			}
			
			set
			{
				if (this.entityData.UpdateUser == value)
					return;
					
				OnColumnChanging(AppointmentColumn.UpdateUser, this.entityData.UpdateUser);
				this.entityData.UpdateUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.UpdateUser, this.entityData.UpdateUser);
				OnPropertyChanged("UpdateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public override System.DateTime UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
					
				OnColumnChanging(AppointmentColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppointmentColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Content"/>.
		/// </summary>
		/// <value>The source Content for ContentId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Content ContentIdSource
      	{
            get { return entityData.ContentIdSource; }
            set { entityData.ContentIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Customer CustomerIdSource
      	{
            get { return entityData.CustomerIdSource; }
            set { entityData.CustomerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Room"/>.
		/// </summary>
		/// <value>The source Room for RoomId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Room RoomIdSource
      	{
            get { return entityData.RoomIdSource; }
            set { entityData.RoomIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Staff"/>.
		/// </summary>
		/// <value>The source Staff for DoctorUsername.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Staff DoctorUsernameSource
      	{
            get { return entityData.DoctorUsernameSource; }
            set { entityData.DoctorUsernameSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Staff"/>.
		/// </summary>
		/// <value>The source Staff for NurseUsername.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Staff NurseUsernameSource
      	{
            get { return entityData.NurseUsernameSource; }
            set { entityData.NurseUsernameSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Status"/>.
		/// </summary>
		/// <value>The source Status for StatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Status StatusIdSource
      	{
            get { return entityData.StatusIdSource; }
            set { entityData.StatusIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Id", "Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Id", "Id", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CustomerId", "Customer Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustomerId", "Customer Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustomerName", "Customer Name", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ContentTitle", "Content Title", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DoctorUsername", "Doctor Username", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DoctorShortName", "Doctor Short Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DoctorEmail", "Doctor Email", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RoomTitle", "Room Title", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NurseUsername", "Nurse Username", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NurseShortName", "Nurse Short Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StatusTitle", "Status Title", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Note", "Note", 500));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ColorCode", "Color Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ColorCode", "Color Code", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CreateUser", "Create User", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdateUser", "Update User", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Appointment"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "CustomerId", "CustomerName", "ContentId", "ContentTitle", "DoctorUsername", "DoctorShortName", "DoctorEmail", "RoomId", "RoomTitle", "NurseUsername", "NurseShortName", "StatusId", "StatusTitle", "Note", "StartTime", "EndTime", "ColorCode", "IsComplete", "IsDisabled", "CreateUser", "CreateDate", "UpdateUser", "UpdateDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AppointmentEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Appointment) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Appointment>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Appointment);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Appointment Entity 
		///</summary>
		protected virtual Appointment Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Appointment copy = new Appointment();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
					copy.OriginalId = this.OriginalId;
				copy.CustomerId = this.CustomerId;
				copy.CustomerName = this.CustomerName;
				copy.ContentId = this.ContentId;
				copy.ContentTitle = this.ContentTitle;
				copy.DoctorUsername = this.DoctorUsername;
				copy.DoctorShortName = this.DoctorShortName;
				copy.DoctorEmail = this.DoctorEmail;
				copy.RoomId = this.RoomId;
				copy.RoomTitle = this.RoomTitle;
				copy.NurseUsername = this.NurseUsername;
				copy.NurseShortName = this.NurseShortName;
				copy.StatusId = this.StatusId;
				copy.StatusTitle = this.StatusTitle;
				copy.Note = this.Note;
				copy.StartTime = this.StartTime;
				copy.EndTime = this.EndTime;
				copy.ColorCode = this.ColorCode;
				copy.IsComplete = this.IsComplete;
				copy.IsDisabled = this.IsDisabled;
				copy.CreateUser = this.CreateUser;
				copy.CreateDate = this.CreateDate;
				copy.UpdateUser = this.UpdateUser;
				copy.UpdateDate = this.UpdateDate;
			
			if (this.ContentIdSource != null && existingCopies.Contains(this.ContentIdSource))
				copy.ContentIdSource = existingCopies[this.ContentIdSource] as Content;
			else
				copy.ContentIdSource = MakeCopyOf(this.ContentIdSource, existingCopies) as Content;
			if (this.CustomerIdSource != null && existingCopies.Contains(this.CustomerIdSource))
				copy.CustomerIdSource = existingCopies[this.CustomerIdSource] as Customer;
			else
				copy.CustomerIdSource = MakeCopyOf(this.CustomerIdSource, existingCopies) as Customer;
			if (this.RoomIdSource != null && existingCopies.Contains(this.RoomIdSource))
				copy.RoomIdSource = existingCopies[this.RoomIdSource] as Room;
			else
				copy.RoomIdSource = MakeCopyOf(this.RoomIdSource, existingCopies) as Room;
			if (this.DoctorUsernameSource != null && existingCopies.Contains(this.DoctorUsernameSource))
				copy.DoctorUsernameSource = existingCopies[this.DoctorUsernameSource] as Staff;
			else
				copy.DoctorUsernameSource = MakeCopyOf(this.DoctorUsernameSource, existingCopies) as Staff;
			if (this.NurseUsernameSource != null && existingCopies.Contains(this.NurseUsernameSource))
				copy.NurseUsernameSource = existingCopies[this.NurseUsernameSource] as Staff;
			else
				copy.NurseUsernameSource = MakeCopyOf(this.NurseUsernameSource, existingCopies) as Staff;
			if (this.StatusIdSource != null && existingCopies.Contains(this.StatusIdSource))
				copy.StatusIdSource = existingCopies[this.StatusIdSource] as Status;
			else
				copy.StatusIdSource = MakeCopyOf(this.StatusIdSource, existingCopies) as Status;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Appointment Entity 
		///</summary>
		public virtual Appointment Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Appointment Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Appointment DeepCopy()
		{
			return EntityHelper.Clone<Appointment>(this as Appointment);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AppointmentEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AppointmentEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AppointmentEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AppointmentColumn column)
		{
			switch(column)
			{
					case AppointmentColumn.Id:
					return entityData.Id != _originalData.Id;
					case AppointmentColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case AppointmentColumn.CustomerName:
					return entityData.CustomerName != _originalData.CustomerName;
					case AppointmentColumn.ContentId:
					return entityData.ContentId != _originalData.ContentId;
					case AppointmentColumn.ContentTitle:
					return entityData.ContentTitle != _originalData.ContentTitle;
					case AppointmentColumn.DoctorUsername:
					return entityData.DoctorUsername != _originalData.DoctorUsername;
					case AppointmentColumn.DoctorShortName:
					return entityData.DoctorShortName != _originalData.DoctorShortName;
					case AppointmentColumn.DoctorEmail:
					return entityData.DoctorEmail != _originalData.DoctorEmail;
					case AppointmentColumn.RoomId:
					return entityData.RoomId != _originalData.RoomId;
					case AppointmentColumn.RoomTitle:
					return entityData.RoomTitle != _originalData.RoomTitle;
					case AppointmentColumn.NurseUsername:
					return entityData.NurseUsername != _originalData.NurseUsername;
					case AppointmentColumn.NurseShortName:
					return entityData.NurseShortName != _originalData.NurseShortName;
					case AppointmentColumn.StatusId:
					return entityData.StatusId != _originalData.StatusId;
					case AppointmentColumn.StatusTitle:
					return entityData.StatusTitle != _originalData.StatusTitle;
					case AppointmentColumn.Note:
					return entityData.Note != _originalData.Note;
					case AppointmentColumn.StartTime:
					return entityData.StartTime != _originalData.StartTime;
					case AppointmentColumn.EndTime:
					return entityData.EndTime != _originalData.EndTime;
					case AppointmentColumn.ColorCode:
					return entityData.ColorCode != _originalData.ColorCode;
					case AppointmentColumn.IsComplete:
					return entityData.IsComplete != _originalData.IsComplete;
					case AppointmentColumn.IsDisabled:
					return entityData.IsDisabled != _originalData.IsDisabled;
					case AppointmentColumn.CreateUser:
					return entityData.CreateUser != _originalData.CreateUser;
					case AppointmentColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case AppointmentColumn.UpdateUser:
					return entityData.UpdateUser != _originalData.UpdateUser;
					case AppointmentColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AppointmentColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.CustomerName != _originalData.CustomerName;
			result = result || entityData.ContentId != _originalData.ContentId;
			result = result || entityData.ContentTitle != _originalData.ContentTitle;
			result = result || entityData.DoctorUsername != _originalData.DoctorUsername;
			result = result || entityData.DoctorShortName != _originalData.DoctorShortName;
			result = result || entityData.DoctorEmail != _originalData.DoctorEmail;
			result = result || entityData.RoomId != _originalData.RoomId;
			result = result || entityData.RoomTitle != _originalData.RoomTitle;
			result = result || entityData.NurseUsername != _originalData.NurseUsername;
			result = result || entityData.NurseShortName != _originalData.NurseShortName;
			result = result || entityData.StatusId != _originalData.StatusId;
			result = result || entityData.StatusTitle != _originalData.StatusTitle;
			result = result || entityData.Note != _originalData.Note;
			result = result || entityData.StartTime != _originalData.StartTime;
			result = result || entityData.EndTime != _originalData.EndTime;
			result = result || entityData.ColorCode != _originalData.ColorCode;
			result = result || entityData.IsComplete != _originalData.IsComplete;
			result = result || entityData.IsDisabled != _originalData.IsDisabled;
			result = result || entityData.CreateUser != _originalData.CreateUser;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.UpdateUser != _originalData.UpdateUser;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			return result;
		}	
		
		///<summary>
		///  Returns a Appointment Entity with the original data.
		///</summary>
		public Appointment GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAppointment(
				_originalData.Id,
				_originalData.CustomerId,
				_originalData.CustomerName,
				_originalData.ContentId,
				_originalData.ContentTitle,
				_originalData.DoctorUsername,
				_originalData.DoctorShortName,
				_originalData.DoctorEmail,
				_originalData.RoomId,
				_originalData.RoomTitle,
				_originalData.NurseUsername,
				_originalData.NurseShortName,
				_originalData.StatusId,
				_originalData.StatusTitle,
				_originalData.Note,
				_originalData.StartTime,
				_originalData.EndTime,
				_originalData.ColorCode,
				_originalData.IsComplete,
				_originalData.IsDisabled,
				_originalData.CreateUser,
				_originalData.CreateDate,
				_originalData.UpdateUser,
				_originalData.UpdateDate
				);
				
			return (Appointment)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AppointmentBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AppointmentBase)
				return ValueEquals(this, (AppointmentBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AppointmentBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.CustomerId.GetHashCode() ^ 
					((this.CustomerName == null) ? string.Empty : this.CustomerName.ToString()).GetHashCode() ^ 
					this.ContentId.GetHashCode() ^ 
					((this.ContentTitle == null) ? string.Empty : this.ContentTitle.ToString()).GetHashCode() ^ 
					((this.DoctorUsername == null) ? string.Empty : this.DoctorUsername.ToString()).GetHashCode() ^ 
					((this.DoctorShortName == null) ? string.Empty : this.DoctorShortName.ToString()).GetHashCode() ^ 
					((this.DoctorEmail == null) ? string.Empty : this.DoctorEmail.ToString()).GetHashCode() ^ 
					((this.RoomId == null) ? string.Empty : this.RoomId.ToString()).GetHashCode() ^ 
					((this.RoomTitle == null) ? string.Empty : this.RoomTitle.ToString()).GetHashCode() ^ 
					((this.NurseUsername == null) ? string.Empty : this.NurseUsername.ToString()).GetHashCode() ^ 
					((this.NurseShortName == null) ? string.Empty : this.NurseShortName.ToString()).GetHashCode() ^ 
					((this.StatusId == null) ? string.Empty : this.StatusId.ToString()).GetHashCode() ^ 
					((this.StatusTitle == null) ? string.Empty : this.StatusTitle.ToString()).GetHashCode() ^ 
					((this.Note == null) ? string.Empty : this.Note.ToString()).GetHashCode() ^ 
					((this.StartTime == null) ? string.Empty : this.StartTime.ToString()).GetHashCode() ^ 
					((this.EndTime == null) ? string.Empty : this.EndTime.ToString()).GetHashCode() ^ 
					this.ColorCode.GetHashCode() ^ 
					this.IsComplete.GetHashCode() ^ 
					this.IsDisabled.GetHashCode() ^ 
					((this.CreateUser == null) ? string.Empty : this.CreateUser.ToString()).GetHashCode() ^ 
					this.CreateDate.GetHashCode() ^ 
					((this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString()).GetHashCode() ^ 
					this.UpdateDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AppointmentBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AppointmentBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AppointmentBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AppointmentBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AppointmentBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AppointmentBase Object1, AppointmentBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.CustomerId != Object2.CustomerId)
				equal = false;
			if ( Object1.CustomerName != null && Object2.CustomerName != null )
			{
				if (Object1.CustomerName != Object2.CustomerName)
					equal = false;
			}
			else if (Object1.CustomerName == null ^ Object2.CustomerName == null )
			{
				equal = false;
			}
			if (Object1.ContentId != Object2.ContentId)
				equal = false;
			if ( Object1.ContentTitle != null && Object2.ContentTitle != null )
			{
				if (Object1.ContentTitle != Object2.ContentTitle)
					equal = false;
			}
			else if (Object1.ContentTitle == null ^ Object2.ContentTitle == null )
			{
				equal = false;
			}
			if ( Object1.DoctorUsername != null && Object2.DoctorUsername != null )
			{
				if (Object1.DoctorUsername != Object2.DoctorUsername)
					equal = false;
			}
			else if (Object1.DoctorUsername == null ^ Object2.DoctorUsername == null )
			{
				equal = false;
			}
			if ( Object1.DoctorShortName != null && Object2.DoctorShortName != null )
			{
				if (Object1.DoctorShortName != Object2.DoctorShortName)
					equal = false;
			}
			else if (Object1.DoctorShortName == null ^ Object2.DoctorShortName == null )
			{
				equal = false;
			}
			if ( Object1.DoctorEmail != null && Object2.DoctorEmail != null )
			{
				if (Object1.DoctorEmail != Object2.DoctorEmail)
					equal = false;
			}
			else if (Object1.DoctorEmail == null ^ Object2.DoctorEmail == null )
			{
				equal = false;
			}
			if ( Object1.RoomId != null && Object2.RoomId != null )
			{
				if (Object1.RoomId != Object2.RoomId)
					equal = false;
			}
			else if (Object1.RoomId == null ^ Object2.RoomId == null )
			{
				equal = false;
			}
			if ( Object1.RoomTitle != null && Object2.RoomTitle != null )
			{
				if (Object1.RoomTitle != Object2.RoomTitle)
					equal = false;
			}
			else if (Object1.RoomTitle == null ^ Object2.RoomTitle == null )
			{
				equal = false;
			}
			if ( Object1.NurseUsername != null && Object2.NurseUsername != null )
			{
				if (Object1.NurseUsername != Object2.NurseUsername)
					equal = false;
			}
			else if (Object1.NurseUsername == null ^ Object2.NurseUsername == null )
			{
				equal = false;
			}
			if ( Object1.NurseShortName != null && Object2.NurseShortName != null )
			{
				if (Object1.NurseShortName != Object2.NurseShortName)
					equal = false;
			}
			else if (Object1.NurseShortName == null ^ Object2.NurseShortName == null )
			{
				equal = false;
			}
			if ( Object1.StatusId != null && Object2.StatusId != null )
			{
				if (Object1.StatusId != Object2.StatusId)
					equal = false;
			}
			else if (Object1.StatusId == null ^ Object2.StatusId == null )
			{
				equal = false;
			}
			if ( Object1.StatusTitle != null && Object2.StatusTitle != null )
			{
				if (Object1.StatusTitle != Object2.StatusTitle)
					equal = false;
			}
			else if (Object1.StatusTitle == null ^ Object2.StatusTitle == null )
			{
				equal = false;
			}
			if ( Object1.Note != null && Object2.Note != null )
			{
				if (Object1.Note != Object2.Note)
					equal = false;
			}
			else if (Object1.Note == null ^ Object2.Note == null )
			{
				equal = false;
			}
			if ( Object1.StartTime != null && Object2.StartTime != null )
			{
				if (Object1.StartTime != Object2.StartTime)
					equal = false;
			}
			else if (Object1.StartTime == null ^ Object2.StartTime == null )
			{
				equal = false;
			}
			if ( Object1.EndTime != null && Object2.EndTime != null )
			{
				if (Object1.EndTime != Object2.EndTime)
					equal = false;
			}
			else if (Object1.EndTime == null ^ Object2.EndTime == null )
			{
				equal = false;
			}
			if (Object1.ColorCode != Object2.ColorCode)
				equal = false;
			if (Object1.IsComplete != Object2.IsComplete)
				equal = false;
			if (Object1.IsDisabled != Object2.IsDisabled)
				equal = false;
			if ( Object1.CreateUser != null && Object2.CreateUser != null )
			{
				if (Object1.CreateUser != Object2.CreateUser)
					equal = false;
			}
			else if (Object1.CreateUser == null ^ Object2.CreateUser == null )
			{
				equal = false;
			}
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if ( Object1.UpdateUser != null && Object2.UpdateUser != null )
			{
				if (Object1.UpdateUser != Object2.UpdateUser)
					equal = false;
			}
			else if (Object1.UpdateUser == null ^ Object2.UpdateUser == null )
			{
				equal = false;
			}
			if (Object1.UpdateDate != Object2.UpdateDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AppointmentBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AppointmentComparer GetComparer()
        {
            return new AppointmentComparer();
        }
        */

        // Comparer delegates back to Appointment
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Appointment rhs, AppointmentColumn which)
        {
            switch (which)
            {
            	
            	
            	case AppointmentColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case AppointmentColumn.CustomerId:
            		return this.CustomerId.CompareTo(rhs.CustomerId);
            		
            		                 
            	
            	
            	case AppointmentColumn.CustomerName:
            		return this.CustomerName.CompareTo(rhs.CustomerName);
            		
            		                 
            	
            	
            	case AppointmentColumn.ContentId:
            		return this.ContentId.CompareTo(rhs.ContentId);
            		
            		                 
            	
            	
            	case AppointmentColumn.ContentTitle:
            		return this.ContentTitle.CompareTo(rhs.ContentTitle);
            		
            		                 
            	
            	
            	case AppointmentColumn.DoctorUsername:
            		return this.DoctorUsername.CompareTo(rhs.DoctorUsername);
            		
            		                 
            	
            	
            	case AppointmentColumn.DoctorShortName:
            		return this.DoctorShortName.CompareTo(rhs.DoctorShortName);
            		
            		                 
            	
            	
            	case AppointmentColumn.DoctorEmail:
            		return this.DoctorEmail.CompareTo(rhs.DoctorEmail);
            		
            		                 
            	
            	
            	case AppointmentColumn.RoomId:
            		return this.RoomId.Value.CompareTo(rhs.RoomId.Value);
            		
            		                 
            	
            	
            	case AppointmentColumn.RoomTitle:
            		return this.RoomTitle.CompareTo(rhs.RoomTitle);
            		
            		                 
            	
            	
            	case AppointmentColumn.NurseUsername:
            		return this.NurseUsername.CompareTo(rhs.NurseUsername);
            		
            		                 
            	
            	
            	case AppointmentColumn.NurseShortName:
            		return this.NurseShortName.CompareTo(rhs.NurseShortName);
            		
            		                 
            	
            	
            	case AppointmentColumn.StatusId:
            		return this.StatusId.Value.CompareTo(rhs.StatusId.Value);
            		
            		                 
            	
            	
            	case AppointmentColumn.StatusTitle:
            		return this.StatusTitle.CompareTo(rhs.StatusTitle);
            		
            		                 
            	
            	
            	case AppointmentColumn.Note:
            		return this.Note.CompareTo(rhs.Note);
            		
            		                 
            	
            	
            	case AppointmentColumn.StartTime:
            		return this.StartTime.Value.CompareTo(rhs.StartTime.Value);
            		
            		                 
            	
            	
            	case AppointmentColumn.EndTime:
            		return this.EndTime.Value.CompareTo(rhs.EndTime.Value);
            		
            		                 
            	
            	
            	case AppointmentColumn.ColorCode:
            		return this.ColorCode.CompareTo(rhs.ColorCode);
            		
            		                 
            	
            	
            	case AppointmentColumn.IsComplete:
            		return this.IsComplete.CompareTo(rhs.IsComplete);
            		
            		                 
            	
            	
            	case AppointmentColumn.IsDisabled:
            		return this.IsDisabled.CompareTo(rhs.IsDisabled);
            		
            		                 
            	
            	
            	case AppointmentColumn.CreateUser:
            		return this.CreateUser.CompareTo(rhs.CreateUser);
            		
            		                 
            	
            	
            	case AppointmentColumn.CreateDate:
            		return this.CreateDate.CompareTo(rhs.CreateDate);
            		
            		                 
            	
            	
            	case AppointmentColumn.UpdateUser:
            		return this.UpdateUser.CompareTo(rhs.UpdateUser);
            		
            		                 
            	
            	
            	case AppointmentColumn.UpdateDate:
            		return this.UpdateDate.CompareTo(rhs.UpdateDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AppointmentKey> Members
		
		// member variable for the EntityId property
		private AppointmentKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AppointmentKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AppointmentKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Appointment")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{25}{24}- Id: {0}{24}- CustomerId: {1}{24}- CustomerName: {2}{24}- ContentId: {3}{24}- ContentTitle: {4}{24}- DoctorUsername: {5}{24}- DoctorShortName: {6}{24}- DoctorEmail: {7}{24}- RoomId: {8}{24}- RoomTitle: {9}{24}- NurseUsername: {10}{24}- NurseShortName: {11}{24}- StatusId: {12}{24}- StatusTitle: {13}{24}- Note: {14}{24}- StartTime: {15}{24}- EndTime: {16}{24}- ColorCode: {17}{24}- IsComplete: {18}{24}- IsDisabled: {19}{24}- CreateUser: {20}{24}- CreateDate: {21}{24}- UpdateUser: {22}{24}- UpdateDate: {23}{24}{26}", 
				this.Id,
				this.CustomerId,
				(this.CustomerName == null) ? string.Empty : this.CustomerName.ToString(),
				this.ContentId,
				(this.ContentTitle == null) ? string.Empty : this.ContentTitle.ToString(),
				(this.DoctorUsername == null) ? string.Empty : this.DoctorUsername.ToString(),
				(this.DoctorShortName == null) ? string.Empty : this.DoctorShortName.ToString(),
				(this.DoctorEmail == null) ? string.Empty : this.DoctorEmail.ToString(),
				(this.RoomId == null) ? string.Empty : this.RoomId.ToString(),
				(this.RoomTitle == null) ? string.Empty : this.RoomTitle.ToString(),
				(this.NurseUsername == null) ? string.Empty : this.NurseUsername.ToString(),
				(this.NurseShortName == null) ? string.Empty : this.NurseShortName.ToString(),
				(this.StatusId == null) ? string.Empty : this.StatusId.ToString(),
				(this.StatusTitle == null) ? string.Empty : this.StatusTitle.ToString(),
				(this.Note == null) ? string.Empty : this.Note.ToString(),
				(this.StartTime == null) ? string.Empty : this.StartTime.ToString(),
				(this.EndTime == null) ? string.Empty : this.EndTime.ToString(),
				this.ColorCode,
				this.IsComplete,
				this.IsDisabled,
				(this.CreateUser == null) ? string.Empty : this.CreateUser.ToString(),
				this.CreateDate,
				(this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString(),
				this.UpdateDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Appointment' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AppointmentEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Appointment"</remarks>
		public System.String Id;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CustomerId : 
		/// </summary>
		public System.String		  CustomerId = string.Empty;
		
		/// <summary>
		/// CustomerName : 
		/// </summary>
		public System.String		  CustomerName = null;
		
		/// <summary>
		/// ContentId : 
		/// </summary>
		public System.Int64		  ContentId = (long)0;
		
		/// <summary>
		/// ContentTitle : 
		/// </summary>
		public System.String		  ContentTitle = null;
		
		/// <summary>
		/// DoctorUsername : 
		/// </summary>
		public System.String		  DoctorUsername = null;
		
		/// <summary>
		/// DoctorShortName : 
		/// </summary>
		public System.String		  DoctorShortName = null;
		
		/// <summary>
		/// DoctorEmail : 
		/// </summary>
		public System.String		  DoctorEmail = null;
		
		/// <summary>
		/// RoomId : 
		/// </summary>
		public System.Int64?		  RoomId = null;
		
		/// <summary>
		/// RoomTitle : 
		/// </summary>
		public System.String		  RoomTitle = null;
		
		/// <summary>
		/// NurseUsername : 
		/// </summary>
		public System.String		  NurseUsername = null;
		
		/// <summary>
		/// NurseShortName : 
		/// </summary>
		public System.String		  NurseShortName = null;
		
		/// <summary>
		/// StatusId : 
		/// </summary>
		public System.Int64?		  StatusId = null;
		
		/// <summary>
		/// StatusTitle : 
		/// </summary>
		public System.String		  StatusTitle = null;
		
		/// <summary>
		/// Note : 
		/// </summary>
		public System.String		  Note = null;
		
		/// <summary>
		/// StartTime : 
		/// </summary>
		public System.DateTime?		  StartTime = null;
		
		/// <summary>
		/// EndTime : 
		/// </summary>
		public System.DateTime?		  EndTime = null;
		
		/// <summary>
		/// ColorCode : 
		/// </summary>
		public System.String		  ColorCode = string.Empty;
		
		/// <summary>
		/// IsComplete : 
		/// </summary>
		public System.Boolean		  IsComplete = false;
		
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		public System.Boolean		  IsDisabled = false;
		
		/// <summary>
		/// CreateUser : 
		/// </summary>
		public System.String		  CreateUser = null;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		public System.DateTime		  CreateDate = DateTime.Now;
		
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		public System.String		  UpdateUser = null;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		public System.DateTime		  UpdateDate = DateTime.Now;
		#endregion
			
		#region Source Foreign Key Property
				
		private Content _contentIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Content"/>.
		/// </summary>
		/// <value>The source Content for ContentId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Content ContentIdSource
      	{
            get { return this._contentIdSource; }
            set { this._contentIdSource = value; }
      	}
		private Customer _customerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Customer CustomerIdSource
      	{
            get { return this._customerIdSource; }
            set { this._customerIdSource = value; }
      	}
		private Room _roomIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Room"/>.
		/// </summary>
		/// <value>The source Room for RoomId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Room RoomIdSource
      	{
            get { return this._roomIdSource; }
            set { this._roomIdSource = value; }
      	}
		private Staff _doctorUsernameSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Staff"/>.
		/// </summary>
		/// <value>The source Staff for DoctorUsername.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Staff DoctorUsernameSource
      	{
            get { return this._doctorUsernameSource; }
            set { this._doctorUsernameSource = value; }
      	}
		private Staff _nurseUsernameSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Staff"/>.
		/// </summary>
		/// <value>The source Staff for NurseUsername.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Staff NurseUsernameSource
      	{
            get { return this._nurseUsernameSource; }
            set { this._nurseUsernameSource = value; }
      	}
		private Status _statusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Status"/>.
		/// </summary>
		/// <value>The source Status for StatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Status StatusIdSource
      	{
            get { return this._statusIdSource; }
            set { this._statusIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AppointmentEntityData _tmp = new AppointmentEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.CustomerId = this.CustomerId;
			_tmp.CustomerName = this.CustomerName;
			_tmp.ContentId = this.ContentId;
			_tmp.ContentTitle = this.ContentTitle;
			_tmp.DoctorUsername = this.DoctorUsername;
			_tmp.DoctorShortName = this.DoctorShortName;
			_tmp.DoctorEmail = this.DoctorEmail;
			_tmp.RoomId = this.RoomId;
			_tmp.RoomTitle = this.RoomTitle;
			_tmp.NurseUsername = this.NurseUsername;
			_tmp.NurseShortName = this.NurseShortName;
			_tmp.StatusId = this.StatusId;
			_tmp.StatusTitle = this.StatusTitle;
			_tmp.Note = this.Note;
			_tmp.StartTime = this.StartTime;
			_tmp.EndTime = this.EndTime;
			_tmp.ColorCode = this.ColorCode;
			_tmp.IsComplete = this.IsComplete;
			_tmp.IsDisabled = this.IsDisabled;
			_tmp.CreateUser = this.CreateUser;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateUser = this.UpdateUser;
			_tmp.UpdateDate = this.UpdateDate;
			
			#region Source Parent Composite Entities
			if (this.ContentIdSource != null)
				_tmp.ContentIdSource = MakeCopyOf(this.ContentIdSource) as Content;
			if (this.CustomerIdSource != null)
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
			if (this.RoomIdSource != null)
				_tmp.RoomIdSource = MakeCopyOf(this.RoomIdSource) as Room;
			if (this.DoctorUsernameSource != null)
				_tmp.DoctorUsernameSource = MakeCopyOf(this.DoctorUsernameSource) as Staff;
			if (this.NurseUsernameSource != null)
				_tmp.NurseUsernameSource = MakeCopyOf(this.NurseUsernameSource) as Staff;
			if (this.StatusIdSource != null)
				_tmp.StatusIdSource = MakeCopyOf(this.StatusIdSource) as Status;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AppointmentEntityData _tmp = new AppointmentEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.CustomerId = this.CustomerId;
			_tmp.CustomerName = this.CustomerName;
			_tmp.ContentId = this.ContentId;
			_tmp.ContentTitle = this.ContentTitle;
			_tmp.DoctorUsername = this.DoctorUsername;
			_tmp.DoctorShortName = this.DoctorShortName;
			_tmp.DoctorEmail = this.DoctorEmail;
			_tmp.RoomId = this.RoomId;
			_tmp.RoomTitle = this.RoomTitle;
			_tmp.NurseUsername = this.NurseUsername;
			_tmp.NurseShortName = this.NurseShortName;
			_tmp.StatusId = this.StatusId;
			_tmp.StatusTitle = this.StatusTitle;
			_tmp.Note = this.Note;
			_tmp.StartTime = this.StartTime;
			_tmp.EndTime = this.EndTime;
			_tmp.ColorCode = this.ColorCode;
			_tmp.IsComplete = this.IsComplete;
			_tmp.IsDisabled = this.IsDisabled;
			_tmp.CreateUser = this.CreateUser;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateUser = this.UpdateUser;
			_tmp.UpdateDate = this.UpdateDate;
			
			#region Source Parent Composite Entities
			if (this.ContentIdSource != null && existingCopies.Contains(this.ContentIdSource))
				_tmp.ContentIdSource = existingCopies[this.ContentIdSource] as Content;
			else
				_tmp.ContentIdSource = MakeCopyOf(this.ContentIdSource, existingCopies) as Content;
			if (this.CustomerIdSource != null && existingCopies.Contains(this.CustomerIdSource))
				_tmp.CustomerIdSource = existingCopies[this.CustomerIdSource] as Customer;
			else
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource, existingCopies) as Customer;
			if (this.RoomIdSource != null && existingCopies.Contains(this.RoomIdSource))
				_tmp.RoomIdSource = existingCopies[this.RoomIdSource] as Room;
			else
				_tmp.RoomIdSource = MakeCopyOf(this.RoomIdSource, existingCopies) as Room;
			if (this.DoctorUsernameSource != null && existingCopies.Contains(this.DoctorUsernameSource))
				_tmp.DoctorUsernameSource = existingCopies[this.DoctorUsernameSource] as Staff;
			else
				_tmp.DoctorUsernameSource = MakeCopyOf(this.DoctorUsernameSource, existingCopies) as Staff;
			if (this.NurseUsernameSource != null && existingCopies.Contains(this.NurseUsernameSource))
				_tmp.NurseUsernameSource = existingCopies[this.NurseUsernameSource] as Staff;
			else
				_tmp.NurseUsernameSource = MakeCopyOf(this.NurseUsernameSource, existingCopies) as Staff;
			if (this.StatusIdSource != null && existingCopies.Contains(this.StatusIdSource))
				_tmp.StatusIdSource = existingCopies[this.StatusIdSource] as Status;
			else
				_tmp.StatusIdSource = MakeCopyOf(this.StatusIdSource, existingCopies) as Status;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppointmentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AppointmentColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppointmentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AppointmentColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppointmentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AppointmentColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AppointmentEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AppointmentEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppointmentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AppointmentColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AppointmentEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AppointmentEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AppointmentEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Appointment"/> object.
	/// </remarks>
	public class AppointmentEventArgs : System.EventArgs
	{
		private AppointmentColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AppointmentEventArgs class.
		///</summary>
		public AppointmentEventArgs(AppointmentColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AppointmentEventArgs class.
		///</summary>
		public AppointmentEventArgs(AppointmentColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AppointmentColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AppointmentColumn" />
		public AppointmentColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Appointment related events.
	///</summary>
	public delegate void AppointmentEventHandler(object sender, AppointmentEventArgs e);
	
	#region AppointmentComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AppointmentComparer : System.Collections.Generic.IComparer<Appointment>
	{
		AppointmentColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AppointmentComparer"/> class.
        /// </summary>
		public AppointmentComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AppointmentComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AppointmentComparer(AppointmentColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Appointment"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Appointment"/> to compare.</param>
        /// <param name="b">The second <c>Appointment</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Appointment a, Appointment b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Appointment entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Appointment a, Appointment b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AppointmentColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AppointmentKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Appointment"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AppointmentKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AppointmentKey class.
		/// </summary>
		public AppointmentKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AppointmentKey class.
		/// </summary>
		public AppointmentKey(AppointmentBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AppointmentKey class.
		/// </summary>
		public AppointmentKey(System.String _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AppointmentBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AppointmentBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.String _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.String Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.String) EntityUtil.ChangeType(values["Id"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AppointmentColumn Enum
	
	/// <summary>
	/// Enumerate the Appointment columns.
	/// </summary>
	[Serializable]
	public enum AppointmentColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.String), System.Data.DbType.String, true, false, false, 20)]
		Id = 1,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("CustomerId")]
		[ColumnEnum("CustomerId", typeof(System.String), System.Data.DbType.String, false, false, false, 20)]
		CustomerId = 2,
		/// <summary>
		/// CustomerName : 
		/// </summary>
		[EnumTextValue("CustomerName")]
		[ColumnEnum("CustomerName", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		CustomerName = 3,
		/// <summary>
		/// ContentId : 
		/// </summary>
		[EnumTextValue("ContentId")]
		[ColumnEnum("ContentId", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		ContentId = 4,
		/// <summary>
		/// ContentTitle : 
		/// </summary>
		[EnumTextValue("ContentTitle")]
		[ColumnEnum("ContentTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		ContentTitle = 5,
		/// <summary>
		/// DoctorUsername : 
		/// </summary>
		[EnumTextValue("DoctorUsername")]
		[ColumnEnum("DoctorUsername", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		DoctorUsername = 6,
		/// <summary>
		/// DoctorShortName : 
		/// </summary>
		[EnumTextValue("DoctorShortName")]
		[ColumnEnum("DoctorShortName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DoctorShortName = 7,
		/// <summary>
		/// DoctorEmail : 
		/// </summary>
		[EnumTextValue("DoctorEmail")]
		[ColumnEnum("DoctorEmail", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		DoctorEmail = 8,
		/// <summary>
		/// RoomId : 
		/// </summary>
		[EnumTextValue("RoomId")]
		[ColumnEnum("RoomId", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		RoomId = 9,
		/// <summary>
		/// RoomTitle : 
		/// </summary>
		[EnumTextValue("RoomTitle")]
		[ColumnEnum("RoomTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		RoomTitle = 10,
		/// <summary>
		/// NurseUsername : 
		/// </summary>
		[EnumTextValue("NurseUsername")]
		[ColumnEnum("NurseUsername", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		NurseUsername = 11,
		/// <summary>
		/// NurseShortName : 
		/// </summary>
		[EnumTextValue("NurseShortName")]
		[ColumnEnum("NurseShortName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NurseShortName = 12,
		/// <summary>
		/// StatusId : 
		/// </summary>
		[EnumTextValue("StatusId")]
		[ColumnEnum("StatusId", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		StatusId = 13,
		/// <summary>
		/// StatusTitle : 
		/// </summary>
		[EnumTextValue("StatusTitle")]
		[ColumnEnum("StatusTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		StatusTitle = 14,
		/// <summary>
		/// Note : 
		/// </summary>
		[EnumTextValue("Note")]
		[ColumnEnum("Note", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		Note = 15,
		/// <summary>
		/// StartTime : 
		/// </summary>
		[EnumTextValue("StartTime")]
		[ColumnEnum("StartTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StartTime = 16,
		/// <summary>
		/// EndTime : 
		/// </summary>
		[EnumTextValue("EndTime")]
		[ColumnEnum("EndTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EndTime = 17,
		/// <summary>
		/// ColorCode : 
		/// </summary>
		[EnumTextValue("ColorCode")]
		[ColumnEnum("ColorCode", typeof(System.String), System.Data.DbType.String, false, false, false, 10)]
		ColorCode = 18,
		/// <summary>
		/// IsComplete : 
		/// </summary>
		[EnumTextValue("IsComplete")]
		[ColumnEnum("IsComplete", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsComplete = 19,
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		[EnumTextValue("IsDisabled")]
		[ColumnEnum("IsDisabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsDisabled = 20,
		/// <summary>
		/// CreateUser : 
		/// </summary>
		[EnumTextValue("CreateUser")]
		[ColumnEnum("CreateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		CreateUser = 21,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("CreateDate")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate = 22,
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		[EnumTextValue("UpdateUser")]
		[ColumnEnum("UpdateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		UpdateUser = 23,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("UpdateDate")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		UpdateDate = 24
	}//End enum

	#endregion AppointmentColumn Enum

} // end namespace
