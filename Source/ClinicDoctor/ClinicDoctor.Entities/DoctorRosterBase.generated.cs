
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file DoctorRoster.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using ClinicDoctor.Entities.Validation;
#endregion

namespace ClinicDoctor.Entities
{
	///<summary>
	/// An object representation of the 'DoctorRoster' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class DoctorRosterBase : EntityBase, IDoctorRoster, IEntityId<DoctorRosterKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private DoctorRosterEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private DoctorRosterEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private DoctorRosterEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<DoctorRoster> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DoctorRosterEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event DoctorRosterEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="DoctorRosterBase"/> instance.
		///</summary>
		public DoctorRosterBase()
		{
			this.entityData = new DoctorRosterEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="DoctorRosterBase"/> instance.
		///</summary>
		///<param name="_doctorId"></param>
		///<param name="_rosterId"></param>
		///<param name="_startTime"></param>
		///<param name="_endTime"></param>
		///<param name="_note"></param>
		///<param name="_isDisabled"></param>
		///<param name="_createUser"></param>
		///<param name="_createDate"></param>
		///<param name="_updateUser"></param>
		///<param name="_updateDate"></param>
		public DoctorRosterBase(System.Int32? _doctorId, System.Int32? _rosterId, System.DateTime? _startTime, 
			System.DateTime? _endTime, System.String _note, System.Boolean? _isDisabled, System.String _createUser, 
			System.DateTime? _createDate, System.String _updateUser, System.DateTime? _updateDate)
		{
			this.entityData = new DoctorRosterEntityData();
			this.backupData = null;

			this.DoctorId = _doctorId;
			this.RosterId = _rosterId;
			this.StartTime = _startTime;
			this.EndTime = _endTime;
			this.Note = _note;
			this.IsDisabled = _isDisabled;
			this.CreateUser = _createUser;
			this.CreateDate = _createDate;
			this.UpdateUser = _updateUser;
			this.UpdateDate = _updateDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="DoctorRoster"/> instance.
		///</summary>
		///<param name="_doctorId"></param>
		///<param name="_rosterId"></param>
		///<param name="_startTime"></param>
		///<param name="_endTime"></param>
		///<param name="_note"></param>
		///<param name="_isDisabled"></param>
		///<param name="_createUser"></param>
		///<param name="_createDate"></param>
		///<param name="_updateUser"></param>
		///<param name="_updateDate"></param>
		public static DoctorRoster CreateDoctorRoster(System.Int32? _doctorId, System.Int32? _rosterId, System.DateTime? _startTime, 
			System.DateTime? _endTime, System.String _note, System.Boolean? _isDisabled, System.String _createUser, 
			System.DateTime? _createDate, System.String _updateUser, System.DateTime? _updateDate)
		{
			DoctorRoster newDoctorRoster = new DoctorRoster();
			newDoctorRoster.DoctorId = _doctorId;
			newDoctorRoster.RosterId = _rosterId;
			newDoctorRoster.StartTime = _startTime;
			newDoctorRoster.EndTime = _endTime;
			newDoctorRoster.Note = _note;
			newDoctorRoster.IsDisabled = _isDisabled;
			newDoctorRoster.CreateUser = _createUser;
			newDoctorRoster.CreateDate = _createDate;
			newDoctorRoster.UpdateUser = _updateUser;
			newDoctorRoster.UpdateDate = _updateDate;
			return newDoctorRoster;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public override System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(DoctorRosterColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DoctorRosterColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoctorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDoctorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DoctorId
		{
			get
			{
				return this.entityData.DoctorId; 
			}
			
			set
			{
				if (this.entityData.DoctorId == value)
					return;
					
				OnColumnChanging(DoctorRosterColumn.DoctorId, this.entityData.DoctorId);
				this.entityData.DoctorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DoctorRosterColumn.DoctorId, this.entityData.DoctorId);
				OnPropertyChanged("DoctorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RosterId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRosterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RosterId
		{
			get
			{
				return this.entityData.RosterId; 
			}
			
			set
			{
				if (this.entityData.RosterId == value)
					return;
					
				OnColumnChanging(DoctorRosterColumn.RosterId, this.entityData.RosterId);
				this.entityData.RosterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DoctorRosterColumn.RosterId, this.entityData.RosterId);
				OnPropertyChanged("RosterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStartTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StartTime
		{
			get
			{
				return this.entityData.StartTime; 
			}
			
			set
			{
				if (this.entityData.StartTime == value)
					return;
					
				OnColumnChanging(DoctorRosterColumn.StartTime, this.entityData.StartTime);
				this.entityData.StartTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DoctorRosterColumn.StartTime, this.entityData.StartTime);
				OnPropertyChanged("StartTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEndTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EndTime
		{
			get
			{
				return this.entityData.EndTime; 
			}
			
			set
			{
				if (this.entityData.EndTime == value)
					return;
					
				OnColumnChanging(DoctorRosterColumn.EndTime, this.entityData.EndTime);
				this.entityData.EndTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DoctorRosterColumn.EndTime, this.entityData.EndTime);
				OnPropertyChanged("EndTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Note property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Note
		{
			get
			{
				return this.entityData.Note; 
			}
			
			set
			{
				if (this.entityData.Note == value)
					return;
					
				OnColumnChanging(DoctorRosterColumn.Note, this.entityData.Note);
				this.entityData.Note = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DoctorRosterColumn.Note, this.entityData.Note);
				OnPropertyChanged("Note");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDisabled property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsDisabledNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Boolean? IsDisabled
		{
			get
			{
				return this.entityData.IsDisabled; 
			}
			
			set
			{
				if (this.entityData.IsDisabled == value)
					return;
					
				OnColumnChanging(DoctorRosterColumn.IsDisabled, this.entityData.IsDisabled);
				this.entityData.IsDisabled = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DoctorRosterColumn.IsDisabled, this.entityData.IsDisabled);
				OnPropertyChanged("IsDisabled");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public override System.String CreateUser
		{
			get
			{
				return this.entityData.CreateUser; 
			}
			
			set
			{
				if (this.entityData.CreateUser == value)
					return;
					
				OnColumnChanging(DoctorRosterColumn.CreateUser, this.entityData.CreateUser);
				this.entityData.CreateUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DoctorRosterColumn.CreateUser, this.entityData.CreateUser);
				OnPropertyChanged("CreateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreateDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.DateTime? CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
					
				OnColumnChanging(DoctorRosterColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DoctorRosterColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public override System.String UpdateUser
		{
			get
			{
				return this.entityData.UpdateUser; 
			}
			
			set
			{
				if (this.entityData.UpdateUser == value)
					return;
					
				OnColumnChanging(DoctorRosterColumn.UpdateUser, this.entityData.UpdateUser);
				this.entityData.UpdateUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DoctorRosterColumn.UpdateUser, this.entityData.UpdateUser);
				OnPropertyChanged("UpdateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdateDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.DateTime? UpdateDate
		{
			get
			{
				return this.entityData.UpdateDate; 
			}
			
			set
			{
				if (this.entityData.UpdateDate == value)
					return;
					
				OnColumnChanging(DoctorRosterColumn.UpdateDate, this.entityData.UpdateDate);
				this.entityData.UpdateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(DoctorRosterColumn.UpdateDate, this.entityData.UpdateDate);
				OnPropertyChanged("UpdateDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Roster"/>.
		/// </summary>
		/// <value>The source Roster for RosterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Roster RosterIdSource
      	{
            get { return entityData.RosterIdSource; }
            set { entityData.RosterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Staff"/>.
		/// </summary>
		/// <value>The source Staff for DoctorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Staff DoctorIdSource
      	{
            get { return entityData.DoctorIdSource; }
            set { entityData.DoctorIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Note", "Note", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CreateUser", "Create User", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdateUser", "Update User", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "DoctorRoster"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "DoctorId", "RosterId", "StartTime", "EndTime", "Note", "IsDisabled", "CreateUser", "CreateDate", "UpdateUser", "UpdateDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as DoctorRosterEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (DoctorRoster) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<DoctorRoster>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as DoctorRoster);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed DoctorRoster Entity 
		///</summary>
		protected virtual DoctorRoster Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			DoctorRoster copy = new DoctorRoster();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.DoctorId = this.DoctorId;
				copy.RosterId = this.RosterId;
				copy.StartTime = this.StartTime;
				copy.EndTime = this.EndTime;
				copy.Note = this.Note;
				copy.IsDisabled = this.IsDisabled;
				copy.CreateUser = this.CreateUser;
				copy.CreateDate = this.CreateDate;
				copy.UpdateUser = this.UpdateUser;
				copy.UpdateDate = this.UpdateDate;
			
			if (this.RosterIdSource != null && existingCopies.Contains(this.RosterIdSource))
				copy.RosterIdSource = existingCopies[this.RosterIdSource] as Roster;
			else
				copy.RosterIdSource = MakeCopyOf(this.RosterIdSource, existingCopies) as Roster;
			if (this.DoctorIdSource != null && existingCopies.Contains(this.DoctorIdSource))
				copy.DoctorIdSource = existingCopies[this.DoctorIdSource] as Staff;
			else
				copy.DoctorIdSource = MakeCopyOf(this.DoctorIdSource, existingCopies) as Staff;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed DoctorRoster Entity 
		///</summary>
		public virtual DoctorRoster Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed DoctorRoster Entity which is a deep copy of the current entity.
		///</summary>
		public virtual DoctorRoster DeepCopy()
		{
			return EntityHelper.Clone<DoctorRoster>(this as DoctorRoster);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as DoctorRosterEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new DoctorRosterEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as DoctorRosterEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(DoctorRosterColumn column)
		{
			switch(column)
			{
					case DoctorRosterColumn.Id:
					return entityData.Id != _originalData.Id;
					case DoctorRosterColumn.DoctorId:
					return entityData.DoctorId != _originalData.DoctorId;
					case DoctorRosterColumn.RosterId:
					return entityData.RosterId != _originalData.RosterId;
					case DoctorRosterColumn.StartTime:
					return entityData.StartTime != _originalData.StartTime;
					case DoctorRosterColumn.EndTime:
					return entityData.EndTime != _originalData.EndTime;
					case DoctorRosterColumn.Note:
					return entityData.Note != _originalData.Note;
					case DoctorRosterColumn.IsDisabled:
					return entityData.IsDisabled != _originalData.IsDisabled;
					case DoctorRosterColumn.CreateUser:
					return entityData.CreateUser != _originalData.CreateUser;
					case DoctorRosterColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case DoctorRosterColumn.UpdateUser:
					return entityData.UpdateUser != _originalData.UpdateUser;
					case DoctorRosterColumn.UpdateDate:
					return entityData.UpdateDate != _originalData.UpdateDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< DoctorRosterColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.DoctorId != _originalData.DoctorId;
			result = result || entityData.RosterId != _originalData.RosterId;
			result = result || entityData.StartTime != _originalData.StartTime;
			result = result || entityData.EndTime != _originalData.EndTime;
			result = result || entityData.Note != _originalData.Note;
			result = result || entityData.IsDisabled != _originalData.IsDisabled;
			result = result || entityData.CreateUser != _originalData.CreateUser;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.UpdateUser != _originalData.UpdateUser;
			result = result || entityData.UpdateDate != _originalData.UpdateDate;
			return result;
		}	
		
		///<summary>
		///  Returns a DoctorRoster Entity with the original data.
		///</summary>
		public DoctorRoster GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateDoctorRoster(
				_originalData.DoctorId,
				_originalData.RosterId,
				_originalData.StartTime,
				_originalData.EndTime,
				_originalData.Note,
				_originalData.IsDisabled,
				_originalData.CreateUser,
				_originalData.CreateDate,
				_originalData.UpdateUser,
				_originalData.UpdateDate
				);
				
			return (DoctorRoster)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="DoctorRosterBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is DoctorRosterBase)
				return ValueEquals(this, (DoctorRosterBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="DoctorRosterBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.DoctorId == null) ? string.Empty : this.DoctorId.ToString()).GetHashCode() ^ 
					((this.RosterId == null) ? string.Empty : this.RosterId.ToString()).GetHashCode() ^ 
					((this.StartTime == null) ? string.Empty : this.StartTime.ToString()).GetHashCode() ^ 
					((this.EndTime == null) ? string.Empty : this.EndTime.ToString()).GetHashCode() ^ 
					((this.Note == null) ? string.Empty : this.Note.ToString()).GetHashCode() ^ 
					((this.IsDisabled == null) ? string.Empty : this.IsDisabled.ToString()).GetHashCode() ^ 
					((this.CreateUser == null) ? string.Empty : this.CreateUser.ToString()).GetHashCode() ^ 
					((this.CreateDate == null) ? string.Empty : this.CreateDate.ToString()).GetHashCode() ^ 
					((this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString()).GetHashCode() ^ 
					((this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="DoctorRosterBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(DoctorRosterBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="DoctorRosterBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="DoctorRosterBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="DoctorRosterBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(DoctorRosterBase Object1, DoctorRosterBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.DoctorId != null && Object2.DoctorId != null )
			{
				if (Object1.DoctorId != Object2.DoctorId)
					equal = false;
			}
			else if (Object1.DoctorId == null ^ Object2.DoctorId == null )
			{
				equal = false;
			}
			if ( Object1.RosterId != null && Object2.RosterId != null )
			{
				if (Object1.RosterId != Object2.RosterId)
					equal = false;
			}
			else if (Object1.RosterId == null ^ Object2.RosterId == null )
			{
				equal = false;
			}
			if ( Object1.StartTime != null && Object2.StartTime != null )
			{
				if (Object1.StartTime != Object2.StartTime)
					equal = false;
			}
			else if (Object1.StartTime == null ^ Object2.StartTime == null )
			{
				equal = false;
			}
			if ( Object1.EndTime != null && Object2.EndTime != null )
			{
				if (Object1.EndTime != Object2.EndTime)
					equal = false;
			}
			else if (Object1.EndTime == null ^ Object2.EndTime == null )
			{
				equal = false;
			}
			if ( Object1.Note != null && Object2.Note != null )
			{
				if (Object1.Note != Object2.Note)
					equal = false;
			}
			else if (Object1.Note == null ^ Object2.Note == null )
			{
				equal = false;
			}
			if ( Object1.IsDisabled != null && Object2.IsDisabled != null )
			{
				if (Object1.IsDisabled != Object2.IsDisabled)
					equal = false;
			}
			else if (Object1.IsDisabled == null ^ Object2.IsDisabled == null )
			{
				equal = false;
			}
			if ( Object1.CreateUser != null && Object2.CreateUser != null )
			{
				if (Object1.CreateUser != Object2.CreateUser)
					equal = false;
			}
			else if (Object1.CreateUser == null ^ Object2.CreateUser == null )
			{
				equal = false;
			}
			if ( Object1.CreateDate != null && Object2.CreateDate != null )
			{
				if (Object1.CreateDate != Object2.CreateDate)
					equal = false;
			}
			else if (Object1.CreateDate == null ^ Object2.CreateDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdateUser != null && Object2.UpdateUser != null )
			{
				if (Object1.UpdateUser != Object2.UpdateUser)
					equal = false;
			}
			else if (Object1.UpdateUser == null ^ Object2.UpdateUser == null )
			{
				equal = false;
			}
			if ( Object1.UpdateDate != null && Object2.UpdateDate != null )
			{
				if (Object1.UpdateDate != Object2.UpdateDate)
					equal = false;
			}
			else if (Object1.UpdateDate == null ^ Object2.UpdateDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((DoctorRosterBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static DoctorRosterComparer GetComparer()
        {
            return new DoctorRosterComparer();
        }
        */

        // Comparer delegates back to DoctorRoster
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(DoctorRoster rhs, DoctorRosterColumn which)
        {
            switch (which)
            {
            	
            	
            	case DoctorRosterColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case DoctorRosterColumn.DoctorId:
            		return this.DoctorId.Value.CompareTo(rhs.DoctorId.Value);
            		
            		                 
            	
            	
            	case DoctorRosterColumn.RosterId:
            		return this.RosterId.Value.CompareTo(rhs.RosterId.Value);
            		
            		                 
            	
            	
            	case DoctorRosterColumn.StartTime:
            		return this.StartTime.Value.CompareTo(rhs.StartTime.Value);
            		
            		                 
            	
            	
            	case DoctorRosterColumn.EndTime:
            		return this.EndTime.Value.CompareTo(rhs.EndTime.Value);
            		
            		                 
            	
            	
            	case DoctorRosterColumn.Note:
            		return this.Note.CompareTo(rhs.Note);
            		
            		                 
            	
            	
            	case DoctorRosterColumn.IsDisabled:
            		return this.IsDisabled.Value.CompareTo(rhs.IsDisabled.Value);
            		
            		                 
            	
            	
            	case DoctorRosterColumn.CreateUser:
            		return this.CreateUser.CompareTo(rhs.CreateUser);
            		
            		                 
            	
            	
            	case DoctorRosterColumn.CreateDate:
            		return this.CreateDate.Value.CompareTo(rhs.CreateDate.Value);
            		
            		                 
            	
            	
            	case DoctorRosterColumn.UpdateUser:
            		return this.UpdateUser.CompareTo(rhs.UpdateUser);
            		
            		                 
            	
            	
            	case DoctorRosterColumn.UpdateDate:
            		return this.UpdateDate.Value.CompareTo(rhs.UpdateDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<DoctorRosterKey> Members
		
		// member variable for the EntityId property
		private DoctorRosterKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual DoctorRosterKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new DoctorRosterKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("DoctorRoster")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- Id: {0}{11}- DoctorId: {1}{11}- RosterId: {2}{11}- StartTime: {3}{11}- EndTime: {4}{11}- Note: {5}{11}- IsDisabled: {6}{11}- CreateUser: {7}{11}- CreateDate: {8}{11}- UpdateUser: {9}{11}- UpdateDate: {10}{11}{13}", 
				this.Id,
				(this.DoctorId == null) ? string.Empty : this.DoctorId.ToString(),
				(this.RosterId == null) ? string.Empty : this.RosterId.ToString(),
				(this.StartTime == null) ? string.Empty : this.StartTime.ToString(),
				(this.EndTime == null) ? string.Empty : this.EndTime.ToString(),
				(this.Note == null) ? string.Empty : this.Note.ToString(),
				(this.IsDisabled == null) ? string.Empty : this.IsDisabled.ToString(),
				(this.CreateUser == null) ? string.Empty : this.CreateUser.ToString(),
				(this.CreateDate == null) ? string.Empty : this.CreateDate.ToString(),
				(this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString(),
				(this.UpdateDate == null) ? string.Empty : this.UpdateDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'DoctorRoster' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class DoctorRosterEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "DoctorRoster"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DoctorId : 
		/// </summary>
		public System.Int32?		  DoctorId = null;
		
		/// <summary>
		/// RosterId : 
		/// </summary>
		public System.Int32?		  RosterId = null;
		
		/// <summary>
		/// StartTime : 
		/// </summary>
		public System.DateTime?		  StartTime = null;
		
		/// <summary>
		/// EndTime : 
		/// </summary>
		public System.DateTime?		  EndTime = null;
		
		/// <summary>
		/// Note : 
		/// </summary>
		public System.String		  Note = null;
		
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		public System.Boolean?		  IsDisabled = null;
		
		/// <summary>
		/// CreateUser : 
		/// </summary>
		public System.String		  CreateUser = null;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		public System.DateTime?		  CreateDate = null;
		
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		public System.String		  UpdateUser = null;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		public System.DateTime?		  UpdateDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Roster _rosterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Roster"/>.
		/// </summary>
		/// <value>The source Roster for RosterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Roster RosterIdSource
      	{
            get { return this._rosterIdSource; }
            set { this._rosterIdSource = value; }
      	}
		private Staff _doctorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Staff"/>.
		/// </summary>
		/// <value>The source Staff for DoctorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Staff DoctorIdSource
      	{
            get { return this._doctorIdSource; }
            set { this._doctorIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			DoctorRosterEntityData _tmp = new DoctorRosterEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.DoctorId = this.DoctorId;
			_tmp.RosterId = this.RosterId;
			_tmp.StartTime = this.StartTime;
			_tmp.EndTime = this.EndTime;
			_tmp.Note = this.Note;
			_tmp.IsDisabled = this.IsDisabled;
			_tmp.CreateUser = this.CreateUser;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateUser = this.UpdateUser;
			_tmp.UpdateDate = this.UpdateDate;
			
			#region Source Parent Composite Entities
			if (this.RosterIdSource != null)
				_tmp.RosterIdSource = MakeCopyOf(this.RosterIdSource) as Roster;
			if (this.DoctorIdSource != null)
				_tmp.DoctorIdSource = MakeCopyOf(this.DoctorIdSource) as Staff;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			DoctorRosterEntityData _tmp = new DoctorRosterEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.DoctorId = this.DoctorId;
			_tmp.RosterId = this.RosterId;
			_tmp.StartTime = this.StartTime;
			_tmp.EndTime = this.EndTime;
			_tmp.Note = this.Note;
			_tmp.IsDisabled = this.IsDisabled;
			_tmp.CreateUser = this.CreateUser;
			_tmp.CreateDate = this.CreateDate;
			_tmp.UpdateUser = this.UpdateUser;
			_tmp.UpdateDate = this.UpdateDate;
			
			#region Source Parent Composite Entities
			if (this.RosterIdSource != null && existingCopies.Contains(this.RosterIdSource))
				_tmp.RosterIdSource = existingCopies[this.RosterIdSource] as Roster;
			else
				_tmp.RosterIdSource = MakeCopyOf(this.RosterIdSource, existingCopies) as Roster;
			if (this.DoctorIdSource != null && existingCopies.Contains(this.DoctorIdSource))
				_tmp.DoctorIdSource = existingCopies[this.DoctorIdSource] as Staff;
			else
				_tmp.DoctorIdSource = MakeCopyOf(this.DoctorIdSource, existingCopies) as Staff;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DoctorRosterColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(DoctorRosterColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DoctorRosterColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(DoctorRosterColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DoctorRosterColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(DoctorRosterColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				DoctorRosterEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new DoctorRosterEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="DoctorRosterColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(DoctorRosterColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				DoctorRosterEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new DoctorRosterEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region DoctorRosterEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="DoctorRoster"/> object.
	/// </remarks>
	public class DoctorRosterEventArgs : System.EventArgs
	{
		private DoctorRosterColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the DoctorRosterEventArgs class.
		///</summary>
		public DoctorRosterEventArgs(DoctorRosterColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the DoctorRosterEventArgs class.
		///</summary>
		public DoctorRosterEventArgs(DoctorRosterColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The DoctorRosterColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="DoctorRosterColumn" />
		public DoctorRosterColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all DoctorRoster related events.
	///</summary>
	public delegate void DoctorRosterEventHandler(object sender, DoctorRosterEventArgs e);
	
	#region DoctorRosterComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class DoctorRosterComparer : System.Collections.Generic.IComparer<DoctorRoster>
	{
		DoctorRosterColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:DoctorRosterComparer"/> class.
        /// </summary>
		public DoctorRosterComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:DoctorRosterComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public DoctorRosterComparer(DoctorRosterColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="DoctorRoster"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="DoctorRoster"/> to compare.</param>
        /// <param name="b">The second <c>DoctorRoster</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(DoctorRoster a, DoctorRoster b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(DoctorRoster entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(DoctorRoster a, DoctorRoster b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public DoctorRosterColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region DoctorRosterKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="DoctorRoster"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class DoctorRosterKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the DoctorRosterKey class.
		/// </summary>
		public DoctorRosterKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the DoctorRosterKey class.
		/// </summary>
		public DoctorRosterKey(DoctorRosterBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the DoctorRosterKey class.
		/// </summary>
		public DoctorRosterKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private DoctorRosterBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public DoctorRosterBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region DoctorRosterColumn Enum
	
	/// <summary>
	/// Enumerate the DoctorRoster columns.
	/// </summary>
	[Serializable]
	public enum DoctorRosterColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// DoctorId : 
		/// </summary>
		[EnumTextValue("DoctorId")]
		[ColumnEnum("DoctorId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DoctorId = 2,
		/// <summary>
		/// RosterId : 
		/// </summary>
		[EnumTextValue("RosterId")]
		[ColumnEnum("RosterId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RosterId = 3,
		/// <summary>
		/// StartTime : 
		/// </summary>
		[EnumTextValue("StartTime")]
		[ColumnEnum("StartTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StartTime = 4,
		/// <summary>
		/// EndTime : 
		/// </summary>
		[EnumTextValue("EndTime")]
		[ColumnEnum("EndTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EndTime = 5,
		/// <summary>
		/// Note : 
		/// </summary>
		[EnumTextValue("Note")]
		[ColumnEnum("Note", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		Note = 6,
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		[EnumTextValue("IsDisabled")]
		[ColumnEnum("IsDisabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsDisabled = 7,
		/// <summary>
		/// CreateUser : 
		/// </summary>
		[EnumTextValue("CreateUser")]
		[ColumnEnum("CreateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		CreateUser = 8,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("CreateDate")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreateDate = 9,
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		[EnumTextValue("UpdateUser")]
		[ColumnEnum("UpdateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		UpdateUser = 10,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("UpdateDate")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdateDate = 11
	}//End enum

	#endregion DoctorRosterColumn Enum

} // end namespace
