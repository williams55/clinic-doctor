<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type='text/xsl' href="scriptsql.xsl"?>
<root xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<database includeDrop="true">AppointmentSystem</database>
<procedures>
		
		<procedure owner="dbo" name="Screen_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Screen table
-- Table Comment: Define screen for role detail
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ScreenCode],
					[ScreenName],
					[PriorityIndex],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Screen]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Screen_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Screen table passing page index and page count parameters
-- Table Comment: Define screen for role detail
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ScreenCode] varchar(20)  
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ScreenCode])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [ScreenCode]'
				SET @SQL = @SQL + ' FROM [dbo].[Screen]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[ScreenCode], O.[ScreenName], O.[PriorityIndex], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Screen] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ScreenCode] = PageIndex.[ScreenCode]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Screen]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Screen_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Screen table
-- Table Comment: Define screen for role detail
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ScreenCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@ScreenName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Screen]
					(
					[ScreenCode]
					,[ScreenName]
					,[PriorityIndex]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@ScreenCode
					,@ScreenName
					,@PriorityIndex
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Screen_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Screen table
-- Table Comment: Define screen for role detail
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ScreenCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@OriginalScreenCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@ScreenName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Screen]
				SET
					[ScreenCode] = @ScreenCode
					,[ScreenName] = @ScreenName
					,[PriorityIndex] = @PriorityIndex
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[ScreenCode] = @OriginalScreenCode 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Screen_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Screen table
-- Table Comment: Define screen for role detail
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ScreenCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Screen] WITH (ROWLOCK) 
				WHERE
					[ScreenCode] = @ScreenCode
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Screen_GetByScreenCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Screen table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ScreenCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ScreenCode],
					[ScreenName],
					[PriorityIndex],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Screen]
				WHERE
					[ScreenCode] = @ScreenCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Screen_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Screen table passing nullable parameters
-- Table Comment: Define screen for role detail
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ScreenCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@ScreenName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ScreenCode]
	, [ScreenName]
	, [PriorityIndex]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Screen]
    WHERE 
	 ([ScreenCode] = @ScreenCode OR @ScreenCode IS NULL)
	AND ([ScreenName] = @ScreenName OR @ScreenName IS NULL)
	AND ([PriorityIndex] = @PriorityIndex OR @PriorityIndex IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ScreenCode]
	, [ScreenName]
	, [PriorityIndex]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Screen]
    WHERE 
	 ([ScreenCode] = @ScreenCode AND @ScreenCode is not null)
	OR ([ScreenName] = @ScreenName AND @ScreenName is not null)
	OR ([PriorityIndex] = @PriorityIndex AND @PriorityIndex is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Screen_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Screen table using a dynamically generated query.
-- Table Comment: Define screen for role detail
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ScreenCode] varchar(20)  
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [ScreenCode] )
				SELECT TOP {3} [ScreenCode]
				FROM [dbo].[Screen] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ScreenCode], O.[ScreenName], O.[PriorityIndex], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Screen] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[ScreenCode] = PageIndex.[ScreenCode]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Screen] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="UserRole_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the UserRole table
-- Table Comment: Define user have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[Username],
					[RoleId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[UserRole]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="UserRole_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the UserRole table passing page index and page count parameters
-- Table Comment: Define user have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] bigint 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[UserRole]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[Username], O.[RoleId], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[UserRole] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[UserRole]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="UserRole_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the UserRole table
-- Table Comment: Define user have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Output" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[UserRole]
					(
					[Username]
					,[RoleId]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Username
					,@RoleId
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="UserRole_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the UserRole table
-- Table Comment: Define user have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[UserRole]
				SET
					[Username] = @Username
					,[RoleId] = @RoleId
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="UserRole_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the UserRole table
-- Table Comment: Define user have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[UserRole] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="UserRole_GetByRoleId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the UserRole table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[Username],
					[RoleId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[UserRole]
				WHERE
					[RoleId] = @RoleId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="UserRole_GetByUsername" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the UserRole table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[Username],
					[RoleId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[UserRole]
				WHERE
					[Username] = @Username
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="UserRole_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the UserRole table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Username],
					[RoleId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[UserRole]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="UserRole_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the UserRole table passing nullable parameters
-- Table Comment: Define user have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault="null"/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [Username]
	, [RoleId]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[UserRole]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([Username] = @Username OR @Username IS NULL)
	AND ([RoleId] = @RoleId OR @RoleId IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [Username]
	, [RoleId]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[UserRole]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([Username] = @Username AND @Username is not null)
	OR ([RoleId] = @RoleId AND @RoleId is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="UserRole_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the UserRole table using a dynamically generated query.
-- Table Comment: Define user have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] bigint 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[UserRole] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[Username], O.[RoleId], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[UserRole] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[UserRole] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Services_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Services table
-- Table Comment: Procedures, Services...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[Title],
					[ShortTitle],
					[Note],
					[PriorityIndex],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Services]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Services_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Services table passing page index and page count parameters
-- Table Comment: Procedures, Services...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[Services]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[ShortTitle], O.[Note], O.[PriorityIndex], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Services] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Services]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Services_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Services table
-- Table Comment: Procedures, Services...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ShortTitle" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Services]
					(
					[Title]
					,[ShortTitle]
					,[Note]
					,[PriorityIndex]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Title
					,@ShortTitle
					,@Note
					,@PriorityIndex
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Services_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Services table
-- Table Comment: Procedures, Services...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault=""/>
				<parameter name="@ShortTitle" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Services]
				SET
					[Title] = @Title
					,[ShortTitle] = @ShortTitle
					,[Note] = @Note
					,[PriorityIndex] = @PriorityIndex
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Services_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Services table
-- Table Comment: Procedures, Services...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Services] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Services_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Services table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Title],
					[ShortTitle],
					[Note],
					[PriorityIndex],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Services]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Services_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Services table passing nullable parameters
-- Table Comment: Procedures, Services...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="100" precision="0" scale="0" param="(100)" nulldefault="null"/>
				<parameter name="@ShortTitle" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [ShortTitle]
	, [Note]
	, [PriorityIndex]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Services]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([ShortTitle] = @ShortTitle OR @ShortTitle IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([PriorityIndex] = @PriorityIndex OR @PriorityIndex IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [ShortTitle]
	, [Note]
	, [PriorityIndex]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Services]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([ShortTitle] = @ShortTitle AND @ShortTitle is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([PriorityIndex] = @PriorityIndex AND @PriorityIndex is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Services_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Services table using a dynamically generated query.
-- Table Comment: Procedures, Services...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[Services] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[ShortTitle], O.[Note], O.[PriorityIndex], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Services] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Services] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="RosterType_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the RosterType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[Title],
					[IsBooked],
					[ColorCode],
					[Note],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[RosterType]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="RosterType_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RosterType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[RosterType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[IsBooked], O.[ColorCode], O.[Note], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[RosterType] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[RosterType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="RosterType_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the RosterType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@IsBooked" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ColorCode" type="varchar" direction="Input" size="7" precision="0" scale="0" param="(7)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[RosterType]
					(
					[Title]
					,[IsBooked]
					,[ColorCode]
					,[Note]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Title
					,@IsBooked
					,@ColorCode
					,@Note
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="RosterType_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the RosterType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@IsBooked" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@ColorCode" type="varchar" direction="Input" size="7" precision="0" scale="0" param="(7)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[RosterType]
				SET
					[Title] = @Title
					,[IsBooked] = @IsBooked
					,[ColorCode] = @ColorCode
					,[Note] = @Note
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="RosterType_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the RosterType table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[RosterType] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="RosterType_GetByIdIsBooked" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RosterType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsBooked" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Title],
					[IsBooked],
					[ColorCode],
					[Note],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[RosterType]
				WHERE
					[Id] = @Id
					AND [IsBooked] = @IsBooked
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="RosterType_GetByIdIsBookedIsDisabled" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RosterType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsBooked" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Title],
					[IsBooked],
					[ColorCode],
					[Note],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[RosterType]
				WHERE
					[Id] = @Id
					AND [IsBooked] = @IsBooked
					AND [IsDisabled] = @IsDisabled
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="RosterType_GetByIdIsDisabled" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RosterType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Title],
					[IsBooked],
					[ColorCode],
					[Note],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[RosterType]
				WHERE
					[Id] = @Id
					AND [IsDisabled] = @IsDisabled
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="RosterType_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RosterType table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Title],
					[IsBooked],
					[ColorCode],
					[Note],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[RosterType]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="RosterType_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the RosterType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@IsBooked" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ColorCode" type="varchar" direction="Input" size="7" precision="0" scale="0" param="(7)" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [IsBooked]
	, [ColorCode]
	, [Note]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[RosterType]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([IsBooked] = @IsBooked OR @IsBooked IS NULL)
	AND ([ColorCode] = @ColorCode OR @ColorCode IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [IsBooked]
	, [ColorCode]
	, [Note]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[RosterType]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([IsBooked] = @IsBooked AND @IsBooked is not null)
	OR ([ColorCode] = @ColorCode AND @ColorCode is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="RosterType_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RosterType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[RosterType] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[IsBooked], O.[ColorCode], O.[Note], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[RosterType] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[RosterType] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="UserGroup_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the UserGroup table
-- Table Comment: User group: Frontdesk, Doctor, Supervisor, Manager, Admin...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[Title],
					[Note],
					[Roles],
					[IsLocked],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[UserGroup]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="UserGroup_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the UserGroup table passing page index and page count parameters
-- Table Comment: User group: Frontdesk, Doctor, Supervisor, Manager, Admin...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] nvarchar(20)  
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[UserGroup]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[Note], O.[Roles], O.[IsLocked], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[UserGroup] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[UserGroup]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="UserGroup_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the UserGroup table
-- Table Comment: User group: Frontdesk, Doctor, Supervisor, Manager, Admin...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@Roles" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@IsLocked" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[UserGroup]
					(
					[Id]
					,[Title]
					,[Note]
					,[Roles]
					,[IsLocked]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Id
					,@Title
					,@Note
					,@Roles
					,@IsLocked
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="UserGroup_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the UserGroup table
-- Table Comment: User group: Frontdesk, Doctor, Supervisor, Manager, Admin...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@OriginalId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@Roles" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@IsLocked" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[UserGroup]
				SET
					[Id] = @Id
					,[Title] = @Title
					,[Note] = @Note
					,[Roles] = @Roles
					,[IsLocked] = @IsLocked
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="UserGroup_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the UserGroup table
-- Table Comment: User group: Frontdesk, Doctor, Supervisor, Manager, Admin...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[UserGroup] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="UserGroup_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the UserGroup table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Title],
					[Note],
					[Roles],
					[IsLocked],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[UserGroup]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="UserGroup_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the UserGroup table passing nullable parameters
-- Table Comment: User group: Frontdesk, Doctor, Supervisor, Manager, Admin...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@Roles" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@IsLocked" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [Note]
	, [Roles]
	, [IsLocked]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[UserGroup]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([Roles] = @Roles OR @Roles IS NULL)
	AND ([IsLocked] = @IsLocked OR @IsLocked IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [Note]
	, [Roles]
	, [IsLocked]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[UserGroup]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([Roles] = @Roles AND @Roles is not null)
	OR ([IsLocked] = @IsLocked AND @IsLocked is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="UserGroup_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the UserGroup table using a dynamically generated query.
-- Table Comment: User group: Frontdesk, Doctor, Supervisor, Manager, Admin...
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] nvarchar(20)  
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[UserGroup] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[Note], O.[Roles], O.[IsLocked], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[UserGroup] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[UserGroup] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Status_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Status table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[Title],
					[ColorCode],
					[PriorityIndex],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Status]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Status_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Status table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] varchar(20)  
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[Status]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[ColorCode], O.[PriorityIndex], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Status] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Status]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Status_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Status table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ColorCode" type="varchar" direction="Input" size="7" precision="0" scale="0" param="(7)" nulldefault=""/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Status]
					(
					[Id]
					,[Title]
					,[ColorCode]
					,[PriorityIndex]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Id
					,@Title
					,@ColorCode
					,@PriorityIndex
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Status_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Status table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@OriginalId" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@ColorCode" type="varchar" direction="Input" size="7" precision="0" scale="0" param="(7)" nulldefault=""/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Status]
				SET
					[Id] = @Id
					,[Title] = @Title
					,[ColorCode] = @ColorCode
					,[PriorityIndex] = @PriorityIndex
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Status_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Status table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Status] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Status_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Status table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Title],
					[ColorCode],
					[PriorityIndex],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Status]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Status_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Status table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@ColorCode" type="varchar" direction="Input" size="7" precision="0" scale="0" param="(7)" nulldefault="null"/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [ColorCode]
	, [PriorityIndex]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Status]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([ColorCode] = @ColorCode OR @ColorCode IS NULL)
	AND ([PriorityIndex] = @PriorityIndex OR @PriorityIndex IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [ColorCode]
	, [PriorityIndex]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Status]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([ColorCode] = @ColorCode AND @ColorCode is not null)
	OR ([PriorityIndex] = @PriorityIndex AND @PriorityIndex is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Status_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Status table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] varchar(20)  
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[Status] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[ColorCode], O.[PriorityIndex], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Status] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Status] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Room_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Room table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[Title],
					[Note],
					[ServicesId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Room]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Room_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Room table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[Room]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[Note], O.[ServicesId], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Room] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Room]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Room_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Room table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Room]
					(
					[Title]
					,[Note]
					,[ServicesId]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Title
					,@Note
					,@ServicesId
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Room_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Room table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Room]
				SET
					[Title] = @Title
					,[Note] = @Note
					,[ServicesId] = @ServicesId
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Room_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Room table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Room] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Room_GetByServicesId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Room table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[Title],
					[Note],
					[ServicesId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Room]
				WHERE
					[ServicesId] = @ServicesId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Room_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Room table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Title],
					[Note],
					[ServicesId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Room]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Room_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Room table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [Note]
	, [ServicesId]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Room]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([ServicesId] = @ServicesId OR @ServicesId IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [Note]
	, [ServicesId]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Room]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([ServicesId] = @ServicesId AND @ServicesId is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Room_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Room table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[Room] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[Note], O.[ServicesId], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Room] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Room] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Units_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Units table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[Title],
					[Note],
					[PriorityIndex],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Units]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Units_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Units table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[Units]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[Note], O.[PriorityIndex], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Units] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Units]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Units_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Units table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Units]
					(
					[Title]
					,[Note]
					,[PriorityIndex]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Title
					,@Note
					,@PriorityIndex
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Units_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Units table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Units]
				SET
					[Title] = @Title
					,[Note] = @Note
					,[PriorityIndex] = @PriorityIndex
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Units_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Units table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Units] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Units_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Units table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Title],
					[Note],
					[PriorityIndex],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Units]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Units_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Units table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [Note]
	, [PriorityIndex]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Units]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([PriorityIndex] = @PriorityIndex OR @PriorityIndex IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [Note]
	, [PriorityIndex]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Units]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([PriorityIndex] = @PriorityIndex AND @PriorityIndex is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Units_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Units table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[Units] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[Note], O.[PriorityIndex], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Units] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Units] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Role_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Role table
-- Table Comment: Role of user
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[Title],
					[Note],
					[IsLocked],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Role]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Role_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Role table passing page index and page count parameters
-- Table Comment: Role of user
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[Role]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[Note], O.[IsLocked], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Role] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Role]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Role_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Role table
-- Table Comment: Role of user
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@IsLocked" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Role]
					(
					[Title]
					,[Note]
					,[IsLocked]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Title
					,@Note
					,@IsLocked
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Role_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Role table
-- Table Comment: Role of user
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@IsLocked" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Role]
				SET
					[Title] = @Title
					,[Note] = @Note
					,[IsLocked] = @IsLocked
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Role_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Role table
-- Table Comment: Role of user
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Role] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Role_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Role table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Title],
					[Note],
					[IsLocked],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Role]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Role_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Role table passing nullable parameters
-- Table Comment: Role of user
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@IsLocked" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [Note]
	, [IsLocked]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Role]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([IsLocked] = @IsLocked OR @IsLocked IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [Note]
	, [IsLocked]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Role]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([IsLocked] = @IsLocked AND @IsLocked is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Role_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Role table using a dynamically generated query.
-- Table Comment: Role of user
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[Role] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[Note], O.[IsLocked], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Role] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Role] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="AppointmentGroup_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AppointmentGroup table
-- Table Comment: This table group follow floor or something like that. For example, 1st Floor is a group and there are some staffs [Doctors, ProcedureGroup]
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[Title],
					[Note],
					[PriorityIndex],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate],
					[UnitId]
				FROM
					[dbo].[AppointmentGroup]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="AppointmentGroup_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AppointmentGroup table passing page index and page count parameters
-- Table Comment: This table group follow floor or something like that. For example, 1st Floor is a group and there are some staffs [Doctors, ProcedureGroup]
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[AppointmentGroup]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[Note], O.[PriorityIndex], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate], O.[UnitId]
				FROM
				    [dbo].[AppointmentGroup] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AppointmentGroup]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="AppointmentGroup_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AppointmentGroup table
-- Table Comment: This table group follow floor or something like that. For example, 1st Floor is a group and there are some staffs [Doctors, ProcedureGroup]
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UnitId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[AppointmentGroup]
					(
					[Title]
					,[Note]
					,[PriorityIndex]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					,[UnitId]
					)
				VALUES
					(
					@Title
					,@Note
					,@PriorityIndex
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					,@UnitId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="AppointmentGroup_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AppointmentGroup table
-- Table Comment: This table group follow floor or something like that. For example, 1st Floor is a group and there are some staffs [Doctors, ProcedureGroup]
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UnitId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AppointmentGroup]
				SET
					[Title] = @Title
					,[Note] = @Note
					,[PriorityIndex] = @PriorityIndex
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
					,[UnitId] = @UnitId
				WHERE
[Id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="AppointmentGroup_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AppointmentGroup table
-- Table Comment: This table group follow floor or something like that. For example, 1st Floor is a group and there are some staffs [Doctors, ProcedureGroup]
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AppointmentGroup] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="AppointmentGroup_GetByUnitId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AppointmentGroup table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UnitId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[Title],
					[Note],
					[PriorityIndex],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate],
					[UnitId]
				FROM
					[dbo].[AppointmentGroup]
				WHERE
					[UnitId] = @UnitId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="AppointmentGroup_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AppointmentGroup table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Title],
					[Note],
					[PriorityIndex],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate],
					[UnitId]
				FROM
					[dbo].[AppointmentGroup]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="AppointmentGroup_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AppointmentGroup table passing nullable parameters
-- Table Comment: This table group follow floor or something like that. For example, 1st Floor is a group and there are some staffs [Doctors, ProcedureGroup]
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@PriorityIndex" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UnitId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [Note]
	, [PriorityIndex]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
	, [UnitId]
    FROM
	[dbo].[AppointmentGroup]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([PriorityIndex] = @PriorityIndex OR @PriorityIndex IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
	AND ([UnitId] = @UnitId OR @UnitId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [Title]
	, [Note]
	, [PriorityIndex]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
	, [UnitId]
    FROM
	[dbo].[AppointmentGroup]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([PriorityIndex] = @PriorityIndex AND @PriorityIndex is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	OR ([UnitId] = @UnitId AND @UnitId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="AppointmentGroup_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AppointmentGroup table using a dynamically generated query.
-- Table Comment: This table group follow floor or something like that. For example, 1st Floor is a group and there are some staffs [Doctors, ProcedureGroup]
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[AppointmentGroup] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[Title], O.[Note], O.[PriorityIndex], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate], O.[UnitId]
				FROM
				    [dbo].[AppointmentGroup] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AppointmentGroup] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Users_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Users table
-- Table Comment: User login to System
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Username],
					[Title],
					[Firstname],
					[Lastname],
					[DisplayName],
					[CellPhone],
					[Email],
					[Avatar],
					[Note],
					[UserGroupId],
					[ServicesId],
					[IsFemale],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Users]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Users_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Users table passing page index and page count parameters
-- Table Comment: User login to System
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Username] nvarchar(50)  
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Username])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Username]'
				SET @SQL = @SQL + ' FROM [dbo].[Users]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Username], O.[Title], O.[Firstname], O.[Lastname], O.[DisplayName], O.[CellPhone], O.[Email], O.[Avatar], O.[Note], O.[UserGroupId], O.[ServicesId], O.[IsFemale], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Users] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Username] = PageIndex.[Username]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Users]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Users_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Users table
-- Table Comment: User login to System
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Firstname" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Lastname" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CellPhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Email" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Avatar" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@UserGroupId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsFemale" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Users]
					(
					[Username]
					,[Title]
					,[Firstname]
					,[Lastname]
					,[DisplayName]
					,[CellPhone]
					,[Email]
					,[Avatar]
					,[Note]
					,[UserGroupId]
					,[ServicesId]
					,[IsFemale]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Username
					,@Title
					,@Firstname
					,@Lastname
					,@DisplayName
					,@CellPhone
					,@Email
					,@Avatar
					,@Note
					,@UserGroupId
					,@ServicesId
					,@IsFemale
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Users_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Users table
-- Table Comment: User login to System
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@OriginalUsername" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Firstname" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Lastname" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@DisplayName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@CellPhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Email" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@Avatar" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@UserGroupId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsFemale" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Users]
				SET
					[Username] = @Username
					,[Title] = @Title
					,[Firstname] = @Firstname
					,[Lastname] = @Lastname
					,[DisplayName] = @DisplayName
					,[CellPhone] = @CellPhone
					,[Email] = @Email
					,[Avatar] = @Avatar
					,[Note] = @Note
					,[UserGroupId] = @UserGroupId
					,[ServicesId] = @ServicesId
					,[IsFemale] = @IsFemale
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Username] = @OriginalUsername 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Users_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Users table
-- Table Comment: User login to System
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Users] WITH (ROWLOCK) 
				WHERE
					[Username] = @Username
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Users_GetByServicesId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Users table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Username],
					[Title],
					[Firstname],
					[Lastname],
					[DisplayName],
					[CellPhone],
					[Email],
					[Avatar],
					[Note],
					[UserGroupId],
					[ServicesId],
					[IsFemale],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Users]
				WHERE
					[ServicesId] = @ServicesId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Users_GetByUserGroupId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Users table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserGroupId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Username],
					[Title],
					[Firstname],
					[Lastname],
					[DisplayName],
					[CellPhone],
					[Email],
					[Avatar],
					[Note],
					[UserGroupId],
					[ServicesId],
					[IsFemale],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Users]
				WHERE
					[UserGroupId] = @UserGroupId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Users_GetByUsername" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Users table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Username],
					[Title],
					[Firstname],
					[Lastname],
					[DisplayName],
					[CellPhone],
					[Email],
					[Avatar],
					[Note],
					[UserGroupId],
					[ServicesId],
					[IsFemale],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Users]
				WHERE
					[Username] = @Username
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Users_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Users table passing nullable parameters
-- Table Comment: User login to System
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Firstname" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Lastname" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@DisplayName" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@CellPhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@Email" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@Avatar" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@UserGroupId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsFemale" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Username]
	, [Title]
	, [Firstname]
	, [Lastname]
	, [DisplayName]
	, [CellPhone]
	, [Email]
	, [Avatar]
	, [Note]
	, [UserGroupId]
	, [ServicesId]
	, [IsFemale]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Users]
    WHERE 
	 ([Username] = @Username OR @Username IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([Firstname] = @Firstname OR @Firstname IS NULL)
	AND ([Lastname] = @Lastname OR @Lastname IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([CellPhone] = @CellPhone OR @CellPhone IS NULL)
	AND ([Email] = @Email OR @Email IS NULL)
	AND ([Avatar] = @Avatar OR @Avatar IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([UserGroupId] = @UserGroupId OR @UserGroupId IS NULL)
	AND ([ServicesId] = @ServicesId OR @ServicesId IS NULL)
	AND ([IsFemale] = @IsFemale OR @IsFemale IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Username]
	, [Title]
	, [Firstname]
	, [Lastname]
	, [DisplayName]
	, [CellPhone]
	, [Email]
	, [Avatar]
	, [Note]
	, [UserGroupId]
	, [ServicesId]
	, [IsFemale]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Users]
    WHERE 
	 ([Username] = @Username AND @Username is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([Firstname] = @Firstname AND @Firstname is not null)
	OR ([Lastname] = @Lastname AND @Lastname is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([CellPhone] = @CellPhone AND @CellPhone is not null)
	OR ([Email] = @Email AND @Email is not null)
	OR ([Avatar] = @Avatar AND @Avatar is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([UserGroupId] = @UserGroupId AND @UserGroupId is not null)
	OR ([ServicesId] = @ServicesId AND @ServicesId is not null)
	OR ([IsFemale] = @IsFemale AND @IsFemale is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Users_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Users table using a dynamically generated query.
-- Table Comment: User login to System
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Username] nvarchar(50)  
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Username] )
				SELECT TOP {3} [Username]
				FROM [dbo].[Users] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Username], O.[Title], O.[Firstname], O.[Lastname], O.[DisplayName], O.[CellPhone], O.[Email], O.[Avatar], O.[Note], O.[UserGroupId], O.[ServicesId], O.[IsFemale], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Users] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Username] = PageIndex.[Username]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Users] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="AppointmentHistory_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AppointmentHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Guid],
					[AppointmentId],
					[Note],
					[CreateUser],
					[CreateDate]
				FROM
					[dbo].[AppointmentHistory]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="AppointmentHistory_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AppointmentHistory table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Guid] uniqueidentifier 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Guid])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Guid]'
				SET @SQL = @SQL + ' FROM [dbo].[AppointmentHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Guid], O.[AppointmentId], O.[Note], O.[CreateUser], O.[CreateDate]
				FROM
				    [dbo].[AppointmentHistory] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Guid] = PageIndex.[Guid]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AppointmentHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="AppointmentHistory_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AppointmentHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Guid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@AppointmentId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[AppointmentHistory]
					(
					[Guid]
					,[AppointmentId]
					,[Note]
					,[CreateUser]
					,[CreateDate]
					)
				VALUES
					(
					@Guid
					,@AppointmentId
					,@Note
					,@CreateUser
					,@CreateDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="AppointmentHistory_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AppointmentHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Guid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalGuid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@AppointmentId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AppointmentHistory]
				SET
					[Guid] = @Guid
					,[AppointmentId] = @AppointmentId
					,[Note] = @Note
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
				WHERE
[Guid] = @OriginalGuid 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="AppointmentHistory_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AppointmentHistory table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Guid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AppointmentHistory] WITH (ROWLOCK) 
				WHERE
					[Guid] = @Guid
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="AppointmentHistory_GetByAppointmentId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AppointmentHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AppointmentId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Guid],
					[AppointmentId],
					[Note],
					[CreateUser],
					[CreateDate]
				FROM
					[dbo].[AppointmentHistory]
				WHERE
					[AppointmentId] = @AppointmentId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="AppointmentHistory_GetByGuid" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AppointmentHistory table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Guid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Guid],
					[AppointmentId],
					[Note],
					[CreateUser],
					[CreateDate]
				FROM
					[dbo].[AppointmentHistory]
				WHERE
					[Guid] = @Guid
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="AppointmentHistory_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AppointmentHistory table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Guid" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@AppointmentId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Guid]
	, [AppointmentId]
	, [Note]
	, [CreateUser]
	, [CreateDate]
    FROM
	[dbo].[AppointmentHistory]
    WHERE 
	 ([Guid] = @Guid OR @Guid IS NULL)
	AND ([AppointmentId] = @AppointmentId OR @AppointmentId IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Guid]
	, [AppointmentId]
	, [Note]
	, [CreateUser]
	, [CreateDate]
    FROM
	[dbo].[AppointmentHistory]
    WHERE 
	 ([Guid] = @Guid AND @Guid is not null)
	OR ([AppointmentId] = @AppointmentId AND @AppointmentId is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="AppointmentHistory_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AppointmentHistory table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Guid] uniqueidentifier 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Guid] )
				SELECT TOP {3} [Guid]
				FROM [dbo].[AppointmentHistory] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Guid], O.[AppointmentId], O.[Note], O.[CreateUser], O.[CreateDate]
				FROM
				    [dbo].[AppointmentHistory] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Guid] = PageIndex.[Guid]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AppointmentHistory] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="RoleDetail_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the RoleDetail table
-- Table Comment: Define detail for role
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[RoleId],
					[ScreenCode],
					[Crud],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[RoleDetail]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="RoleDetail_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RoleDetail table passing page index and page count parameters
-- Table Comment: Define detail for role
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] bigint 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[RoleDetail]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[RoleId], O.[ScreenCode], O.[Crud], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[RoleDetail] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[RoleDetail]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="RoleDetail_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the RoleDetail table
-- Table Comment: Define detail for role
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Output" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ScreenCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Crud" type="varchar" direction="Input" size="4" precision="0" scale="0" param="(4)" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[RoleDetail]
					(
					[RoleId]
					,[ScreenCode]
					,[Crud]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@RoleId
					,@ScreenCode
					,@Crud
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="RoleDetail_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the RoleDetail table
-- Table Comment: Define detail for role
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ScreenCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Crud" type="varchar" direction="Input" size="4" precision="0" scale="0" param="(4)" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[RoleDetail]
				SET
					[RoleId] = @RoleId
					,[ScreenCode] = @ScreenCode
					,[Crud] = @Crud
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="RoleDetail_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the RoleDetail table
-- Table Comment: Define detail for role
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[RoleDetail] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="RoleDetail_GetByRoleId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RoleDetail table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[RoleId],
					[ScreenCode],
					[Crud],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[RoleDetail]
				WHERE
					[RoleId] = @RoleId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="RoleDetail_GetByScreenCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RoleDetail table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ScreenCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[RoleId],
					[ScreenCode],
					[Crud],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[RoleDetail]
				WHERE
					[ScreenCode] = @ScreenCode
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="RoleDetail_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RoleDetail table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[RoleId],
					[ScreenCode],
					[Crud],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[RoleDetail]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="RoleDetail_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the RoleDetail table passing nullable parameters
-- Table Comment: Define detail for role
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault="null"/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ScreenCode" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@Crud" type="varchar" direction="Input" size="4" precision="0" scale="0" param="(4)" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [RoleId]
	, [ScreenCode]
	, [Crud]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[RoleDetail]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([RoleId] = @RoleId OR @RoleId IS NULL)
	AND ([ScreenCode] = @ScreenCode OR @ScreenCode IS NULL)
	AND ([Crud] = @Crud OR @Crud IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [RoleId]
	, [ScreenCode]
	, [Crud]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[RoleDetail]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([RoleId] = @RoleId AND @RoleId is not null)
	OR ([ScreenCode] = @ScreenCode AND @ScreenCode is not null)
	OR ([Crud] = @Crud AND @Crud is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="RoleDetail_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RoleDetail table using a dynamically generated query.
-- Table Comment: Define detail for role
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] bigint 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[RoleDetail] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[RoleId], O.[ScreenCode], O.[Crud], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[RoleDetail] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[RoleDetail] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="DoctorRoom_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the DoctorRoom table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[Username],
					[RoomId],
					[Priority],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[DoctorRoom]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="DoctorRoom_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DoctorRoom table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] bigint 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[DoctorRoom]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[Username], O.[RoomId], O.[Priority], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[DoctorRoom] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[DoctorRoom]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="DoctorRoom_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the DoctorRoom table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Output" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Priority" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[DoctorRoom]
					(
					[Username]
					,[RoomId]
					,[Priority]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Username
					,@RoomId
					,@Priority
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="DoctorRoom_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the DoctorRoom table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Priority" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[DoctorRoom]
				SET
					[Username] = @Username
					,[RoomId] = @RoomId
					,[Priority] = @Priority
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="DoctorRoom_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the DoctorRoom table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[DoctorRoom] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="DoctorRoom_GetByRoomId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DoctorRoom table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[Username],
					[RoomId],
					[Priority],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[DoctorRoom]
				WHERE
					[RoomId] = @RoomId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="DoctorRoom_GetByUsername" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DoctorRoom table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[Username],
					[RoomId],
					[Priority],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[DoctorRoom]
				WHERE
					[Username] = @Username
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="DoctorRoom_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DoctorRoom table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Username],
					[RoomId],
					[Priority],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[DoctorRoom]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="DoctorRoom_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the DoctorRoom table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault="null"/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Priority" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [Username]
	, [RoomId]
	, [Priority]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[DoctorRoom]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([Username] = @Username OR @Username IS NULL)
	AND ([RoomId] = @RoomId OR @RoomId IS NULL)
	AND ([Priority] = @Priority OR @Priority IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [Username]
	, [RoomId]
	, [Priority]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[DoctorRoom]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([Username] = @Username AND @Username is not null)
	OR ([RoomId] = @RoomId AND @RoomId is not null)
	OR ([Priority] = @Priority AND @Priority is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="DoctorRoom_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DoctorRoom table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] bigint 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[DoctorRoom] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[Username], O.[RoomId], O.[Priority], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[DoctorRoom] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[DoctorRoom] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Roster_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Roster table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[Username],
					[RoomId],
					[RosterTypeId],
					[StartTime],
					[EndTime],
					[Note],
					[RepeatId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Roster]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Roster_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Roster table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] nvarchar(20)  
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[Roster]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[Username], O.[RoomId], O.[RosterTypeId], O.[StartTime], O.[EndTime], O.[Note], O.[RepeatId], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Roster] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Roster]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Roster_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Roster table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RosterTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@RepeatId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Roster]
					(
					[Id]
					,[Username]
					,[RoomId]
					,[RosterTypeId]
					,[StartTime]
					,[EndTime]
					,[Note]
					,[RepeatId]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Id
					,@Username
					,@RoomId
					,@RosterTypeId
					,@StartTime
					,@EndTime
					,@Note
					,@RepeatId
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Roster_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Roster table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@OriginalId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RosterTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@RepeatId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Roster]
				SET
					[Id] = @Id
					,[Username] = @Username
					,[RoomId] = @RoomId
					,[RosterTypeId] = @RosterTypeId
					,[StartTime] = @StartTime
					,[EndTime] = @EndTime
					,[Note] = @Note
					,[RepeatId] = @RepeatId
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Roster_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Roster table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Roster] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Roster_GetByRoomId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Roster table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[Username],
					[RoomId],
					[RosterTypeId],
					[StartTime],
					[EndTime],
					[Note],
					[RepeatId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Roster]
				WHERE
					[RoomId] = @RoomId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Roster_GetByRosterTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Roster table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RosterTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[Username],
					[RoomId],
					[RosterTypeId],
					[StartTime],
					[EndTime],
					[Note],
					[RepeatId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Roster]
				WHERE
					[RosterTypeId] = @RosterTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Roster_GetByUsername" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Roster table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[Username],
					[RoomId],
					[RosterTypeId],
					[StartTime],
					[EndTime],
					[Note],
					[RepeatId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Roster]
				WHERE
					[Username] = @Username
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Roster_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Roster table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[Username],
					[RoomId],
					[RosterTypeId],
					[StartTime],
					[EndTime],
					[Note],
					[RepeatId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Roster]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Roster_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Roster table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RosterTypeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@RepeatId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [Username]
	, [RoomId]
	, [RosterTypeId]
	, [StartTime]
	, [EndTime]
	, [Note]
	, [RepeatId]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Roster]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([Username] = @Username OR @Username IS NULL)
	AND ([RoomId] = @RoomId OR @RoomId IS NULL)
	AND ([RosterTypeId] = @RosterTypeId OR @RosterTypeId IS NULL)
	AND ([StartTime] = @StartTime OR @StartTime IS NULL)
	AND ([EndTime] = @EndTime OR @EndTime IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([RepeatId] = @RepeatId OR @RepeatId IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [Username]
	, [RoomId]
	, [RosterTypeId]
	, [StartTime]
	, [EndTime]
	, [Note]
	, [RepeatId]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Roster]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([Username] = @Username AND @Username is not null)
	OR ([RoomId] = @RoomId AND @RoomId is not null)
	OR ([RosterTypeId] = @RosterTypeId AND @RosterTypeId is not null)
	OR ([StartTime] = @StartTime AND @StartTime is not null)
	OR ([EndTime] = @EndTime AND @EndTime is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([RepeatId] = @RepeatId AND @RepeatId is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Roster_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Roster table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] nvarchar(20)  
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[Roster] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[Username], O.[RoomId], O.[RosterTypeId], O.[StartTime], O.[EndTime], O.[Note], O.[RepeatId], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Roster] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Roster] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="GroupRole_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the GroupRole table
-- Table Comment: Define group have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[GroupId],
					[RoleId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[GroupRole]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="GroupRole_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GroupRole table passing page index and page count parameters
-- Table Comment: Define group have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] bigint 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[GroupRole]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[GroupId], O.[RoleId], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[GroupRole] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[GroupRole]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="GroupRole_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GroupRole table
-- Table Comment: Define group have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Output" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[GroupRole]
					(
					[GroupId]
					,[RoleId]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@GroupId
					,@RoleId
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="GroupRole_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the GroupRole table
-- Table Comment: Define group have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[GroupRole]
				SET
					[GroupId] = @GroupId
					,[RoleId] = @RoleId
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @Id 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="GroupRole_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the GroupRole table
-- Table Comment: Define group have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[GroupRole] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="GroupRole_GetByRoleId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GroupRole table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[GroupId],
					[RoleId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[GroupRole]
				WHERE
					[RoleId] = @RoleId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="GroupRole_GetByGroupId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GroupRole table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GroupId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[GroupId],
					[RoleId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[GroupRole]
				WHERE
					[GroupId] = @GroupId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="GroupRole_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GroupRole table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[GroupId],
					[RoleId],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[GroupRole]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="GroupRole_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the GroupRole table passing nullable parameters
-- Table Comment: Define group have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="bigint" direction="Input" size="8" precision="19" scale="0" param="" nulldefault="null"/>
				<parameter name="@GroupId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@RoleId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [GroupId]
	, [RoleId]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[GroupRole]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([GroupId] = @GroupId OR @GroupId IS NULL)
	AND ([RoleId] = @RoleId OR @RoleId IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [GroupId]
	, [RoleId]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[GroupRole]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([GroupId] = @GroupId AND @GroupId is not null)
	OR ([RoleId] = @RoleId AND @RoleId is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="GroupRole_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GroupRole table using a dynamically generated query.
-- Table Comment: Define group have what roles
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] bigint 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[GroupRole] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[GroupId], O.[RoleId], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[GroupRole] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[GroupRole] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Appointment_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Appointment table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[PatientCode],
					[Username],
					[RoomId],
					[ServicesId],
					[StatusId],
					[AppointmentGroupId],
					[Note],
					[StartTime],
					[EndTime],
					[RosterId],
					[IsComplete],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Appointment]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Appointment_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Appointment table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] nvarchar(20)  
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[Appointment]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[Id], O.[PatientCode], O.[Username], O.[RoomId], O.[ServicesId], O.[StatusId], O.[AppointmentGroupId], O.[Note], O.[StartTime], O.[EndTime], O.[RosterId], O.[IsComplete], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Appointment] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Appointment]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Appointment_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Appointment table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@PatientCode" type="nchar" direction="Input" size="11" precision="0" scale="0" param="(11)" nulldefault=""/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StatusId" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@AppointmentGroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RosterId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@IsComplete" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Appointment]
					(
					[Id]
					,[PatientCode]
					,[Username]
					,[RoomId]
					,[ServicesId]
					,[StatusId]
					,[AppointmentGroupId]
					,[Note]
					,[StartTime]
					,[EndTime]
					,[RosterId]
					,[IsComplete]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@Id
					,@PatientCode
					,@Username
					,@RoomId
					,@ServicesId
					,@StatusId
					,@AppointmentGroupId
					,@Note
					,@StartTime
					,@EndTime
					,@RosterId
					,@IsComplete
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Appointment_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Appointment table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@OriginalId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@PatientCode" type="nchar" direction="Input" size="11" precision="0" scale="0" param="(11)" nulldefault=""/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@StatusId" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@AppointmentGroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RosterId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@IsComplete" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Appointment]
				SET
					[Id] = @Id
					,[PatientCode] = @PatientCode
					,[Username] = @Username
					,[RoomId] = @RoomId
					,[ServicesId] = @ServicesId
					,[StatusId] = @StatusId
					,[AppointmentGroupId] = @AppointmentGroupId
					,[Note] = @Note
					,[StartTime] = @StartTime
					,[EndTime] = @EndTime
					,[RosterId] = @RosterId
					,[IsComplete] = @IsComplete
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[Id] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Appointment_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Appointment table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Appointment] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Appointment_GetByAppointmentGroupId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Appointment table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AppointmentGroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[PatientCode],
					[Username],
					[RoomId],
					[ServicesId],
					[StatusId],
					[AppointmentGroupId],
					[Note],
					[StartTime],
					[EndTime],
					[RosterId],
					[IsComplete],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Appointment]
				WHERE
					[AppointmentGroupId] = @AppointmentGroupId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Appointment_GetByServicesId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Appointment table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[PatientCode],
					[Username],
					[RoomId],
					[ServicesId],
					[StatusId],
					[AppointmentGroupId],
					[Note],
					[StartTime],
					[EndTime],
					[RosterId],
					[IsComplete],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Appointment]
				WHERE
					[ServicesId] = @ServicesId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Appointment_GetByRoomId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Appointment table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[PatientCode],
					[Username],
					[RoomId],
					[ServicesId],
					[StatusId],
					[AppointmentGroupId],
					[Note],
					[StartTime],
					[EndTime],
					[RosterId],
					[IsComplete],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Appointment]
				WHERE
					[RoomId] = @RoomId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Appointment_GetByRosterId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Appointment table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RosterId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[PatientCode],
					[Username],
					[RoomId],
					[ServicesId],
					[StatusId],
					[AppointmentGroupId],
					[Note],
					[StartTime],
					[EndTime],
					[RosterId],
					[IsComplete],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Appointment]
				WHERE
					[RosterId] = @RosterId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Appointment_GetByStatusId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Appointment table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@StatusId" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[PatientCode],
					[Username],
					[RoomId],
					[ServicesId],
					[StatusId],
					[AppointmentGroupId],
					[Note],
					[StartTime],
					[EndTime],
					[RosterId],
					[IsComplete],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Appointment]
				WHERE
					[StatusId] = @StatusId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Appointment_GetByUsername" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Appointment table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[PatientCode],
					[Username],
					[RoomId],
					[ServicesId],
					[StatusId],
					[AppointmentGroupId],
					[Note],
					[StartTime],
					[EndTime],
					[RosterId],
					[IsComplete],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Appointment]
				WHERE
					[Username] = @Username
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Appointment_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Appointment table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[PatientCode],
					[Username],
					[RoomId],
					[ServicesId],
					[StatusId],
					[AppointmentGroupId],
					[Note],
					[StartTime],
					[EndTime],
					[RosterId],
					[IsComplete],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Appointment]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Appointment_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Appointment table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@PatientCode" type="nchar" direction="Input" size="11" precision="0" scale="0" param="(11)" nulldefault="null"/>
				<parameter name="@Username" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@RoomId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ServicesId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@StatusId" type="varchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@AppointmentGroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@StartTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EndTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@RosterId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@IsComplete" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [PatientCode]
	, [Username]
	, [RoomId]
	, [ServicesId]
	, [StatusId]
	, [AppointmentGroupId]
	, [Note]
	, [StartTime]
	, [EndTime]
	, [RosterId]
	, [IsComplete]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Appointment]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([PatientCode] = @PatientCode OR @PatientCode IS NULL)
	AND ([Username] = @Username OR @Username IS NULL)
	AND ([RoomId] = @RoomId OR @RoomId IS NULL)
	AND ([ServicesId] = @ServicesId OR @ServicesId IS NULL)
	AND ([StatusId] = @StatusId OR @StatusId IS NULL)
	AND ([AppointmentGroupId] = @AppointmentGroupId OR @AppointmentGroupId IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([StartTime] = @StartTime OR @StartTime IS NULL)
	AND ([EndTime] = @EndTime OR @EndTime IS NULL)
	AND ([RosterId] = @RosterId OR @RosterId IS NULL)
	AND ([IsComplete] = @IsComplete OR @IsComplete IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [PatientCode]
	, [Username]
	, [RoomId]
	, [ServicesId]
	, [StatusId]
	, [AppointmentGroupId]
	, [Note]
	, [StartTime]
	, [EndTime]
	, [RosterId]
	, [IsComplete]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Appointment]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([PatientCode] = @PatientCode AND @PatientCode is not null)
	OR ([Username] = @Username AND @Username is not null)
	OR ([RoomId] = @RoomId AND @RoomId is not null)
	OR ([ServicesId] = @ServicesId AND @ServicesId is not null)
	OR ([StatusId] = @StatusId AND @StatusId is not null)
	OR ([AppointmentGroupId] = @AppointmentGroupId AND @AppointmentGroupId is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([StartTime] = @StartTime AND @StartTime is not null)
	OR ([EndTime] = @EndTime AND @EndTime is not null)
	OR ([RosterId] = @RosterId AND @RosterId is not null)
	OR ([IsComplete] = @IsComplete AND @IsComplete is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Appointment_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Appointment table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] nvarchar(20)  
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[Appointment] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[PatientCode], O.[Username], O.[RoomId], O.[ServicesId], O.[StatusId], O.[AppointmentGroupId], O.[Note], O.[StartTime], O.[EndTime], O.[RosterId], O.[IsComplete], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Appointment] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Appointment] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Patient_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Patient table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[PatientCode],
					[FirstName],
					[LastName],
					[MemberType],
					[HomePhone],
					[WorkPhone],
					[CellPhone],
					[Avatar],
					[CompanyCode],
					[Birthdate],
					[IsFemale],
					[Title],
					[Note],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Patient]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Patient_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Patient table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [PatientCode] nchar(10)  
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([PatientCode])'
				SET @SQL = @SQL + ' SELECT'
				SET @SQL = @SQL + ' [PatientCode]'
				SET @SQL = @SQL + ' FROM [dbo].[Patient]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Only get the number of rows needed here.
				SET ROWCOUNT @PageUpperBound
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Reset Rowcount back to all
				SET ROWCOUNT 0
				
				-- Return paged results
				SELECT O.[PatientCode], O.[FirstName], O.[LastName], O.[MemberType], O.[HomePhone], O.[WorkPhone], O.[CellPhone], O.[Avatar], O.[CompanyCode], O.[Birthdate], O.[IsFemale], O.[Title], O.[Note], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Patient] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[PatientCode] = PageIndex.[PatientCode]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Patient]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Patient_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Patient table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PatientCode" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@FirstName" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@LastName" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@MemberType" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@HomePhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@WorkPhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@CellPhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Avatar" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CompanyCode" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Birthdate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@IsFemale" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Patient]
					(
					[PatientCode]
					,[FirstName]
					,[LastName]
					,[MemberType]
					,[HomePhone]
					,[WorkPhone]
					,[CellPhone]
					,[Avatar]
					,[CompanyCode]
					,[Birthdate]
					,[IsFemale]
					,[Title]
					,[Note]
					,[IsDisabled]
					,[CreateUser]
					,[CreateDate]
					,[UpdateUser]
					,[UpdateDate]
					)
				VALUES
					(
					@PatientCode
					,@FirstName
					,@LastName
					,@MemberType
					,@HomePhone
					,@WorkPhone
					,@CellPhone
					,@Avatar
					,@CompanyCode
					,@Birthdate
					,@IsFemale
					,@Title
					,@Note
					,@IsDisabled
					,@CreateUser
					,@CreateDate
					,@UpdateUser
					,@UpdateDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Patient_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Patient table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PatientCode" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@OriginalPatientCode" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@FirstName" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@LastName" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@MemberType" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@HomePhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@WorkPhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@CellPhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@Avatar" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CompanyCode" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@Birthdate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@IsFemale" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault=""/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Patient]
				SET
					[PatientCode] = @PatientCode
					,[FirstName] = @FirstName
					,[LastName] = @LastName
					,[MemberType] = @MemberType
					,[HomePhone] = @HomePhone
					,[WorkPhone] = @WorkPhone
					,[CellPhone] = @CellPhone
					,[Avatar] = @Avatar
					,[CompanyCode] = @CompanyCode
					,[Birthdate] = @Birthdate
					,[IsFemale] = @IsFemale
					,[Title] = @Title
					,[Note] = @Note
					,[IsDisabled] = @IsDisabled
					,[CreateUser] = @CreateUser
					,[CreateDate] = @CreateDate
					,[UpdateUser] = @UpdateUser
					,[UpdateDate] = @UpdateDate
				WHERE
[PatientCode] = @OriginalPatientCode 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Patient_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Patient table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PatientCode" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Patient] WITH (ROWLOCK) 
				WHERE
					[PatientCode] = @PatientCode
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Patient_GetByPatientCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Patient table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PatientCode" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[PatientCode],
					[FirstName],
					[LastName],
					[MemberType],
					[HomePhone],
					[WorkPhone],
					[CellPhone],
					[Avatar],
					[CompanyCode],
					[Birthdate],
					[IsFemale],
					[Title],
					[Note],
					[IsDisabled],
					[CreateUser],
					[CreateDate],
					[UpdateUser],
					[UpdateDate]
				FROM
					[dbo].[Patient]
				WHERE
					[PatientCode] = @PatientCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Patient_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Patient table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@PatientCode" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@FirstName" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@LastName" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@MemberType" type="nvarchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@HomePhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@WorkPhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@CellPhone" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@Avatar" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CompanyCode" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@Birthdate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@IsFemale" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Note" type="nvarchar" direction="Input" size="500" precision="0" scale="0" param="(500)" nulldefault="null"/>
				<parameter name="@IsDisabled" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateUser" type="nvarchar" direction="Input" size="200" precision="0" scale="0" param="(200)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [PatientCode]
	, [FirstName]
	, [LastName]
	, [MemberType]
	, [HomePhone]
	, [WorkPhone]
	, [CellPhone]
	, [Avatar]
	, [CompanyCode]
	, [Birthdate]
	, [IsFemale]
	, [Title]
	, [Note]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Patient]
    WHERE 
	 ([PatientCode] = @PatientCode OR @PatientCode IS NULL)
	AND ([FirstName] = @FirstName OR @FirstName IS NULL)
	AND ([LastName] = @LastName OR @LastName IS NULL)
	AND ([MemberType] = @MemberType OR @MemberType IS NULL)
	AND ([HomePhone] = @HomePhone OR @HomePhone IS NULL)
	AND ([WorkPhone] = @WorkPhone OR @WorkPhone IS NULL)
	AND ([CellPhone] = @CellPhone OR @CellPhone IS NULL)
	AND ([Avatar] = @Avatar OR @Avatar IS NULL)
	AND ([CompanyCode] = @CompanyCode OR @CompanyCode IS NULL)
	AND ([Birthdate] = @Birthdate OR @Birthdate IS NULL)
	AND ([IsFemale] = @IsFemale OR @IsFemale IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([IsDisabled] = @IsDisabled OR @IsDisabled IS NULL)
	AND ([CreateUser] = @CreateUser OR @CreateUser IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([UpdateUser] = @UpdateUser OR @UpdateUser IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [PatientCode]
	, [FirstName]
	, [LastName]
	, [MemberType]
	, [HomePhone]
	, [WorkPhone]
	, [CellPhone]
	, [Avatar]
	, [CompanyCode]
	, [Birthdate]
	, [IsFemale]
	, [Title]
	, [Note]
	, [IsDisabled]
	, [CreateUser]
	, [CreateDate]
	, [UpdateUser]
	, [UpdateDate]
    FROM
	[dbo].[Patient]
    WHERE 
	 ([PatientCode] = @PatientCode AND @PatientCode is not null)
	OR ([FirstName] = @FirstName AND @FirstName is not null)
	OR ([LastName] = @LastName AND @LastName is not null)
	OR ([MemberType] = @MemberType AND @MemberType is not null)
	OR ([HomePhone] = @HomePhone AND @HomePhone is not null)
	OR ([WorkPhone] = @WorkPhone AND @WorkPhone is not null)
	OR ([CellPhone] = @CellPhone AND @CellPhone is not null)
	OR ([Avatar] = @Avatar AND @Avatar is not null)
	OR ([CompanyCode] = @CompanyCode AND @CompanyCode is not null)
	OR ([Birthdate] = @Birthdate AND @Birthdate is not null)
	OR ([IsFemale] = @IsFemale AND @IsFemale is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([IsDisabled] = @IsDisabled AND @IsDisabled is not null)
	OR ([CreateUser] = @CreateUser AND @CreateUser is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([UpdateUser] = @UpdateUser AND @UpdateUser is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Patient_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Patient table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [PatientCode] nchar(10)  
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [PatientCode] )
				SELECT TOP {3} [PatientCode]
				FROM [dbo].[Patient] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[PatientCode], O.[FirstName], O.[LastName], O.[MemberType], O.[HomePhone], O.[WorkPhone], O.[CellPhone], O.[Avatar], O.[CompanyCode], O.[Birthdate], O.[IsFemale], O.[Title], O.[Note], O.[IsDisabled], O.[CreateUser], O.[CreateDate], O.[UpdateUser], O.[UpdateDate]
				FROM
				    [dbo].[Patient] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[PatientCode] = PageIndex.[PatientCode]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Patient] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
            <procedure owner="dbo" name="VCSCompany_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the VCSCompany view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [CompanyCode],
                        [CompanyName],
                        [Address],
                        [BillingAddress],
                        [CompanyCity],
                        [CompanyCountry],
                        [AccountCode],
                        [CompanyTel],
                        [Attn],
                        [AttnEmail],
                        [AttnPhone],
                        [IsCCP],
                        [Remark]
                    FROM
                        [dbo].[VCSCompany]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="VCSCompany_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the VCSCompany view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    -- Build the sql query
                    DECLARE @SQL AS nvarchar(4000)
                    SET @SQL = ' SELECT * FROM [dbo].[VCSCompany]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    
                    -- Execution the query
                    EXEC sp_executesql @SQL
                    
                    -- Return total count
                    SELECT @@ROWCOUNT AS TotalRowCount
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="VCSCompany_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the VCSCompany table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    SELECT * FROM [dbo].[VCSCompany] {0}
                    ORDER BY {1}
    
                    -- get total count
                    SELECT @@ROWCOUNT AS TotalRowCount;
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="VCSMemberType_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the VCSMemberType view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [MemberType],
                        [Description],
                        [IsActive],
                        [Remark]
                    FROM
                        [dbo].[VCSMemberType]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="VCSMemberType_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the VCSMemberType view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    -- Build the sql query
                    DECLARE @SQL AS nvarchar(4000)
                    SET @SQL = ' SELECT * FROM [dbo].[VCSMemberType]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    
                    -- Execution the query
                    EXEC sp_executesql @SQL
                    
                    -- Return total count
                    SELECT @@ROWCOUNT AS TotalRowCount
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="VCSMemberType_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the VCSMemberType table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    SELECT * FROM [dbo].[VCSMemberType] {0}
                    ORDER BY {1}
    
                    -- get total count
                    SELECT @@ROWCOUNT AS TotalRowCount;
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="VCSPatient_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the VCSPatient view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [PatientCode],
                        [FirstName],
                        [MiddleName],
                        [LastName],
                        [DateOfBirth],
                        [Sex],
                        [MemberType],
                        [Nationality],
                        [HomeStreet],
                        [HomeWard],
                        [HomeDistrict],
                        [HomeCity],
                        [HomeCountry],
                        [WorkStreet],
                        [WorkWard],
                        [WorkDistrict],
                        [WorkCity],
                        [WorkCountry],
                        [CompanyCode],
                        [BillingAddress],
                        [HomePhone],
                        [MobilePhone],
                        [CompanyPhone],
                        [Fax],
                        [EmailAddress],
                        [CreateDate],
                        [ValidCorporate],
                        [DefaultPaymentMode],
                        [InsuranceCardNumber],
                        [InsuranceCardExpDate],
                        [MembershipSOSNumber],
                        [MembershipSOSExpDate],
                        [IsDisabled],
                        [UpdateUser],
                        [UpdateDate],
                        [Remark]
                    FROM
                        [dbo].[VCSPatient]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="VCSPatient_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the VCSPatient view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    -- Build the sql query
                    DECLARE @SQL AS nvarchar(4000)
                    SET @SQL = ' SELECT * FROM [dbo].[VCSPatient]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    
                    -- Execution the query
                    EXEC sp_executesql @SQL
                    
                    -- Return total count
                    SELECT @@ROWCOUNT AS TotalRowCount
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="VCSPatient_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the VCSPatient table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    SELECT * FROM [dbo].[VCSPatient] {0}
                    ORDER BY {1}
    
                    -- get total count
                    SELECT @@ROWCOUNT AS TotalRowCount;
                    
                    END
                ]]></body>
            </procedure>
            
</procedures>
</root>
