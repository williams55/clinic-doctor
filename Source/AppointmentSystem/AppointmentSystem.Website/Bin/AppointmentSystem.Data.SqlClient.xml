<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AppointmentSystem.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:AppointmentSystem.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,AppointmentSystem.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:AppointmentSystem.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:AppointmentSystem.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:AppointmentSystem.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:AppointmentSystem.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:AppointmentSystem.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.Status"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.Delete(AppointmentSystem.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.Find(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Status objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.Find(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AppointmentSystem.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Status objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.GetAll(AppointmentSystem.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Status objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.GetPaged(AppointmentSystem.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Status objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.GetById(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Status index.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AppointmentSystem.Entities.Status"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.BulkInsert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.TList{AppointmentSystem.Entities.Status})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.Status object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.Insert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.Status)">
            <summary>
            	Inserts a AppointmentSystem.Entities.Status object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.Status object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.Status object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.Update(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.Status)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.Status object to update.</param>
            <remarks>
            	After updating the datasource, the AppointmentSystem.Entities.Status object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlStatusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.GroupRole"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.Delete(AppointmentSystem.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.Find(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.GroupRole objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.Find(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AppointmentSystem.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AppointmentSystem.Entities.GroupRole objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.GetAll(AppointmentSystem.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.GroupRole objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.GetPaged(AppointmentSystem.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.GroupRole objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.GetByRoleId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GroupRole_Role key.
            	FK_GroupRole_Role Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_roleId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.GroupRole objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.GetByGroupId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_GroupRole_UserGroup key.
            	FK_GroupRole_UserGroup Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.GroupRole objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.GetById(AppointmentSystem.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_GroupRole index.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AppointmentSystem.Entities.GroupRole"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.BulkInsert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.TList{AppointmentSystem.Entities.GroupRole})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.GroupRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.Insert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.GroupRole)">
            <summary>
            	Inserts a AppointmentSystem.Entities.GroupRole object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.GroupRole object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.GroupRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.Update(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.GroupRole)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.GroupRole object to update.</param>
            <remarks>
            	After updating the datasource, the AppointmentSystem.Entities.GroupRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlGroupRoleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlUserRoleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.UserRole"/> entity.
            </summary>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.UserRole"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.Delete(AppointmentSystem.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.Find(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.UserRole objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.Find(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AppointmentSystem.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AppointmentSystem.Entities.UserRole objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.GetAll(AppointmentSystem.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.UserRole objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.GetPaged(AppointmentSystem.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.UserRole objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.GetByRoleId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_UserRole_Role key.
            	FK_UserRole_Role Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_roleId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.UserRole objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.GetByUserId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_UserRole_User key.
            	FK_UserRole_User Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.UserRole objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.GetById(AppointmentSystem.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserRole index.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AppointmentSystem.Entities.UserRole"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.BulkInsert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.TList{AppointmentSystem.Entities.UserRole})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.UserRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.Insert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.UserRole)">
            <summary>
            	Inserts a AppointmentSystem.Entities.UserRole object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.UserRole object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.UserRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.Update(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.UserRole)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.UserRole object to update.</param>
            <remarks>
            	After updating the datasource, the AppointmentSystem.Entities.UserRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlUserRoleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserRoleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlUserRoleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlPatientProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.Patient"/> entity.
            </summary>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.Patient"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.Delete(AppointmentSystem.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.Find(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Patient objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.Find(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AppointmentSystem.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Patient objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.GetAll(AppointmentSystem.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Patient objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.GetPaged(AppointmentSystem.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Patient objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.GetById(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Patient index.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AppointmentSystem.Entities.Patient"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.BulkInsert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.TList{AppointmentSystem.Entities.Patient})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.Patient object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.Insert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.Patient)">
            <summary>
            	Inserts a AppointmentSystem.Entities.Patient object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.Patient object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.Patient object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.Update(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.Patient)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.Patient object to update.</param>
            <remarks>
            	After updating the datasource, the AppointmentSystem.Entities.Patient object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlPatientProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlPatientProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlPatientProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.AppointmentGroup"/> entity.
            </summary>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.AppointmentGroup"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.Delete(AppointmentSystem.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.Find(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.AppointmentGroup objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.Find(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AppointmentSystem.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AppointmentSystem.Entities.AppointmentGroup objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.GetAll(AppointmentSystem.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.AppointmentGroup objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.GetPaged(AppointmentSystem.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.AppointmentGroup objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.GetByUnitId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AppointmentGroup_Unit key.
            	FK_AppointmentGroup_Unit Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_unitId">Define current unit belongs to what tab.
            		/// It's seperated by semi-comma [;]
            		/// Ex: 1stFloor;2ndFloor</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.AppointmentGroup objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.GetById(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AppointmentGroup index.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AppointmentSystem.Entities.AppointmentGroup"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.BulkInsert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.TList{AppointmentSystem.Entities.AppointmentGroup})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.AppointmentGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.Insert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.AppointmentGroup)">
            <summary>
            	Inserts a AppointmentSystem.Entities.AppointmentGroup object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.AppointmentGroup object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.AppointmentGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.Update(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.AppointmentGroup)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.AppointmentGroup object to update.</param>
            <remarks>
            	After updating the datasource, the AppointmentSystem.Entities.AppointmentGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlAppointmentGroupProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlUserGroupProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.UserGroup"/> entity.
            </summary>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.UserGroup"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.Delete(AppointmentSystem.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.Find(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.UserGroup objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.Find(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AppointmentSystem.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AppointmentSystem.Entities.UserGroup objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.GetAll(AppointmentSystem.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.UserGroup objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.GetPaged(AppointmentSystem.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.UserGroup objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.GetById(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserGroup index.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AppointmentSystem.Entities.UserGroup"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.BulkInsert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.TList{AppointmentSystem.Entities.UserGroup})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.UserGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.Insert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.UserGroup)">
            <summary>
            	Inserts a AppointmentSystem.Entities.UserGroup object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.UserGroup object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.UserGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.Update(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.UserGroup)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.UserGroup object to update.</param>
            <remarks>
            	After updating the datasource, the AppointmentSystem.Entities.UserGroup object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlUserGroupProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlUserGroupProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlUserGroupProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlStatusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.Status"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlStatusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlStatusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:AppointmentSystem.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(AppointmentSystem.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(AppointmentSystem.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(AppointmentSystem.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(AppointmentSystem.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(AppointmentSystem.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(AppointmentSystem.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(AppointmentSystem.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(AppointmentSystem.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(AppointmentSystem.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(AppointmentSystem.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(AppointmentSystem.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(AppointmentSystem.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:AppointmentSystem.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.RoleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AppointmentSystem.Entities.Role"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlRoleProvider">
            <summary>
            Gets the current <c cref="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlRoleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.RoomProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AppointmentSystem.Entities.Room"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlRoomProvider">
            <summary>
            Gets the current <c cref="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlRoomProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.StatusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AppointmentSystem.Entities.Status"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlStatusProvider">
            <summary>
            Gets the current <c cref="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlStatusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.UserGroupProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AppointmentSystem.Entities.UserGroup"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlUserGroupProvider">
            <summary>
            Gets the current <c cref="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlUserGroupProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.AppointmentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AppointmentSystem.Entities.Appointment"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlAppointmentProvider">
            <summary>
            Gets the current <c cref="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlAppointmentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.RoleDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AppointmentSystem.Entities.RoleDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlRoleDetailProvider">
            <summary>
            Gets the current <c cref="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlRoleDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.DoctorRoomProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AppointmentSystem.Entities.DoctorRoom"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlDoctorRoomProvider">
            <summary>
            Gets the current <c cref="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlDoctorRoomProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.UserRoleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AppointmentSystem.Entities.UserRole"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlUserRoleProvider">
            <summary>
            Gets the current <c cref="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlUserRoleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.GroupRoleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AppointmentSystem.Entities.GroupRole"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlGroupRoleProvider">
            <summary>
            Gets the current <c cref="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlGroupRoleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.AppointmentGroupProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AppointmentSystem.Entities.AppointmentGroup"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlAppointmentGroupProvider">
            <summary>
            Gets the current <c cref="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlAppointmentGroupProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.PatientProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AppointmentSystem.Entities.Patient"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlPatientProvider">
            <summary>
            Gets the current <c cref="P:AppointmentSystem.Data.SqlClient.SqlNetTiersProvider.SqlPatientProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.RoleDetail"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.Delete(AppointmentSystem.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.Find(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.RoleDetail objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.Find(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AppointmentSystem.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AppointmentSystem.Entities.RoleDetail objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.GetAll(AppointmentSystem.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.RoleDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.GetPaged(AppointmentSystem.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.RoleDetail objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.GetByRoleId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_RoleDetail_Role key.
            	FK_RoleDetail_Role Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_roleId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.RoleDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.GetById(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RoleDetail index.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AppointmentSystem.Entities.RoleDetail"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.BulkInsert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.TList{AppointmentSystem.Entities.RoleDetail})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.RoleDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.Insert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.RoleDetail)">
            <summary>
            	Inserts a AppointmentSystem.Entities.RoleDetail object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.RoleDetail object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.RoleDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.Update(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.RoleDetail)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.RoleDetail object to update.</param>
            <remarks>
            	After updating the datasource, the AppointmentSystem.Entities.RoleDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlRoleDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlRoleDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.RoleDetail"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlRoleDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlRoleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.Role"/> entity.
            </summary>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.Role"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.Delete(AppointmentSystem.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.Find(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Role objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.Find(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AppointmentSystem.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Role objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.GetAll(AppointmentSystem.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Role objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.GetPaged(AppointmentSystem.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Role objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.GetById(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Roles index.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AppointmentSystem.Entities.Role"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.BulkInsert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.TList{AppointmentSystem.Entities.Role})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.Role object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.Insert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.Role)">
            <summary>
            	Inserts a AppointmentSystem.Entities.Role object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.Role object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.Role object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.Update(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.Role)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.Role object to update.</param>
            <remarks>
            	After updating the datasource, the AppointmentSystem.Entities.Role object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlRoleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlRoleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.DoctorRoom"/> entity.
            </summary>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.DoctorRoom"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.Delete(AppointmentSystem.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.Find(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.DoctorRoom objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.Find(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AppointmentSystem.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AppointmentSystem.Entities.DoctorRoom objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.GetAll(AppointmentSystem.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.DoctorRoom objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.GetPaged(AppointmentSystem.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.DoctorRoom objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.GetByRoomId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DoctorRoom_Room key.
            	FK_DoctorRoom_Room Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_roomId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.DoctorRoom objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.GetByDoctorId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DoctorRoom_User key.
            	FK_DoctorRoom_User Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.DoctorRoom objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.GetById(AppointmentSystem.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UnitRoom index.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AppointmentSystem.Entities.DoctorRoom"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.BulkInsert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.TList{AppointmentSystem.Entities.DoctorRoom})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.DoctorRoom object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.Insert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.DoctorRoom)">
            <summary>
            	Inserts a AppointmentSystem.Entities.DoctorRoom object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.DoctorRoom object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.DoctorRoom object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.Update(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.DoctorRoom)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.DoctorRoom object to update.</param>
            <remarks>
            	After updating the datasource, the AppointmentSystem.Entities.DoctorRoom object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlDoctorRoomProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlAppointmentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.Appointment"/> entity.
            </summary>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.Appointment"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.Delete(AppointmentSystem.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.Find(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Appointment objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.Find(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AppointmentSystem.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Appointment objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.GetAll(AppointmentSystem.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Appointment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.GetPaged(AppointmentSystem.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Appointment objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.GetByAppointmentGroupId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Appointment_AppointmentGroup key.
            	FK_Appointment_AppointmentGroup Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_appointmentGroupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Appointment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.GetByPatientId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Appointment_Patient key.
            	FK_Appointment_Patient Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_patientId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Appointment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.GetByServicesId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Appointment_Procedure key.
            	FK_Appointment_Procedure Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_servicesId">What do patient wanna be served</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Appointment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.GetByRoomId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Appointment_Room key.
            	FK_Appointment_Room Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_roomId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Appointment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.GetByStatusId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Appointment_Status key.
            	FK_Appointment_Status Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_statusId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Appointment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.GetById(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Appointment index.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AppointmentSystem.Entities.Appointment"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.BulkInsert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.TList{AppointmentSystem.Entities.Appointment})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.Appointment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.Insert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.Appointment)">
            <summary>
            	Inserts a AppointmentSystem.Entities.Appointment object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.Appointment object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.Appointment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.Update(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.Appointment)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.Appointment object to update.</param>
            <remarks>
            	After updating the datasource, the AppointmentSystem.Entities.Appointment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlAppointmentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlAppointmentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlAppointmentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.Room"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.Delete(AppointmentSystem.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.Find(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Room objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.Find(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AppointmentSystem.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Room objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.GetAll(AppointmentSystem.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Room objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.GetPaged(AppointmentSystem.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Room objects.</returns>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.GetByServicesId(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Room_Procedure key.
            	FK_Room_Procedure Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_servicesId">A room can have many procedures. They are seperated by semi-comma [;]
            		/// For example: XRay;MRI</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AppointmentSystem.Entities.Room objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.GetById(AppointmentSystem.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Room index.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AppointmentSystem.Entities.Room"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.BulkInsert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.TList{AppointmentSystem.Entities.Room})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.Room object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.Insert(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.Room)">
            <summary>
            	Inserts a AppointmentSystem.Entities.Room object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.Room object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AppointmentSystem.Entities.Room object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.Update(AppointmentSystem.Data.TransactionManager,AppointmentSystem.Entities.Room)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AppointmentSystem.Data.TransactionManager"/> object</param>
            <param name="entity">AppointmentSystem.Entities.Room object to update.</param>
            <remarks>
            	After updating the datasource, the AppointmentSystem.Entities.Room object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AppointmentSystem.Data.SqlClient.SqlRoomProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlRoomProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.Room"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlRoomProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlRoomProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AppointmentSystem.Data.SqlClient.SqlGroupRoleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AppointmentSystem.Entities.GroupRole"/> entity.
            </summary>
        </member>
        <member name="M:AppointmentSystem.Data.SqlClient.SqlGroupRoleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AppointmentSystem.Data.SqlClient.SqlGroupRoleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
