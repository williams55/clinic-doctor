/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VcsCountry.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace AppointmentSystem.Entities
{
	///<summary>
	/// An object representation of the 'VCSCountry' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VcsCountryBase")]
	public abstract partial class VcsCountryBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// CountryName : 
		/// </summary>
		private System.String		  _countryName = string.Empty;
		
		/// <summary>
		/// CitizenName : 
		/// </summary>
		private System.String		  _citizenName = null;
		
		/// <summary>
		/// NationalCode : 
		/// </summary>
		private System.String		  _nationalCode = null;
		
		/// <summary>
		/// CreateUser : 
		/// </summary>
		private System.String		  _createUser = null;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		private System.DateTime		  _createDate = DateTime.MinValue;
		
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		private System.Boolean		  _isDisabled = false;
		
		/// <summary>
		/// Remark : 
		/// </summary>
		private System.String		  _remark = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VcsCountryBase"/> instance.
		///</summary>
		public VcsCountryBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VcsCountryBase"/> instance.
		///</summary>
		///<param name="_countryName"></param>
		///<param name="_citizenName"></param>
		///<param name="_nationalCode"></param>
		///<param name="_createUser"></param>
		///<param name="_createDate"></param>
		///<param name="_isDisabled"></param>
		///<param name="_remark"></param>
		public VcsCountryBase(System.String _countryName, System.String _citizenName, System.String _nationalCode, System.String _createUser, System.DateTime _createDate, System.Boolean _isDisabled, System.String _remark)
		{
			this._countryName = _countryName;
			this._citizenName = _citizenName;
			this._nationalCode = _nationalCode;
			this._createUser = _createUser;
			this._createDate = _createDate;
			this._isDisabled = _isDisabled;
			this._remark = _remark;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VcsCountry"/> instance.
		///</summary>
		///<param name="_countryName"></param>
		///<param name="_citizenName"></param>
		///<param name="_nationalCode"></param>
		///<param name="_createUser"></param>
		///<param name="_createDate"></param>
		///<param name="_isDisabled"></param>
		///<param name="_remark"></param>
		public static VcsCountry CreateVcsCountry(System.String _countryName, System.String _citizenName, System.String _nationalCode, System.String _createUser, System.DateTime _createDate, System.Boolean _isDisabled, System.String _remark)
		{
			VcsCountry newVcsCountry = new VcsCountry();
			newVcsCountry.CountryName = _countryName;
			newVcsCountry.CitizenName = _citizenName;
			newVcsCountry.NationalCode = _nationalCode;
			newVcsCountry.CreateUser = _createUser;
			newVcsCountry.CreateDate = _createDate;
			newVcsCountry.IsDisabled = _isDisabled;
			newVcsCountry.Remark = _remark;
			return newVcsCountry;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the CountryName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CountryName
		{
			get
			{
				return this._countryName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "CountryName does not allow null values.");
				if (_countryName == value)
					return;
					
				this._countryName = value;
				this._isDirty = true;
				
				OnPropertyChanged("CountryName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CitizenName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CitizenName
		{
			get
			{
				return this._citizenName; 
			}
			set
			{
				if (_citizenName == value)
					return;
					
				this._citizenName = value;
				this._isDirty = true;
				
				OnPropertyChanged("CitizenName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NationalCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String NationalCode
		{
			get
			{
				return this._nationalCode; 
			}
			set
			{
				if (_nationalCode == value)
					return;
					
				this._nationalCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("NationalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CreateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CreateUser
		{
			get
			{
				return this._createUser; 
			}
			set
			{
				if (_createUser == value)
					return;
					
				this._createUser = value;
				this._isDirty = true;
				
				OnPropertyChanged("CreateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime CreateDate
		{
			get
			{
				return this._createDate; 
			}
			set
			{
				if (_createDate == value)
					return;
					
				this._createDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the IsDisabled property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean IsDisabled
		{
			get
			{
				return this._isDisabled; 
			}
			set
			{
				if (_isDisabled == value)
					return;
					
				this._isDisabled = value;
				this._isDirty = true;
				
				OnPropertyChanged("IsDisabled");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Remark property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Remark
		{
			get
			{
				return this._remark; 
			}
			set
			{
				if (_remark == value)
					return;
					
				this._remark = value;
				this._isDirty = true;
				
				OnPropertyChanged("Remark");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "VCSCountry"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VcsCountryBase Entity 
		///</summary>
		public virtual VcsCountryBase Copy()
		{
			//shallow copy entity
			VcsCountry copy = new VcsCountry();
				copy.CountryName = this.CountryName;
				copy.CitizenName = this.CitizenName;
				copy.NationalCode = this.NationalCode;
				copy.CreateUser = this.CreateUser;
				copy.CreateDate = this.CreateDate;
				copy.IsDisabled = this.IsDisabled;
				copy.Remark = this.Remark;
			copy.AcceptChanges();
			return (VcsCountry)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VcsCountryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VcsCountryBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VcsCountryBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VcsCountryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VcsCountryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VcsCountryBase Object1, VcsCountryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.CountryName != Object2.CountryName)
				equal = false;
			if (Object1.CitizenName != null && Object2.CitizenName != null )
			{
				if (Object1.CitizenName != Object2.CitizenName)
					equal = false;
			}
			else if (Object1.CitizenName == null ^ Object1.CitizenName == null )
			{
				equal = false;
			}
			if (Object1.NationalCode != null && Object2.NationalCode != null )
			{
				if (Object1.NationalCode != Object2.NationalCode)
					equal = false;
			}
			else if (Object1.NationalCode == null ^ Object1.NationalCode == null )
			{
				equal = false;
			}
			if (Object1.CreateUser != null && Object2.CreateUser != null )
			{
				if (Object1.CreateUser != Object2.CreateUser)
					equal = false;
			}
			else if (Object1.CreateUser == null ^ Object1.CreateUser == null )
			{
				equal = false;
			}
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if (Object1.IsDisabled != Object2.IsDisabled)
				equal = false;
			if (Object1.Remark != null && Object2.Remark != null )
			{
				if (Object1.Remark != Object2.Remark)
					equal = false;
			}
			else if (Object1.Remark == null ^ Object1.Remark == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VcsCountry entity, string propertyName)
		{
			switch (propertyName)
			{
				case "CountryName":
					return entity.CountryName;
				case "CitizenName":
					return entity.CitizenName;
				case "NationalCode":
					return entity.NationalCode;
				case "CreateUser":
					return entity.CreateUser;
				case "CreateDate":
					return entity.CreateDate;
				case "IsDisabled":
					return entity.IsDisabled;
				case "Remark":
					return entity.Remark;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VcsCountry, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- CountryName: {0}{7}- CitizenName: {1}{7}- NationalCode: {2}{7}- CreateUser: {3}{7}- CreateDate: {4}{7}- IsDisabled: {5}{7}- Remark: {6}{7}", 
				this.CountryName,
				(this.CitizenName == null) ? string.Empty : this.CitizenName.ToString(),
			     
				(this.NationalCode == null) ? string.Empty : this.NationalCode.ToString(),
			     
				(this.CreateUser == null) ? string.Empty : this.CreateUser.ToString(),
			     
				this.CreateDate,
				this.IsDisabled,
				(this.Remark == null) ? string.Empty : this.Remark.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VcsCountry columns.
	/// </summary>
	[Serializable]
	public enum VcsCountryColumn
	{
		/// <summary>
		/// CountryName : 
		/// </summary>
		[EnumTextValue("CountryName")]
		[ColumnEnum("CountryName", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		CountryName,
		/// <summary>
		/// CitizenName : 
		/// </summary>
		[EnumTextValue("CitizenName")]
		[ColumnEnum("CitizenName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CitizenName,
		/// <summary>
		/// NationalCode : 
		/// </summary>
		[EnumTextValue("NationalCode")]
		[ColumnEnum("NationalCode", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		NationalCode,
		/// <summary>
		/// CreateUser : 
		/// </summary>
		[EnumTextValue("CreateUser")]
		[ColumnEnum("CreateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CreateUser,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("CreateDate")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate,
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		[EnumTextValue("IsDisabled")]
		[ColumnEnum("IsDisabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsDisabled,
		/// <summary>
		/// Remark : 
		/// </summary>
		[EnumTextValue("Remark")]
		[ColumnEnum("Remark", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Remark
	}//End enum

} // end namespace
