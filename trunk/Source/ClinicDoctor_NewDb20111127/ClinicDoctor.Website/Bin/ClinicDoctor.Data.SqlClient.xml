<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClinicDoctor.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Status"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Status objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Status objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Status objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Status objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Status_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Status"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Status_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Status index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Status"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.Status})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Status object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Status)">
            <summary>
            	Inserts a ClinicDoctor.Entities.Status object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Status object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Status object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Status)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Status object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.Status object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlStatusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlRoomProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Room"/> entity.
            </summary>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Room"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Room objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Room objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Room objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Room objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Room_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Room"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.GetByIdStatus(ClinicDoctor.Data.TransactionManager,System.Int64,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Room_Id_Status index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_status"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Room"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.GetByIdStatusIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Room_Id_Status_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_status"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Room"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Room_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.GetByStatus(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Room_Status index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_status"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.GetByStatusIsDisabled(ClinicDoctor.Data.TransactionManager,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Room_Status_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_status"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Room index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Room"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.Room})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Room object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Room)">
            <summary>
            	Inserts a ClinicDoctor.Entities.Room object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Room object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Room object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Room)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Room object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.Room object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlRoomProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlRoomProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlFunctionalityProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Functionality"/> entity.
            </summary>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Functionality"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Functionality objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Functionality objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Functionality objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Functionality objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Functionality_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Functionality"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Functionality_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Functionality index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Functionality"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.Functionality})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Functionality object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Functionality)">
            <summary>
            	Inserts a ClinicDoctor.Entities.Functionality object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Functionality object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Functionality object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Functionality)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Functionality object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.Functionality object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlFunctionalityProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlFunctionalityProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlFunctionalityProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlContentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Content"/> entity.
            </summary>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlContentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Content"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlContentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlContentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Content objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Content objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Content objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Content objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.GetByFuncId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Content_FuncId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_funcId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.GetByFuncIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Content_FuncId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_funcId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Content_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Content"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Content_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Content index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Content"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.Content})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Content object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Content)">
            <summary>
            	Inserts a ClinicDoctor.Entities.Content object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Content object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Content object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Content)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Content object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.Content object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlContentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlContentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlContentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlStatusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Status"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStatusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlStatusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.RoomFunc"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.RoomFunc objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.RoomFunc objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.RoomFunc objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.RoomFunc objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.GetByFuncId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RoomFunc_FuncId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_funcId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.GetByFuncIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RoomFunc_FuncId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_funcId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RoomFunc_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.RoomFunc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RoomFunc_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.GetByRoomId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RoomFunc_RoomId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_roomId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.GetByRoomIdFuncId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RoomFunc_RoomId_FuncId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_roomId"></param>
            <param name="_funcId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.RoomFunc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.GetByRoomIdFuncIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RoomFunc_RoomId_FuncId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_roomId"></param>
            <param name="_funcId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.RoomFunc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.GetByRoomIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RoomFunc_RoomId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_roomId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RoomFunc index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.RoomFunc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.RoomFunc})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.RoomFunc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.RoomFunc)">
            <summary>
            	Inserts a ClinicDoctor.Entities.RoomFunc object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.RoomFunc object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.RoomFunc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.RoomFunc)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.RoomFunc object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.RoomFunc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlRoomFuncProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlRosterTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.RosterType"/> entity.
            </summary>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.RosterType"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.RosterType objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.RosterType objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.RosterType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.RosterType objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.GetByIdIsBooked(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RosterType_Id_IsBooked index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isBooked"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.RosterType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.GetByIdIsBookedIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RosterType_Id_IsBooked_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isBooked"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.RosterType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RosterType_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.RosterType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.GetByIsBooked(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RosterType_IsBooked index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isBooked"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.GetByIsBookedIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RosterType_IsBooked_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isBooked"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_RosterType_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_RosterType index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.RosterType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.RosterType})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.RosterType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.RosterType)">
            <summary>
            	Inserts a ClinicDoctor.Entities.RosterType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.RosterType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.RosterType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.RosterType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.RosterType object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.RosterType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlRosterTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRosterTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlRosterTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.DoctorRoom"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorRoom objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorRoom objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorRoom objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorRoom objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.GetByDoctorId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoom_DoctorId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.GetByDoctorIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoom_DoctorId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.GetByDoctorIdRoomId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoom_DoctorId_RoomId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_roomId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.GetByDoctorIdRoomIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoom_DoctorId_RoomId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_roomId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoom_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.DoctorRoom"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoom_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.GetByRoomId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoom_RoomId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_roomId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.GetByRoomIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoom_RoomId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_roomId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DoctorRoom index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.DoctorRoom"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.DoctorRoom})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.DoctorRoom object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.DoctorRoom)">
            <summary>
            	Inserts a ClinicDoctor.Entities.DoctorRoom object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.DoctorRoom object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.DoctorRoom object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.DoctorRoom)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.DoctorRoom object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.DoctorRoom object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.DoctorRoster"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorRoster objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorRoster objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorRoster objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorRoster objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByDoctorId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_DoctorId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByDoctorIdIsComplete(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_DoctorId_IsComplete index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_isComplete"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByDoctorIdIsCompleteIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_DoctorId_IsComplete_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_isComplete"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByDoctorIdRosterTypeId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_DoctorId_RosterTypeId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_rosterTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByDoctorIdRosterTypeIdIsComplete(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_DoctorId_RosterTypeId_IsComplete index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_rosterTypeId"></param>
            <param name="_isComplete"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByDoctorIdRosterTypeIdIsCompleteIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_DoctorId_RosterTypeId_IsComplete_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_rosterTypeId"></param>
            <param name="_isComplete"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByIdIsComplete(ClinicDoctor.Data.TransactionManager,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_Id_IsComplete index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isComplete"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.DoctorRoster"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByIdIsCompleteIsDisabled(ClinicDoctor.Data.TransactionManager,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_Id_IsComplete_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isComplete"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.DoctorRoster"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.DoctorRoster"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByRosterTypeId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_RosterTypeId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_rosterTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByRosterTypeIdIsComplete(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_RosterTypeId_IsComplete index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_rosterTypeId"></param>
            <param name="_isComplete"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetByRosterTypeIdIsCompleteIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorRoster_RosterTypeId_IsComplete_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_rosterTypeId"></param>
            <param name="_isComplete"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DoctorRoster index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.DoctorRoster"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.DoctorRoster})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.DoctorRoster object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.DoctorRoster)">
            <summary>
            	Inserts a ClinicDoctor.Entities.DoctorRoster object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.DoctorRoster object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.DoctorRoster object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.DoctorRoster)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.DoctorRoster object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.DoctorRoster object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.DoctorRoster"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlDoctorRosterProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlAppointmentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Appointment"/> entity.
            </summary>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Appointment"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Appointment objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Appointment objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Appointment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Appointment objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByContentId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_ContentId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_contentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByContentIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_ContentId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_contentId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByCustomerId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_CustomerId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByCustomerIdContentId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_CustomerId_ContentId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_contentId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByCustomerIdContentIdDoctorIdRoomIdNurseIdStatusId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_CustomerId_ContentId_DoctorId_RoomId_NurseId_StatusId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_contentId"></param>
            <param name="_doctorId"></param>
            <param name="_roomId"></param>
            <param name="_nurseId"></param>
            <param name="_statusId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Appointment"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByCustomerIdContentIdDoctorIdRoomIdNurseIdStatusIdIsComplete(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_CustomerId_ContentId_DoctorId_RoomId_NurseId_StatusId_IsComplete index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_contentId"></param>
            <param name="_doctorId"></param>
            <param name="_roomId"></param>
            <param name="_nurseId"></param>
            <param name="_statusId"></param>
            <param name="_isComplete"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Appointment"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByCustomerIdContentIdDoctorIdRoomIdNurseIdStatusIdIsCompleteIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_CustomerId_ContentId_DoctorId_RoomId_NurseId_StatusId_IsComplete_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_contentId"></param>
            <param name="_doctorId"></param>
            <param name="_roomId"></param>
            <param name="_nurseId"></param>
            <param name="_statusId"></param>
            <param name="_isComplete"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Appointment"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByCustomerIdContentIdDoctorIdRoomIdNurseIdStatusIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_CustomerId_ContentId_DoctorId_RoomId_NurseId_StatusId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_contentId"></param>
            <param name="_doctorId"></param>
            <param name="_roomId"></param>
            <param name="_nurseId"></param>
            <param name="_statusId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByCustomerIdContentIdIsComplete(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_CustomerId_ContentId_IsComplete index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_contentId"></param>
            <param name="_isComplete"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByCustomerIdContentIdIsCompleteIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_CustomerId_ContentId_IsComplete_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_contentId"></param>
            <param name="_isComplete"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByCustomerIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_CustomerId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByDoctorId(ClinicDoctor.Data.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_DoctorId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByDoctorIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Nullable{System.Int64},System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_DoctorId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Appointment"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByNurseId(ClinicDoctor.Data.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_NurseId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_nurseId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByNurseIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Nullable{System.Int64},System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_NurseId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_nurseId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByRoomId(ClinicDoctor.Data.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_RoomId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_roomId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByRoomIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Nullable{System.Int64},System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_RoomId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_roomId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByStatusId(ClinicDoctor.Data.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_StatusId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_statusId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetByStatusIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Nullable{System.Int64},System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Appointment_StatusId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_statusId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Appointment_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Appointment"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.Appointment})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Appointment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Appointment)">
            <summary>
            	Inserts a ClinicDoctor.Entities.Appointment object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Appointment object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Appointment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Appointment)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Appointment object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.Appointment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlAppointmentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlAppointmentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlAppointmentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:ClinicDoctor.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ClinicDoctor.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ClinicDoctor.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ClinicDoctor.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ClinicDoctor.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ClinicDoctor.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(ClinicDoctor.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ClinicDoctor.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ClinicDoctor.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ClinicDoctor.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ClinicDoctor.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ClinicDoctor.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(ClinicDoctor.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:ClinicDoctor.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.GroupProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.Group"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlGroupProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlGroupProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.StaffProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.Staff"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlStaffProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlStaffProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.RoomProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.Room"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlRoomProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlRoomProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.FunctionalityProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.Functionality"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlFunctionalityProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlFunctionalityProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.RosterTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.RosterType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlRosterTypeProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlRosterTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.DoctorRosterProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.DoctorRoster"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlDoctorRosterProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlDoctorRosterProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.DoctorRoomProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.DoctorRoom"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlDoctorRoomProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlDoctorRoomProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.StatusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.Status"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlStatusProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlStatusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.ContentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.Content"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlContentProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlContentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.RoomFuncProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.RoomFunc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlRoomFuncProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlRoomFuncProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.CustomerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.Customer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlCustomerProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlCustomerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.DoctorFuncProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.DoctorFunc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlDoctorFuncProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlDoctorFuncProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.AppointmentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ClinicDoctor.Entities.Appointment"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlAppointmentProvider">
            <summary>
            Gets the current <c cref="P:ClinicDoctor.Data.SqlClient.SqlNetTiersProvider.SqlAppointmentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,ClinicDoctor.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:ClinicDoctor.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:ClinicDoctor.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:ClinicDoctor.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:ClinicDoctor.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ClinicDoctor.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlRoomFuncProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.RoomFunc"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlRoomFuncProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlRoomFuncProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlGroupProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Group"/> entity.
            </summary>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Group"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Group objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Group objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Group objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Group objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Group_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Group"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Group_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Group index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Group"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.Group})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Group object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Group)">
            <summary>
            	Inserts a ClinicDoctor.Entities.Group object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Group object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Group object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Group)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Group object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.Group object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlGroupProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlGroupProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlGroupProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.DoctorRoom"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlDoctorRoomProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.DoctorFunc"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorFunc objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorFunc objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorFunc objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.DoctorFunc objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.GetByDoctorId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorFunc_DoctorId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.GetByDoctorIdFuncId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorFunc_DoctorId_FuncId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_funcId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.DoctorFunc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.GetByDoctorIdFuncIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorFunc_DoctorId_FuncId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_funcId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.DoctorFunc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.GetByDoctorIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorFunc_DoctorId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_doctorId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.GetByFuncId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorFunc_FuncId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_funcId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.GetByFuncIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorFunc_FuncId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_funcId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorFunc_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.DoctorFunc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_DoctorFunc_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DoctorFunc index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.DoctorFunc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.DoctorFunc})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.DoctorFunc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.DoctorFunc)">
            <summary>
            	Inserts a ClinicDoctor.Entities.DoctorFunc object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.DoctorFunc object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.DoctorFunc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.DoctorFunc)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.DoctorFunc object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.DoctorFunc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Customer"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Customer objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Customer objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Customer objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Customer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.GetByIsFemale(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_IsFemale index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isFemale"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.GetByIsFemaleIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Customer_IsFemale_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isFemale"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Customer index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Customer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.Customer})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Customer)">
            <summary>
            	Inserts a ClinicDoctor.Entities.Customer object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Customer object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Customer)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Customer object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlCustomerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlStaffProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Staff"/> entity.
            </summary>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Staff"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.Delete(ClinicDoctor.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.Find(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Staff objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.Find(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ClinicDoctor.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Staff objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetAll(ClinicDoctor.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Staff objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetPaged(ClinicDoctor.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ClinicDoctor.Entities.Staff objects.</returns>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetByGroupId(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Staff_GroupId index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetByGroupIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Staff_GroupId_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetByGroupIdIsFemaleIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Staff_GroupId_IsFemale_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="_isFemale"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetByIdIsDisabled(ClinicDoctor.Data.TransactionManager,System.Int64,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Staff_Id_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Staff"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetByIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Staff_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetByIsFemale(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Staff_IsFemale index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isFemale"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetByIsFemaleIsDisabled(ClinicDoctor.Data.TransactionManager,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Staff_IsFemale_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_isFemale"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetByUserName(ClinicDoctor.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Staff_UserName index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_userName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Staff"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetByUserNameIsDisabled(ClinicDoctor.Data.TransactionManager,System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Staff_UserName_IsDisabled index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_userName"></param>
            <param name="_isDisabled"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Staff"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.GetById(ClinicDoctor.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Staff index.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ClinicDoctor.Entities.Staff"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.BulkInsert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.TList{ClinicDoctor.Entities.Staff})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Staff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.Insert(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Staff)">
            <summary>
            	Inserts a ClinicDoctor.Entities.Staff object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Staff object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ClinicDoctor.Entities.Staff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.Update(ClinicDoctor.Data.TransactionManager,ClinicDoctor.Entities.Staff)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ClinicDoctor.Data.TransactionManager"/> object</param>
            <param name="entity">ClinicDoctor.Entities.Staff object to update.</param>
            <remarks>
            	After updating the datasource, the ClinicDoctor.Entities.Staff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ClinicDoctor.Data.SqlClient.SqlStaffProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlStaffProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlStaffProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlCustomerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.Customer"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlCustomerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlCustomerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ClinicDoctor.Entities.DoctorFunc"/> entity.
            </summary>
        </member>
        <member name="M:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ClinicDoctor.Data.SqlClient.SqlDoctorFuncProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
