/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VcsCompany.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace AppointmentSystem.Entities
{
	///<summary>
	/// An object representation of the 'VCSCompany' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VcsCompanyBase")]
	public abstract partial class VcsCompanyBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// CompanyCode : 
		/// </summary>
		private System.String		  _companyCode = string.Empty;
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		private System.String		  _companyName = string.Empty;
		
		/// <summary>
		/// Address : 
		/// </summary>
		private System.String		  _address = null;
		
		/// <summary>
		/// BillingAddress : 
		/// </summary>
		private System.String		  _billingAddress = null;
		
		/// <summary>
		/// CompanyCity : 
		/// </summary>
		private System.String		  _companyCity = null;
		
		/// <summary>
		/// CompanyCountry : 
		/// </summary>
		private System.String		  _companyCountry = null;
		
		/// <summary>
		/// AccountCode : 
		/// </summary>
		private System.String		  _accountCode = null;
		
		/// <summary>
		/// CompanyTel : 
		/// </summary>
		private System.String		  _companyTel = null;
		
		/// <summary>
		/// Attn : 
		/// </summary>
		private System.String		  _attn = null;
		
		/// <summary>
		/// AttnEmail : 
		/// </summary>
		private System.String		  _attnEmail = null;
		
		/// <summary>
		/// AttnPhone : 
		/// </summary>
		private System.String		  _attnPhone = null;
		
		/// <summary>
		/// IsCCP : 
		/// </summary>
		private System.Boolean		  _isCcp = false;
		
		/// <summary>
		/// Remark : 
		/// </summary>
		private System.String		  _remark = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VcsCompanyBase"/> instance.
		///</summary>
		public VcsCompanyBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VcsCompanyBase"/> instance.
		///</summary>
		///<param name="_companyCode"></param>
		///<param name="_companyName"></param>
		///<param name="_address"></param>
		///<param name="_billingAddress"></param>
		///<param name="_companyCity"></param>
		///<param name="_companyCountry"></param>
		///<param name="_accountCode"></param>
		///<param name="_companyTel"></param>
		///<param name="_attn"></param>
		///<param name="_attnEmail"></param>
		///<param name="_attnPhone"></param>
		///<param name="_isCcp"></param>
		///<param name="_remark"></param>
		public VcsCompanyBase(System.String _companyCode, System.String _companyName, System.String _address, System.String _billingAddress, System.String _companyCity, System.String _companyCountry, System.String _accountCode, System.String _companyTel, System.String _attn, System.String _attnEmail, System.String _attnPhone, System.Boolean _isCcp, System.String _remark)
		{
			this._companyCode = _companyCode;
			this._companyName = _companyName;
			this._address = _address;
			this._billingAddress = _billingAddress;
			this._companyCity = _companyCity;
			this._companyCountry = _companyCountry;
			this._accountCode = _accountCode;
			this._companyTel = _companyTel;
			this._attn = _attn;
			this._attnEmail = _attnEmail;
			this._attnPhone = _attnPhone;
			this._isCcp = _isCcp;
			this._remark = _remark;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VcsCompany"/> instance.
		///</summary>
		///<param name="_companyCode"></param>
		///<param name="_companyName"></param>
		///<param name="_address"></param>
		///<param name="_billingAddress"></param>
		///<param name="_companyCity"></param>
		///<param name="_companyCountry"></param>
		///<param name="_accountCode"></param>
		///<param name="_companyTel"></param>
		///<param name="_attn"></param>
		///<param name="_attnEmail"></param>
		///<param name="_attnPhone"></param>
		///<param name="_isCcp"></param>
		///<param name="_remark"></param>
		public static VcsCompany CreateVcsCompany(System.String _companyCode, System.String _companyName, System.String _address, System.String _billingAddress, System.String _companyCity, System.String _companyCountry, System.String _accountCode, System.String _companyTel, System.String _attn, System.String _attnEmail, System.String _attnPhone, System.Boolean _isCcp, System.String _remark)
		{
			VcsCompany newVcsCompany = new VcsCompany();
			newVcsCompany.CompanyCode = _companyCode;
			newVcsCompany.CompanyName = _companyName;
			newVcsCompany.Address = _address;
			newVcsCompany.BillingAddress = _billingAddress;
			newVcsCompany.CompanyCity = _companyCity;
			newVcsCompany.CompanyCountry = _companyCountry;
			newVcsCompany.AccountCode = _accountCode;
			newVcsCompany.CompanyTel = _companyTel;
			newVcsCompany.Attn = _attn;
			newVcsCompany.AttnEmail = _attnEmail;
			newVcsCompany.AttnPhone = _attnPhone;
			newVcsCompany.IsCcp = _isCcp;
			newVcsCompany.Remark = _remark;
			return newVcsCompany;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the CompanyCode property. 
		///		
		/// </summary>
		/// <value>This type is nchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CompanyCode
		{
			get
			{
				return this._companyCode; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "CompanyCode does not allow null values.");
				if (_companyCode == value)
					return;
					
				this._companyCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompanyCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CompanyName
		{
			get
			{
				return this._companyName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "CompanyName does not allow null values.");
				if (_companyName == value)
					return;
					
				this._companyName = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Address
		{
			get
			{
				return this._address; 
			}
			set
			{
				if (_address == value)
					return;
					
				this._address = value;
				this._isDirty = true;
				
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BillingAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String BillingAddress
		{
			get
			{
				return this._billingAddress; 
			}
			set
			{
				if (_billingAddress == value)
					return;
					
				this._billingAddress = value;
				this._isDirty = true;
				
				OnPropertyChanged("BillingAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CompanyCity property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CompanyCity
		{
			get
			{
				return this._companyCity; 
			}
			set
			{
				if (_companyCity == value)
					return;
					
				this._companyCity = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompanyCity");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CompanyCountry property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CompanyCountry
		{
			get
			{
				return this._companyCountry; 
			}
			set
			{
				if (_companyCountry == value)
					return;
					
				this._companyCountry = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompanyCountry");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AccountCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AccountCode
		{
			get
			{
				return this._accountCode; 
			}
			set
			{
				if (_accountCode == value)
					return;
					
				this._accountCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("AccountCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CompanyTel property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CompanyTel
		{
			get
			{
				return this._companyTel; 
			}
			set
			{
				if (_companyTel == value)
					return;
					
				this._companyTel = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompanyTel");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Attn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Attn
		{
			get
			{
				return this._attn; 
			}
			set
			{
				if (_attn == value)
					return;
					
				this._attn = value;
				this._isDirty = true;
				
				OnPropertyChanged("Attn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AttnEmail property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AttnEmail
		{
			get
			{
				return this._attnEmail; 
			}
			set
			{
				if (_attnEmail == value)
					return;
					
				this._attnEmail = value;
				this._isDirty = true;
				
				OnPropertyChanged("AttnEmail");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AttnPhone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AttnPhone
		{
			get
			{
				return this._attnPhone; 
			}
			set
			{
				if (_attnPhone == value)
					return;
					
				this._attnPhone = value;
				this._isDirty = true;
				
				OnPropertyChanged("AttnPhone");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the IsCCP property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean IsCcp
		{
			get
			{
				return this._isCcp; 
			}
			set
			{
				if (_isCcp == value)
					return;
					
				this._isCcp = value;
				this._isDirty = true;
				
				OnPropertyChanged("IsCcp");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Remark property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Remark
		{
			get
			{
				return this._remark; 
			}
			set
			{
				if (_remark == value)
					return;
					
				this._remark = value;
				this._isDirty = true;
				
				OnPropertyChanged("Remark");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "VCSCompany"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VcsCompanyBase Entity 
		///</summary>
		public virtual VcsCompanyBase Copy()
		{
			//shallow copy entity
			VcsCompany copy = new VcsCompany();
				copy.CompanyCode = this.CompanyCode;
				copy.CompanyName = this.CompanyName;
				copy.Address = this.Address;
				copy.BillingAddress = this.BillingAddress;
				copy.CompanyCity = this.CompanyCity;
				copy.CompanyCountry = this.CompanyCountry;
				copy.AccountCode = this.AccountCode;
				copy.CompanyTel = this.CompanyTel;
				copy.Attn = this.Attn;
				copy.AttnEmail = this.AttnEmail;
				copy.AttnPhone = this.AttnPhone;
				copy.IsCcp = this.IsCcp;
				copy.Remark = this.Remark;
			copy.AcceptChanges();
			return (VcsCompany)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VcsCompanyBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VcsCompanyBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VcsCompanyBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VcsCompanyBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VcsCompanyBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VcsCompanyBase Object1, VcsCompanyBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.CompanyCode != Object2.CompanyCode)
				equal = false;
			if (Object1.CompanyName != Object2.CompanyName)
				equal = false;
			if (Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object1.Address == null )
			{
				equal = false;
			}
			if (Object1.BillingAddress != null && Object2.BillingAddress != null )
			{
				if (Object1.BillingAddress != Object2.BillingAddress)
					equal = false;
			}
			else if (Object1.BillingAddress == null ^ Object1.BillingAddress == null )
			{
				equal = false;
			}
			if (Object1.CompanyCity != null && Object2.CompanyCity != null )
			{
				if (Object1.CompanyCity != Object2.CompanyCity)
					equal = false;
			}
			else if (Object1.CompanyCity == null ^ Object1.CompanyCity == null )
			{
				equal = false;
			}
			if (Object1.CompanyCountry != null && Object2.CompanyCountry != null )
			{
				if (Object1.CompanyCountry != Object2.CompanyCountry)
					equal = false;
			}
			else if (Object1.CompanyCountry == null ^ Object1.CompanyCountry == null )
			{
				equal = false;
			}
			if (Object1.AccountCode != null && Object2.AccountCode != null )
			{
				if (Object1.AccountCode != Object2.AccountCode)
					equal = false;
			}
			else if (Object1.AccountCode == null ^ Object1.AccountCode == null )
			{
				equal = false;
			}
			if (Object1.CompanyTel != null && Object2.CompanyTel != null )
			{
				if (Object1.CompanyTel != Object2.CompanyTel)
					equal = false;
			}
			else if (Object1.CompanyTel == null ^ Object1.CompanyTel == null )
			{
				equal = false;
			}
			if (Object1.Attn != null && Object2.Attn != null )
			{
				if (Object1.Attn != Object2.Attn)
					equal = false;
			}
			else if (Object1.Attn == null ^ Object1.Attn == null )
			{
				equal = false;
			}
			if (Object1.AttnEmail != null && Object2.AttnEmail != null )
			{
				if (Object1.AttnEmail != Object2.AttnEmail)
					equal = false;
			}
			else if (Object1.AttnEmail == null ^ Object1.AttnEmail == null )
			{
				equal = false;
			}
			if (Object1.AttnPhone != null && Object2.AttnPhone != null )
			{
				if (Object1.AttnPhone != Object2.AttnPhone)
					equal = false;
			}
			else if (Object1.AttnPhone == null ^ Object1.AttnPhone == null )
			{
				equal = false;
			}
			if (Object1.IsCcp != Object2.IsCcp)
				equal = false;
			if (Object1.Remark != null && Object2.Remark != null )
			{
				if (Object1.Remark != Object2.Remark)
					equal = false;
			}
			else if (Object1.Remark == null ^ Object1.Remark == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VcsCompany entity, string propertyName)
		{
			switch (propertyName)
			{
				case "CompanyCode":
					return entity.CompanyCode;
				case "CompanyName":
					return entity.CompanyName;
				case "Address":
					return entity.Address;
				case "BillingAddress":
					return entity.BillingAddress;
				case "CompanyCity":
					return entity.CompanyCity;
				case "CompanyCountry":
					return entity.CompanyCountry;
				case "AccountCode":
					return entity.AccountCode;
				case "CompanyTel":
					return entity.CompanyTel;
				case "Attn":
					return entity.Attn;
				case "AttnEmail":
					return entity.AttnEmail;
				case "AttnPhone":
					return entity.AttnPhone;
				case "IsCcp":
					return entity.IsCcp;
				case "Remark":
					return entity.Remark;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VcsCompany, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- CompanyCode: {0}{13}- CompanyName: {1}{13}- Address: {2}{13}- BillingAddress: {3}{13}- CompanyCity: {4}{13}- CompanyCountry: {5}{13}- AccountCode: {6}{13}- CompanyTel: {7}{13}- Attn: {8}{13}- AttnEmail: {9}{13}- AttnPhone: {10}{13}- IsCcp: {11}{13}- Remark: {12}{13}", 
				this.CompanyCode,
				this.CompanyName,
				(this.Address == null) ? string.Empty : this.Address.ToString(),
			     
				(this.BillingAddress == null) ? string.Empty : this.BillingAddress.ToString(),
			     
				(this.CompanyCity == null) ? string.Empty : this.CompanyCity.ToString(),
			     
				(this.CompanyCountry == null) ? string.Empty : this.CompanyCountry.ToString(),
			     
				(this.AccountCode == null) ? string.Empty : this.AccountCode.ToString(),
			     
				(this.CompanyTel == null) ? string.Empty : this.CompanyTel.ToString(),
			     
				(this.Attn == null) ? string.Empty : this.Attn.ToString(),
			     
				(this.AttnEmail == null) ? string.Empty : this.AttnEmail.ToString(),
			     
				(this.AttnPhone == null) ? string.Empty : this.AttnPhone.ToString(),
			     
				this.IsCcp,
				(this.Remark == null) ? string.Empty : this.Remark.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VcsCompany columns.
	/// </summary>
	[Serializable]
	public enum VcsCompanyColumn
	{
		/// <summary>
		/// CompanyCode : 
		/// </summary>
		[EnumTextValue("CompanyCode")]
		[ColumnEnum("CompanyCode", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 9)]
		CompanyCode,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		CompanyName,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Address,
		/// <summary>
		/// BillingAddress : 
		/// </summary>
		[EnumTextValue("BillingAddress")]
		[ColumnEnum("BillingAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		BillingAddress,
		/// <summary>
		/// CompanyCity : 
		/// </summary>
		[EnumTextValue("CompanyCity")]
		[ColumnEnum("CompanyCity", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CompanyCity,
		/// <summary>
		/// CompanyCountry : 
		/// </summary>
		[EnumTextValue("CompanyCountry")]
		[ColumnEnum("CompanyCountry", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CompanyCountry,
		/// <summary>
		/// AccountCode : 
		/// </summary>
		[EnumTextValue("AccountCode")]
		[ColumnEnum("AccountCode", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		AccountCode,
		/// <summary>
		/// CompanyTel : 
		/// </summary>
		[EnumTextValue("CompanyTel")]
		[ColumnEnum("CompanyTel", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CompanyTel,
		/// <summary>
		/// Attn : 
		/// </summary>
		[EnumTextValue("Attn")]
		[ColumnEnum("Attn", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Attn,
		/// <summary>
		/// AttnEmail : 
		/// </summary>
		[EnumTextValue("AttnEmail")]
		[ColumnEnum("AttnEmail", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		AttnEmail,
		/// <summary>
		/// AttnPhone : 
		/// </summary>
		[EnumTextValue("AttnPhone")]
		[ColumnEnum("AttnPhone", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		AttnPhone,
		/// <summary>
		/// IsCCP : 
		/// </summary>
		[EnumTextValue("IsCCP")]
		[ColumnEnum("IsCCP", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsCcp,
		/// <summary>
		/// Remark : 
		/// </summary>
		[EnumTextValue("Remark")]
		[ColumnEnum("Remark", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Remark
	}//End enum

} // end namespace
