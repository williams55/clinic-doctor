/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VcsPatient.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace AppointmentSystem.Entities
{
	///<summary>
	/// An object representation of the 'VCSPatient' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VcsPatientBase")]
	public abstract partial class VcsPatientBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// PatientCode : 
		/// </summary>
		private System.String		  _patientCode = string.Empty;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		private System.String		  _firstName = string.Empty;
		
		/// <summary>
		/// MiddleName : 
		/// </summary>
		private System.String		  _middleName = null;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		private System.String		  _lastName = string.Empty;
		
		/// <summary>
		/// DateOfBirth : 
		/// </summary>
		private System.DateTime		  _dateOfBirth = DateTime.MinValue;
		
		/// <summary>
		/// Sex : 
		/// </summary>
		private System.String		  _sex = string.Empty;
		
		/// <summary>
		/// MemberType : 
		/// </summary>
		private System.String		  _memberType = string.Empty;
		
		/// <summary>
		/// MembershipSOSNumber : 
		/// </summary>
		private System.String		  _membershipSosNumber = null;
		
		/// <summary>
		/// MembershipSOSExpDate : 
		/// </summary>
		private System.DateTime?		  _membershipSosExpDate = null;
		
		/// <summary>
		/// Nationality : 
		/// </summary>
		private System.String		  _nationality = string.Empty;
		
		/// <summary>
		/// HomeStreet : 
		/// </summary>
		private System.String		  _homeStreet = null;
		
		/// <summary>
		/// HomeWard : 
		/// </summary>
		private System.String		  _homeWard = null;
		
		/// <summary>
		/// HomeDistrict : 
		/// </summary>
		private System.String		  _homeDistrict = null;
		
		/// <summary>
		/// HomeCity : 
		/// </summary>
		private System.String		  _homeCity = null;
		
		/// <summary>
		/// HomeCountry : 
		/// </summary>
		private System.String		  _homeCountry = null;
		
		/// <summary>
		/// CompanyCode : 
		/// </summary>
		private System.String		  _companyCode = null;
		
		/// <summary>
		/// BillingAddress : 
		/// </summary>
		private System.String		  _billingAddress = null;
		
		/// <summary>
		/// HomePhone : 
		/// </summary>
		private System.String		  _homePhone = null;
		
		/// <summary>
		/// MobilePhone : 
		/// </summary>
		private System.String		  _mobilePhone = null;
		
		/// <summary>
		/// CompanyPhone : 
		/// </summary>
		private System.String		  _companyPhone = null;
		
		/// <summary>
		/// Fax : 
		/// </summary>
		private System.String		  _fax = null;
		
		/// <summary>
		/// EmailAddress : 
		/// </summary>
		private System.String		  _emailAddress = null;
		
		/// <summary>
		/// CreateUser : 
		/// </summary>
		private System.String		  _createUser = null;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		private System.DateTime		  _createDate = DateTime.MinValue;
		
		/// <summary>
		/// ValidCorporate : 
		/// </summary>
		private System.Boolean		  _validCorporate = false;
		
		/// <summary>
		/// DefaultPaymentMode : 
		/// </summary>
		private System.String		  _defaultPaymentMode = string.Empty;
		
		/// <summary>
		/// InsuranceCardNumber : 
		/// </summary>
		private System.String		  _insuranceCardNumber = null;
		
		/// <summary>
		/// InsuranceCardExpDate : 
		/// </summary>
		private System.DateTime?		  _insuranceCardExpDate = null;
		
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		private System.Boolean		  _isDisabled = false;
		
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		private System.String		  _updateUser = null;
		
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		private System.DateTime		  _updateDate = DateTime.MinValue;
		
		/// <summary>
		/// ApptRemark : 
		/// </summary>
		private System.String		  _apptRemark = null;
		
		/// <summary>
		/// Remark : 
		/// </summary>
		private System.String		  _remark = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VcsPatientBase"/> instance.
		///</summary>
		public VcsPatientBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VcsPatientBase"/> instance.
		///</summary>
		///<param name="_patientCode"></param>
		///<param name="_firstName"></param>
		///<param name="_middleName"></param>
		///<param name="_lastName"></param>
		///<param name="_dateOfBirth"></param>
		///<param name="_sex"></param>
		///<param name="_memberType"></param>
		///<param name="_membershipSosNumber"></param>
		///<param name="_membershipSosExpDate"></param>
		///<param name="_nationality"></param>
		///<param name="_homeStreet"></param>
		///<param name="_homeWard"></param>
		///<param name="_homeDistrict"></param>
		///<param name="_homeCity"></param>
		///<param name="_homeCountry"></param>
		///<param name="_companyCode"></param>
		///<param name="_billingAddress"></param>
		///<param name="_homePhone"></param>
		///<param name="_mobilePhone"></param>
		///<param name="_companyPhone"></param>
		///<param name="_fax"></param>
		///<param name="_emailAddress"></param>
		///<param name="_createUser"></param>
		///<param name="_createDate"></param>
		///<param name="_validCorporate"></param>
		///<param name="_defaultPaymentMode"></param>
		///<param name="_insuranceCardNumber"></param>
		///<param name="_insuranceCardExpDate"></param>
		///<param name="_isDisabled"></param>
		///<param name="_updateUser"></param>
		///<param name="_updateDate"></param>
		///<param name="_apptRemark"></param>
		///<param name="_remark"></param>
		public VcsPatientBase(System.String _patientCode, System.String _firstName, System.String _middleName, System.String _lastName, System.DateTime _dateOfBirth, System.String _sex, System.String _memberType, System.String _membershipSosNumber, System.DateTime? _membershipSosExpDate, System.String _nationality, System.String _homeStreet, System.String _homeWard, System.String _homeDistrict, System.String _homeCity, System.String _homeCountry, System.String _companyCode, System.String _billingAddress, System.String _homePhone, System.String _mobilePhone, System.String _companyPhone, System.String _fax, System.String _emailAddress, System.String _createUser, System.DateTime _createDate, System.Boolean _validCorporate, System.String _defaultPaymentMode, System.String _insuranceCardNumber, System.DateTime? _insuranceCardExpDate, System.Boolean _isDisabled, System.String _updateUser, System.DateTime _updateDate, System.String _apptRemark, System.String _remark)
		{
			this._patientCode = _patientCode;
			this._firstName = _firstName;
			this._middleName = _middleName;
			this._lastName = _lastName;
			this._dateOfBirth = _dateOfBirth;
			this._sex = _sex;
			this._memberType = _memberType;
			this._membershipSosNumber = _membershipSosNumber;
			this._membershipSosExpDate = _membershipSosExpDate;
			this._nationality = _nationality;
			this._homeStreet = _homeStreet;
			this._homeWard = _homeWard;
			this._homeDistrict = _homeDistrict;
			this._homeCity = _homeCity;
			this._homeCountry = _homeCountry;
			this._companyCode = _companyCode;
			this._billingAddress = _billingAddress;
			this._homePhone = _homePhone;
			this._mobilePhone = _mobilePhone;
			this._companyPhone = _companyPhone;
			this._fax = _fax;
			this._emailAddress = _emailAddress;
			this._createUser = _createUser;
			this._createDate = _createDate;
			this._validCorporate = _validCorporate;
			this._defaultPaymentMode = _defaultPaymentMode;
			this._insuranceCardNumber = _insuranceCardNumber;
			this._insuranceCardExpDate = _insuranceCardExpDate;
			this._isDisabled = _isDisabled;
			this._updateUser = _updateUser;
			this._updateDate = _updateDate;
			this._apptRemark = _apptRemark;
			this._remark = _remark;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VcsPatient"/> instance.
		///</summary>
		///<param name="_patientCode"></param>
		///<param name="_firstName"></param>
		///<param name="_middleName"></param>
		///<param name="_lastName"></param>
		///<param name="_dateOfBirth"></param>
		///<param name="_sex"></param>
		///<param name="_memberType"></param>
		///<param name="_membershipSosNumber"></param>
		///<param name="_membershipSosExpDate"></param>
		///<param name="_nationality"></param>
		///<param name="_homeStreet"></param>
		///<param name="_homeWard"></param>
		///<param name="_homeDistrict"></param>
		///<param name="_homeCity"></param>
		///<param name="_homeCountry"></param>
		///<param name="_companyCode"></param>
		///<param name="_billingAddress"></param>
		///<param name="_homePhone"></param>
		///<param name="_mobilePhone"></param>
		///<param name="_companyPhone"></param>
		///<param name="_fax"></param>
		///<param name="_emailAddress"></param>
		///<param name="_createUser"></param>
		///<param name="_createDate"></param>
		///<param name="_validCorporate"></param>
		///<param name="_defaultPaymentMode"></param>
		///<param name="_insuranceCardNumber"></param>
		///<param name="_insuranceCardExpDate"></param>
		///<param name="_isDisabled"></param>
		///<param name="_updateUser"></param>
		///<param name="_updateDate"></param>
		///<param name="_apptRemark"></param>
		///<param name="_remark"></param>
		public static VcsPatient CreateVcsPatient(System.String _patientCode, System.String _firstName, System.String _middleName, System.String _lastName, System.DateTime _dateOfBirth, System.String _sex, System.String _memberType, System.String _membershipSosNumber, System.DateTime? _membershipSosExpDate, System.String _nationality, System.String _homeStreet, System.String _homeWard, System.String _homeDistrict, System.String _homeCity, System.String _homeCountry, System.String _companyCode, System.String _billingAddress, System.String _homePhone, System.String _mobilePhone, System.String _companyPhone, System.String _fax, System.String _emailAddress, System.String _createUser, System.DateTime _createDate, System.Boolean _validCorporate, System.String _defaultPaymentMode, System.String _insuranceCardNumber, System.DateTime? _insuranceCardExpDate, System.Boolean _isDisabled, System.String _updateUser, System.DateTime _updateDate, System.String _apptRemark, System.String _remark)
		{
			VcsPatient newVcsPatient = new VcsPatient();
			newVcsPatient.PatientCode = _patientCode;
			newVcsPatient.FirstName = _firstName;
			newVcsPatient.MiddleName = _middleName;
			newVcsPatient.LastName = _lastName;
			newVcsPatient.DateOfBirth = _dateOfBirth;
			newVcsPatient.Sex = _sex;
			newVcsPatient.MemberType = _memberType;
			newVcsPatient.MembershipSosNumber = _membershipSosNumber;
			newVcsPatient.MembershipSosExpDate = _membershipSosExpDate;
			newVcsPatient.Nationality = _nationality;
			newVcsPatient.HomeStreet = _homeStreet;
			newVcsPatient.HomeWard = _homeWard;
			newVcsPatient.HomeDistrict = _homeDistrict;
			newVcsPatient.HomeCity = _homeCity;
			newVcsPatient.HomeCountry = _homeCountry;
			newVcsPatient.CompanyCode = _companyCode;
			newVcsPatient.BillingAddress = _billingAddress;
			newVcsPatient.HomePhone = _homePhone;
			newVcsPatient.MobilePhone = _mobilePhone;
			newVcsPatient.CompanyPhone = _companyPhone;
			newVcsPatient.Fax = _fax;
			newVcsPatient.EmailAddress = _emailAddress;
			newVcsPatient.CreateUser = _createUser;
			newVcsPatient.CreateDate = _createDate;
			newVcsPatient.ValidCorporate = _validCorporate;
			newVcsPatient.DefaultPaymentMode = _defaultPaymentMode;
			newVcsPatient.InsuranceCardNumber = _insuranceCardNumber;
			newVcsPatient.InsuranceCardExpDate = _insuranceCardExpDate;
			newVcsPatient.IsDisabled = _isDisabled;
			newVcsPatient.UpdateUser = _updateUser;
			newVcsPatient.UpdateDate = _updateDate;
			newVcsPatient.ApptRemark = _apptRemark;
			newVcsPatient.Remark = _remark;
			return newVcsPatient;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the PatientCode property. 
		///		
		/// </summary>
		/// <value>This type is nchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PatientCode
		{
			get
			{
				return this._patientCode; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "PatientCode does not allow null values.");
				if (_patientCode == value)
					return;
					
				this._patientCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("PatientCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FirstName
		{
			get
			{
				return this._firstName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "FirstName does not allow null values.");
				if (_firstName == value)
					return;
					
				this._firstName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MiddleName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MiddleName
		{
			get
			{
				return this._middleName; 
			}
			set
			{
				if (_middleName == value)
					return;
					
				this._middleName = value;
				this._isDirty = true;
				
				OnPropertyChanged("MiddleName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LastName
		{
			get
			{
				return this._lastName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "LastName does not allow null values.");
				if (_lastName == value)
					return;
					
				this._lastName = value;
				this._isDirty = true;
				
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DateOfBirth property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime DateOfBirth
		{
			get
			{
				return this._dateOfBirth; 
			}
			set
			{
				if (_dateOfBirth == value)
					return;
					
				this._dateOfBirth = value;
				this._isDirty = true;
				
				OnPropertyChanged("DateOfBirth");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Sex property. 
		///		
		/// </summary>
		/// <value>This type is char</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Sex
		{
			get
			{
				return this._sex; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Sex does not allow null values.");
				if (_sex == value)
					return;
					
				this._sex = value;
				this._isDirty = true;
				
				OnPropertyChanged("Sex");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MemberType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MemberType
		{
			get
			{
				return this._memberType; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "MemberType does not allow null values.");
				if (_memberType == value)
					return;
					
				this._memberType = value;
				this._isDirty = true;
				
				OnPropertyChanged("MemberType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MembershipSOSNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MembershipSosNumber
		{
			get
			{
				return this._membershipSosNumber; 
			}
			set
			{
				if (_membershipSosNumber == value)
					return;
					
				this._membershipSosNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("MembershipSosNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MembershipSOSExpDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMembershipSosExpDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? MembershipSosExpDate
		{
			get
			{
				return this._membershipSosExpDate; 
			}
			set
			{
				if (_membershipSosExpDate == value && MembershipSosExpDate != null )
					return;
					
				this._membershipSosExpDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("MembershipSosExpDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Nationality property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Nationality
		{
			get
			{
				return this._nationality; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Nationality does not allow null values.");
				if (_nationality == value)
					return;
					
				this._nationality = value;
				this._isDirty = true;
				
				OnPropertyChanged("Nationality");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HomeStreet property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HomeStreet
		{
			get
			{
				return this._homeStreet; 
			}
			set
			{
				if (_homeStreet == value)
					return;
					
				this._homeStreet = value;
				this._isDirty = true;
				
				OnPropertyChanged("HomeStreet");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HomeWard property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HomeWard
		{
			get
			{
				return this._homeWard; 
			}
			set
			{
				if (_homeWard == value)
					return;
					
				this._homeWard = value;
				this._isDirty = true;
				
				OnPropertyChanged("HomeWard");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HomeDistrict property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HomeDistrict
		{
			get
			{
				return this._homeDistrict; 
			}
			set
			{
				if (_homeDistrict == value)
					return;
					
				this._homeDistrict = value;
				this._isDirty = true;
				
				OnPropertyChanged("HomeDistrict");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HomeCity property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HomeCity
		{
			get
			{
				return this._homeCity; 
			}
			set
			{
				if (_homeCity == value)
					return;
					
				this._homeCity = value;
				this._isDirty = true;
				
				OnPropertyChanged("HomeCity");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HomeCountry property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HomeCountry
		{
			get
			{
				return this._homeCountry; 
			}
			set
			{
				if (_homeCountry == value)
					return;
					
				this._homeCountry = value;
				this._isDirty = true;
				
				OnPropertyChanged("HomeCountry");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CompanyCode property. 
		///		
		/// </summary>
		/// <value>This type is nchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CompanyCode
		{
			get
			{
				return this._companyCode; 
			}
			set
			{
				if (_companyCode == value)
					return;
					
				this._companyCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompanyCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BillingAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String BillingAddress
		{
			get
			{
				return this._billingAddress; 
			}
			set
			{
				if (_billingAddress == value)
					return;
					
				this._billingAddress = value;
				this._isDirty = true;
				
				OnPropertyChanged("BillingAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HomePhone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HomePhone
		{
			get
			{
				return this._homePhone; 
			}
			set
			{
				if (_homePhone == value)
					return;
					
				this._homePhone = value;
				this._isDirty = true;
				
				OnPropertyChanged("HomePhone");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MobilePhone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MobilePhone
		{
			get
			{
				return this._mobilePhone; 
			}
			set
			{
				if (_mobilePhone == value)
					return;
					
				this._mobilePhone = value;
				this._isDirty = true;
				
				OnPropertyChanged("MobilePhone");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CompanyPhone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CompanyPhone
		{
			get
			{
				return this._companyPhone; 
			}
			set
			{
				if (_companyPhone == value)
					return;
					
				this._companyPhone = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompanyPhone");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Fax property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Fax
		{
			get
			{
				return this._fax; 
			}
			set
			{
				if (_fax == value)
					return;
					
				this._fax = value;
				this._isDirty = true;
				
				OnPropertyChanged("Fax");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EmailAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String EmailAddress
		{
			get
			{
				return this._emailAddress; 
			}
			set
			{
				if (_emailAddress == value)
					return;
					
				this._emailAddress = value;
				this._isDirty = true;
				
				OnPropertyChanged("EmailAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CreateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CreateUser
		{
			get
			{
				return this._createUser; 
			}
			set
			{
				if (_createUser == value)
					return;
					
				this._createUser = value;
				this._isDirty = true;
				
				OnPropertyChanged("CreateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime CreateDate
		{
			get
			{
				return this._createDate; 
			}
			set
			{
				if (_createDate == value)
					return;
					
				this._createDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ValidCorporate property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean ValidCorporate
		{
			get
			{
				return this._validCorporate; 
			}
			set
			{
				if (_validCorporate == value)
					return;
					
				this._validCorporate = value;
				this._isDirty = true;
				
				OnPropertyChanged("ValidCorporate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DefaultPaymentMode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DefaultPaymentMode
		{
			get
			{
				return this._defaultPaymentMode; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "DefaultPaymentMode does not allow null values.");
				if (_defaultPaymentMode == value)
					return;
					
				this._defaultPaymentMode = value;
				this._isDirty = true;
				
				OnPropertyChanged("DefaultPaymentMode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the InsuranceCardNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String InsuranceCardNumber
		{
			get
			{
				return this._insuranceCardNumber; 
			}
			set
			{
				if (_insuranceCardNumber == value)
					return;
					
				this._insuranceCardNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("InsuranceCardNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the InsuranceCardExpDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsInsuranceCardExpDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? InsuranceCardExpDate
		{
			get
			{
				return this._insuranceCardExpDate; 
			}
			set
			{
				if (_insuranceCardExpDate == value && InsuranceCardExpDate != null )
					return;
					
				this._insuranceCardExpDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("InsuranceCardExpDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the IsDisabled property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean IsDisabled
		{
			get
			{
				return this._isDisabled; 
			}
			set
			{
				if (_isDisabled == value)
					return;
					
				this._isDisabled = value;
				this._isDirty = true;
				
				OnPropertyChanged("IsDisabled");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UpdateUser property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UpdateUser
		{
			get
			{
				return this._updateUser; 
			}
			set
			{
				if (_updateUser == value)
					return;
					
				this._updateUser = value;
				this._isDirty = true;
				
				OnPropertyChanged("UpdateUser");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UpdateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime UpdateDate
		{
			get
			{
				return this._updateDate; 
			}
			set
			{
				if (_updateDate == value)
					return;
					
				this._updateDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("UpdateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ApptRemark property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ApptRemark
		{
			get
			{
				return this._apptRemark; 
			}
			set
			{
				if (_apptRemark == value)
					return;
					
				this._apptRemark = value;
				this._isDirty = true;
				
				OnPropertyChanged("ApptRemark");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Remark property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Remark
		{
			get
			{
				return this._remark; 
			}
			set
			{
				if (_remark == value)
					return;
					
				this._remark = value;
				this._isDirty = true;
				
				OnPropertyChanged("Remark");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "VCSPatient"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VcsPatientBase Entity 
		///</summary>
		public virtual VcsPatientBase Copy()
		{
			//shallow copy entity
			VcsPatient copy = new VcsPatient();
				copy.PatientCode = this.PatientCode;
				copy.FirstName = this.FirstName;
				copy.MiddleName = this.MiddleName;
				copy.LastName = this.LastName;
				copy.DateOfBirth = this.DateOfBirth;
				copy.Sex = this.Sex;
				copy.MemberType = this.MemberType;
				copy.MembershipSosNumber = this.MembershipSosNumber;
				copy.MembershipSosExpDate = this.MembershipSosExpDate;
				copy.Nationality = this.Nationality;
				copy.HomeStreet = this.HomeStreet;
				copy.HomeWard = this.HomeWard;
				copy.HomeDistrict = this.HomeDistrict;
				copy.HomeCity = this.HomeCity;
				copy.HomeCountry = this.HomeCountry;
				copy.CompanyCode = this.CompanyCode;
				copy.BillingAddress = this.BillingAddress;
				copy.HomePhone = this.HomePhone;
				copy.MobilePhone = this.MobilePhone;
				copy.CompanyPhone = this.CompanyPhone;
				copy.Fax = this.Fax;
				copy.EmailAddress = this.EmailAddress;
				copy.CreateUser = this.CreateUser;
				copy.CreateDate = this.CreateDate;
				copy.ValidCorporate = this.ValidCorporate;
				copy.DefaultPaymentMode = this.DefaultPaymentMode;
				copy.InsuranceCardNumber = this.InsuranceCardNumber;
				copy.InsuranceCardExpDate = this.InsuranceCardExpDate;
				copy.IsDisabled = this.IsDisabled;
				copy.UpdateUser = this.UpdateUser;
				copy.UpdateDate = this.UpdateDate;
				copy.ApptRemark = this.ApptRemark;
				copy.Remark = this.Remark;
			copy.AcceptChanges();
			return (VcsPatient)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VcsPatientBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VcsPatientBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VcsPatientBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VcsPatientBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VcsPatientBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VcsPatientBase Object1, VcsPatientBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.PatientCode != Object2.PatientCode)
				equal = false;
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.MiddleName != null && Object2.MiddleName != null )
			{
				if (Object1.MiddleName != Object2.MiddleName)
					equal = false;
			}
			else if (Object1.MiddleName == null ^ Object1.MiddleName == null )
			{
				equal = false;
			}
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if (Object1.DateOfBirth != Object2.DateOfBirth)
				equal = false;
			if (Object1.Sex != Object2.Sex)
				equal = false;
			if (Object1.MemberType != Object2.MemberType)
				equal = false;
			if (Object1.MembershipSosNumber != null && Object2.MembershipSosNumber != null )
			{
				if (Object1.MembershipSosNumber != Object2.MembershipSosNumber)
					equal = false;
			}
			else if (Object1.MembershipSosNumber == null ^ Object1.MembershipSosNumber == null )
			{
				equal = false;
			}
			if (Object1.MembershipSosExpDate != null && Object2.MembershipSosExpDate != null )
			{
				if (Object1.MembershipSosExpDate != Object2.MembershipSosExpDate)
					equal = false;
			}
			else if (Object1.MembershipSosExpDate == null ^ Object1.MembershipSosExpDate == null )
			{
				equal = false;
			}
			if (Object1.Nationality != Object2.Nationality)
				equal = false;
			if (Object1.HomeStreet != null && Object2.HomeStreet != null )
			{
				if (Object1.HomeStreet != Object2.HomeStreet)
					equal = false;
			}
			else if (Object1.HomeStreet == null ^ Object1.HomeStreet == null )
			{
				equal = false;
			}
			if (Object1.HomeWard != null && Object2.HomeWard != null )
			{
				if (Object1.HomeWard != Object2.HomeWard)
					equal = false;
			}
			else if (Object1.HomeWard == null ^ Object1.HomeWard == null )
			{
				equal = false;
			}
			if (Object1.HomeDistrict != null && Object2.HomeDistrict != null )
			{
				if (Object1.HomeDistrict != Object2.HomeDistrict)
					equal = false;
			}
			else if (Object1.HomeDistrict == null ^ Object1.HomeDistrict == null )
			{
				equal = false;
			}
			if (Object1.HomeCity != null && Object2.HomeCity != null )
			{
				if (Object1.HomeCity != Object2.HomeCity)
					equal = false;
			}
			else if (Object1.HomeCity == null ^ Object1.HomeCity == null )
			{
				equal = false;
			}
			if (Object1.HomeCountry != null && Object2.HomeCountry != null )
			{
				if (Object1.HomeCountry != Object2.HomeCountry)
					equal = false;
			}
			else if (Object1.HomeCountry == null ^ Object1.HomeCountry == null )
			{
				equal = false;
			}
			if (Object1.CompanyCode != null && Object2.CompanyCode != null )
			{
				if (Object1.CompanyCode != Object2.CompanyCode)
					equal = false;
			}
			else if (Object1.CompanyCode == null ^ Object1.CompanyCode == null )
			{
				equal = false;
			}
			if (Object1.BillingAddress != null && Object2.BillingAddress != null )
			{
				if (Object1.BillingAddress != Object2.BillingAddress)
					equal = false;
			}
			else if (Object1.BillingAddress == null ^ Object1.BillingAddress == null )
			{
				equal = false;
			}
			if (Object1.HomePhone != null && Object2.HomePhone != null )
			{
				if (Object1.HomePhone != Object2.HomePhone)
					equal = false;
			}
			else if (Object1.HomePhone == null ^ Object1.HomePhone == null )
			{
				equal = false;
			}
			if (Object1.MobilePhone != null && Object2.MobilePhone != null )
			{
				if (Object1.MobilePhone != Object2.MobilePhone)
					equal = false;
			}
			else if (Object1.MobilePhone == null ^ Object1.MobilePhone == null )
			{
				equal = false;
			}
			if (Object1.CompanyPhone != null && Object2.CompanyPhone != null )
			{
				if (Object1.CompanyPhone != Object2.CompanyPhone)
					equal = false;
			}
			else if (Object1.CompanyPhone == null ^ Object1.CompanyPhone == null )
			{
				equal = false;
			}
			if (Object1.Fax != null && Object2.Fax != null )
			{
				if (Object1.Fax != Object2.Fax)
					equal = false;
			}
			else if (Object1.Fax == null ^ Object1.Fax == null )
			{
				equal = false;
			}
			if (Object1.EmailAddress != null && Object2.EmailAddress != null )
			{
				if (Object1.EmailAddress != Object2.EmailAddress)
					equal = false;
			}
			else if (Object1.EmailAddress == null ^ Object1.EmailAddress == null )
			{
				equal = false;
			}
			if (Object1.CreateUser != null && Object2.CreateUser != null )
			{
				if (Object1.CreateUser != Object2.CreateUser)
					equal = false;
			}
			else if (Object1.CreateUser == null ^ Object1.CreateUser == null )
			{
				equal = false;
			}
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if (Object1.ValidCorporate != Object2.ValidCorporate)
				equal = false;
			if (Object1.DefaultPaymentMode != Object2.DefaultPaymentMode)
				equal = false;
			if (Object1.InsuranceCardNumber != null && Object2.InsuranceCardNumber != null )
			{
				if (Object1.InsuranceCardNumber != Object2.InsuranceCardNumber)
					equal = false;
			}
			else if (Object1.InsuranceCardNumber == null ^ Object1.InsuranceCardNumber == null )
			{
				equal = false;
			}
			if (Object1.InsuranceCardExpDate != null && Object2.InsuranceCardExpDate != null )
			{
				if (Object1.InsuranceCardExpDate != Object2.InsuranceCardExpDate)
					equal = false;
			}
			else if (Object1.InsuranceCardExpDate == null ^ Object1.InsuranceCardExpDate == null )
			{
				equal = false;
			}
			if (Object1.IsDisabled != Object2.IsDisabled)
				equal = false;
			if (Object1.UpdateUser != null && Object2.UpdateUser != null )
			{
				if (Object1.UpdateUser != Object2.UpdateUser)
					equal = false;
			}
			else if (Object1.UpdateUser == null ^ Object1.UpdateUser == null )
			{
				equal = false;
			}
			if (Object1.UpdateDate != Object2.UpdateDate)
				equal = false;
			if (Object1.ApptRemark != null && Object2.ApptRemark != null )
			{
				if (Object1.ApptRemark != Object2.ApptRemark)
					equal = false;
			}
			else if (Object1.ApptRemark == null ^ Object1.ApptRemark == null )
			{
				equal = false;
			}
			if (Object1.Remark != null && Object2.Remark != null )
			{
				if (Object1.Remark != Object2.Remark)
					equal = false;
			}
			else if (Object1.Remark == null ^ Object1.Remark == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VcsPatient entity, string propertyName)
		{
			switch (propertyName)
			{
				case "PatientCode":
					return entity.PatientCode;
				case "FirstName":
					return entity.FirstName;
				case "MiddleName":
					return entity.MiddleName;
				case "LastName":
					return entity.LastName;
				case "DateOfBirth":
					return entity.DateOfBirth;
				case "Sex":
					return entity.Sex;
				case "MemberType":
					return entity.MemberType;
				case "MembershipSosNumber":
					return entity.MembershipSosNumber;
				case "MembershipSosExpDate":
					return entity.MembershipSosExpDate;
				case "Nationality":
					return entity.Nationality;
				case "HomeStreet":
					return entity.HomeStreet;
				case "HomeWard":
					return entity.HomeWard;
				case "HomeDistrict":
					return entity.HomeDistrict;
				case "HomeCity":
					return entity.HomeCity;
				case "HomeCountry":
					return entity.HomeCountry;
				case "CompanyCode":
					return entity.CompanyCode;
				case "BillingAddress":
					return entity.BillingAddress;
				case "HomePhone":
					return entity.HomePhone;
				case "MobilePhone":
					return entity.MobilePhone;
				case "CompanyPhone":
					return entity.CompanyPhone;
				case "Fax":
					return entity.Fax;
				case "EmailAddress":
					return entity.EmailAddress;
				case "CreateUser":
					return entity.CreateUser;
				case "CreateDate":
					return entity.CreateDate;
				case "ValidCorporate":
					return entity.ValidCorporate;
				case "DefaultPaymentMode":
					return entity.DefaultPaymentMode;
				case "InsuranceCardNumber":
					return entity.InsuranceCardNumber;
				case "InsuranceCardExpDate":
					return entity.InsuranceCardExpDate;
				case "IsDisabled":
					return entity.IsDisabled;
				case "UpdateUser":
					return entity.UpdateUser;
				case "UpdateDate":
					return entity.UpdateDate;
				case "ApptRemark":
					return entity.ApptRemark;
				case "Remark":
					return entity.Remark;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VcsPatient, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{34}{33}- PatientCode: {0}{33}- FirstName: {1}{33}- MiddleName: {2}{33}- LastName: {3}{33}- DateOfBirth: {4}{33}- Sex: {5}{33}- MemberType: {6}{33}- MembershipSosNumber: {7}{33}- MembershipSosExpDate: {8}{33}- Nationality: {9}{33}- HomeStreet: {10}{33}- HomeWard: {11}{33}- HomeDistrict: {12}{33}- HomeCity: {13}{33}- HomeCountry: {14}{33}- CompanyCode: {15}{33}- BillingAddress: {16}{33}- HomePhone: {17}{33}- MobilePhone: {18}{33}- CompanyPhone: {19}{33}- Fax: {20}{33}- EmailAddress: {21}{33}- CreateUser: {22}{33}- CreateDate: {23}{33}- ValidCorporate: {24}{33}- DefaultPaymentMode: {25}{33}- InsuranceCardNumber: {26}{33}- InsuranceCardExpDate: {27}{33}- IsDisabled: {28}{33}- UpdateUser: {29}{33}- UpdateDate: {30}{33}- ApptRemark: {31}{33}- Remark: {32}{33}", 
				this.PatientCode,
				this.FirstName,
				(this.MiddleName == null) ? string.Empty : this.MiddleName.ToString(),
			     
				this.LastName,
				this.DateOfBirth,
				this.Sex,
				this.MemberType,
				(this.MembershipSosNumber == null) ? string.Empty : this.MembershipSosNumber.ToString(),
			     
				(this.MembershipSosExpDate == null) ? string.Empty : this.MembershipSosExpDate.ToString(),
			     
				this.Nationality,
				(this.HomeStreet == null) ? string.Empty : this.HomeStreet.ToString(),
			     
				(this.HomeWard == null) ? string.Empty : this.HomeWard.ToString(),
			     
				(this.HomeDistrict == null) ? string.Empty : this.HomeDistrict.ToString(),
			     
				(this.HomeCity == null) ? string.Empty : this.HomeCity.ToString(),
			     
				(this.HomeCountry == null) ? string.Empty : this.HomeCountry.ToString(),
			     
				(this.CompanyCode == null) ? string.Empty : this.CompanyCode.ToString(),
			     
				(this.BillingAddress == null) ? string.Empty : this.BillingAddress.ToString(),
			     
				(this.HomePhone == null) ? string.Empty : this.HomePhone.ToString(),
			     
				(this.MobilePhone == null) ? string.Empty : this.MobilePhone.ToString(),
			     
				(this.CompanyPhone == null) ? string.Empty : this.CompanyPhone.ToString(),
			     
				(this.Fax == null) ? string.Empty : this.Fax.ToString(),
			     
				(this.EmailAddress == null) ? string.Empty : this.EmailAddress.ToString(),
			     
				(this.CreateUser == null) ? string.Empty : this.CreateUser.ToString(),
			     
				this.CreateDate,
				this.ValidCorporate,
				this.DefaultPaymentMode,
				(this.InsuranceCardNumber == null) ? string.Empty : this.InsuranceCardNumber.ToString(),
			     
				(this.InsuranceCardExpDate == null) ? string.Empty : this.InsuranceCardExpDate.ToString(),
			     
				this.IsDisabled,
				(this.UpdateUser == null) ? string.Empty : this.UpdateUser.ToString(),
			     
				this.UpdateDate,
				(this.ApptRemark == null) ? string.Empty : this.ApptRemark.ToString(),
			     
				(this.Remark == null) ? string.Empty : this.Remark.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VcsPatient columns.
	/// </summary>
	[Serializable]
	public enum VcsPatientColumn
	{
		/// <summary>
		/// PatientCode : 
		/// </summary>
		[EnumTextValue("PatientCode")]
		[ColumnEnum("PatientCode", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 11)]
		PatientCode,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		FirstName,
		/// <summary>
		/// MiddleName : 
		/// </summary>
		[EnumTextValue("MiddleName")]
		[ColumnEnum("MiddleName", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		MiddleName,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		LastName,
		/// <summary>
		/// DateOfBirth : 
		/// </summary>
		[EnumTextValue("DateOfBirth")]
		[ColumnEnum("DateOfBirth", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DateOfBirth,
		/// <summary>
		/// Sex : 
		/// </summary>
		[EnumTextValue("Sex")]
		[ColumnEnum("Sex", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 1)]
		Sex,
		/// <summary>
		/// MemberType : 
		/// </summary>
		[EnumTextValue("MemberType")]
		[ColumnEnum("MemberType", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		MemberType,
		/// <summary>
		/// MembershipSOSNumber : 
		/// </summary>
		[EnumTextValue("MembershipSOSNumber")]
		[ColumnEnum("MembershipSOSNumber", typeof(System.String), System.Data.DbType.String, false, false, true, 25)]
		MembershipSosNumber,
		/// <summary>
		/// MembershipSOSExpDate : 
		/// </summary>
		[EnumTextValue("MembershipSOSExpDate")]
		[ColumnEnum("MembershipSOSExpDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		MembershipSosExpDate,
		/// <summary>
		/// Nationality : 
		/// </summary>
		[EnumTextValue("Nationality")]
		[ColumnEnum("Nationality", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Nationality,
		/// <summary>
		/// HomeStreet : 
		/// </summary>
		[EnumTextValue("HomeStreet")]
		[ColumnEnum("HomeStreet", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		HomeStreet,
		/// <summary>
		/// HomeWard : 
		/// </summary>
		[EnumTextValue("HomeWard")]
		[ColumnEnum("HomeWard", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		HomeWard,
		/// <summary>
		/// HomeDistrict : 
		/// </summary>
		[EnumTextValue("HomeDistrict")]
		[ColumnEnum("HomeDistrict", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		HomeDistrict,
		/// <summary>
		/// HomeCity : 
		/// </summary>
		[EnumTextValue("HomeCity")]
		[ColumnEnum("HomeCity", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		HomeCity,
		/// <summary>
		/// HomeCountry : 
		/// </summary>
		[EnumTextValue("HomeCountry")]
		[ColumnEnum("HomeCountry", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		HomeCountry,
		/// <summary>
		/// CompanyCode : 
		/// </summary>
		[EnumTextValue("CompanyCode")]
		[ColumnEnum("CompanyCode", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 9)]
		CompanyCode,
		/// <summary>
		/// BillingAddress : 
		/// </summary>
		[EnumTextValue("BillingAddress")]
		[ColumnEnum("BillingAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		BillingAddress,
		/// <summary>
		/// HomePhone : 
		/// </summary>
		[EnumTextValue("HomePhone")]
		[ColumnEnum("HomePhone", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		HomePhone,
		/// <summary>
		/// MobilePhone : 
		/// </summary>
		[EnumTextValue("MobilePhone")]
		[ColumnEnum("MobilePhone", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		MobilePhone,
		/// <summary>
		/// CompanyPhone : 
		/// </summary>
		[EnumTextValue("CompanyPhone")]
		[ColumnEnum("CompanyPhone", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		CompanyPhone,
		/// <summary>
		/// Fax : 
		/// </summary>
		[EnumTextValue("Fax")]
		[ColumnEnum("Fax", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		Fax,
		/// <summary>
		/// EmailAddress : 
		/// </summary>
		[EnumTextValue("EmailAddress")]
		[ColumnEnum("EmailAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		EmailAddress,
		/// <summary>
		/// CreateUser : 
		/// </summary>
		[EnumTextValue("CreateUser")]
		[ColumnEnum("CreateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CreateUser,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("CreateDate")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate,
		/// <summary>
		/// ValidCorporate : 
		/// </summary>
		[EnumTextValue("ValidCorporate")]
		[ColumnEnum("ValidCorporate", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		ValidCorporate,
		/// <summary>
		/// DefaultPaymentMode : 
		/// </summary>
		[EnumTextValue("DefaultPaymentMode")]
		[ColumnEnum("DefaultPaymentMode", typeof(System.String), System.Data.DbType.String, false, false, false, 6)]
		DefaultPaymentMode,
		/// <summary>
		/// InsuranceCardNumber : 
		/// </summary>
		[EnumTextValue("InsuranceCardNumber")]
		[ColumnEnum("InsuranceCardNumber", typeof(System.String), System.Data.DbType.String, false, false, true, 25)]
		InsuranceCardNumber,
		/// <summary>
		/// InsuranceCardExpDate : 
		/// </summary>
		[EnumTextValue("InsuranceCardExpDate")]
		[ColumnEnum("InsuranceCardExpDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		InsuranceCardExpDate,
		/// <summary>
		/// IsDisabled : 
		/// </summary>
		[EnumTextValue("IsDisabled")]
		[ColumnEnum("IsDisabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsDisabled,
		/// <summary>
		/// UpdateUser : 
		/// </summary>
		[EnumTextValue("UpdateUser")]
		[ColumnEnum("UpdateUser", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		UpdateUser,
		/// <summary>
		/// UpdateDate : 
		/// </summary>
		[EnumTextValue("UpdateDate")]
		[ColumnEnum("UpdateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		UpdateDate,
		/// <summary>
		/// ApptRemark : 
		/// </summary>
		[EnumTextValue("ApptRemark")]
		[ColumnEnum("ApptRemark", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		ApptRemark,
		/// <summary>
		/// Remark : 
		/// </summary>
		[EnumTextValue("Remark")]
		[ColumnEnum("Remark", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Remark
	}//End enum

} // end namespace
