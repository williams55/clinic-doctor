/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VcsPatient.cs instead.
*/

#region Using directives

using System;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using AppointmentSystem.Entities;
using AppointmentSystem.Data.Bases;

#endregion

namespace AppointmentSystem.Data.SqlClient
{
/// <summary>
///	This class is the base repository for the CRUD operations on the VcsPatient objects.
/// </summary>
public abstract partial class SqlVcsPatientProviderBase : VcsPatientProviderBase
{
	
	string _connectionString;
    bool _useStoredProcedure;
    string _providerInvariantName;
		
	#region Constructors
	
	/// <summary>
	/// Creates a new <see cref="SqlVcsPatientProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	protected SqlVcsPatientProviderBase()
	{		
	}
	
	/// <summary>
	/// Creates a new <see cref="SqlVcsPatientProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlVcsPatientProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
			
	#endregion 
	
	#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
		
	
	#region GetAll Methods
	
	/// <summary>
	/// Gets All rows from the DataSource.
	/// </summary>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="count">The total number of rows in the data source.</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of VcsPatient objects.</returns>
	public override VList<VcsPatient> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
	{
		SqlDatabase database = new SqlDatabase(this._connectionString);
		DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.VCSPatient_Get_List", _useStoredProcedure);
		
		IDataReader reader = null;
		//Create Collection
		VList<VcsPatient> rows = new VList<VcsPatient>();
		
		try
		{
			if (transactionManager != null)
			{
				reader = Utility.ExecuteReader(transactionManager, commandWrapper);
			}
			else
			{
				reader = Utility.ExecuteReader(database, commandWrapper);
			}
		
			Fill(reader, rows, start, pageLength);
			count = rows.Count;

			if(reader.NextResult())
			{
				if(reader.Read())
				{
					count = reader.GetInt32(0);
				}
			}
		}
		finally
		{
			if (reader != null)
				reader.Close();
		}
		return rows;
	}//end getall
	
	#endregion
	
	#region Get Methods
			
	/// <summary>
	/// Gets a page of rows from the DataSource.
	/// </summary>
	/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
	/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="count">The total number of rows in the data source.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remarks></remarks>
	/// <returns>Returns a typed collection of VcsPatient objects.</returns>
	public override VList<VcsPatient> Get(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
	{
		SqlDatabase database = new SqlDatabase(this._connectionString);
		DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.VCSPatient_Get", _useStoredProcedure);

		database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
		database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
	
		IDataReader reader = null;
		//Create Collection
		VList<VcsPatient> rows = new VList<VcsPatient>();
		
		try
		{
			if (transactionManager != null)
			{
				reader = Utility.ExecuteReader(transactionManager,commandWrapper);
			}
			else
			{
				reader = Utility.ExecuteReader(database, commandWrapper);
			}

			Fill(reader, rows, start, pageLength);
			count = rows.Count;

			if(reader.NextResult())
			{
				if(reader.Read())
				{
					count = reader.GetInt32(0);
				}
			}
		}
		finally
		{
		     if (reader != null)
		     	 reader.Close();
		}
		return rows;
	}
	
	#endregion
	
	#region Find Methods
	
	#region Parameterized Find Methods
	
	/// <summary>
	/// Returns rows from the DataSource that meet the parameter conditions.
	/// </summary>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
	/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="count">out. The number of rows that match this query.</param>
	/// <returns>Returns a typed collection of VcsPatient objects.</returns>
	public override VList<VcsPatient> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
	{
		SqlFilterParameterCollection filter = null;
		
		if (parameters == null)
			filter = new SqlFilterParameterCollection();
		else 
			filter = parameters.GetParameters();
			
		SqlDatabase database = new SqlDatabase(this._connectionString);
		DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.VCSPatient_Find_Dynamic", typeof(VcsPatientColumn), filter, orderBy, start, pageLength);
		
		SqlFilterParameter param;

		for ( int i = 0; i < filter.Count; i++ )
		{
			param = filter[i];
			database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
		}

		VList<VcsPatient> rows = new VList<VcsPatient>();
		IDataReader reader = null;
		
		try
		{
			if ( transactionManager != null )
			{
				reader = Utility.ExecuteReader(transactionManager, commandWrapper);
			}
			else
			{
				reader = Utility.ExecuteReader(database, commandWrapper);
			}
			
			Fill(reader, rows, start, pageLength);
			count = rows.Count;
			
			if ( reader.NextResult() )
			{
				if ( reader.Read() )
				{
					count = reader.GetInt32(0);
				}
			}
		}
		finally
		{
			if ( reader != null )
				reader.Close();
		}
		
		return rows;
	}
	
	#endregion Parameterized Find Methods

	#endregion 

	#region Custom Methods
	

	#region _VCSPatient_GetByPatientCode
	
	/// <summary>
	///	This method wraps the '_VCSPatient_GetByPatientCode' stored procedure. 
	/// </summary>
		/// <param name="patientCode"> A <c>System.String</c> instance.</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remark>This method is generated from a stored procedure.</remark>
	/// <returns>A <see cref="VList&lt;VcsPatient&gt;"/> instance.</returns>
	public override VList<VcsPatient> GetByPatientCode(TransactionManager transactionManager, int start, int pageLength, System.String patientCode)
	{
		SqlDatabase database = new SqlDatabase(this._connectionString);
		DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo._VCSPatient_GetByPatientCode", true);
		
		database.AddInParameter(commandWrapper, "@PatientCode", DbType.StringFixedLength,  patientCode );
		

		try
		{
			
			IDataReader reader = null;

			if (transactionManager != null)
			{	
				reader = Utility.ExecuteReader(transactionManager, commandWrapper);
			}
			else
			{
				reader = Utility.ExecuteReader(database, commandWrapper);
			}			
			
			// Create Collection
				VList<VcsPatient> rows = new VList<VcsPatient>();
				try
				{  
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				
				
				return rows;
		}
		catch(SqlException ex)
		{
			throw new DataException("A data access error occured, please check inner SqlException.", ex);
		}
	}
	#endregion

	#region _VCSPatient_Update
	
	/// <summary>
	///	This method wraps the '_VCSPatient_Update' stored procedure. 
	/// </summary>
		/// <param name="patientCode"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="middleName"> A <c>System.String</c> instance.</param>
		/// <param name="lastName"> A <c>System.String</c> instance.</param>
		/// <param name="dateOfBirth"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="sex"> A <c>System.String</c> instance.</param>
		/// <param name="nationality"> A <c>System.String</c> instance.</param>
		/// <param name="companyCode"> A <c>System.String</c> instance.</param>
		/// <param name="homePhone"> A <c>System.String</c> instance.</param>
		/// <param name="mobilePhone"> A <c>System.String</c> instance.</param>
		/// <param name="updateUser"> A <c>System.String</c> instance.</param>
		/// <param name="apptRemark"> A <c>System.String</c> instance.</param>
		/// <param name="isDisabled"> A <c>System.Boolean?</c> instance.</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remark>This method is generated from a stored procedure.</remark>
	public override void Update(TransactionManager transactionManager, int start, int pageLength, System.String patientCode, System.String firstName, System.String middleName, System.String lastName, System.DateTime? dateOfBirth, System.String sex, System.String nationality, System.String companyCode, System.String homePhone, System.String mobilePhone, System.String updateUser, System.String apptRemark, System.Boolean? isDisabled)
	{
		SqlDatabase database = new SqlDatabase(this._connectionString);
		DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo._VCSPatient_Update", true);
		
		database.AddInParameter(commandWrapper, "@PatientCode", DbType.StringFixedLength,  patientCode );
		database.AddInParameter(commandWrapper, "@FirstName", DbType.String,  firstName );
		database.AddInParameter(commandWrapper, "@MiddleName", DbType.String,  middleName );
		database.AddInParameter(commandWrapper, "@LastName", DbType.String,  lastName );
		database.AddInParameter(commandWrapper, "@DateOfBirth", DbType.DateTime,  dateOfBirth );
		database.AddInParameter(commandWrapper, "@Sex", DbType.AnsiStringFixedLength,  sex );
		database.AddInParameter(commandWrapper, "@Nationality", DbType.String,  nationality );
		database.AddInParameter(commandWrapper, "@CompanyCode", DbType.StringFixedLength,  companyCode );
		database.AddInParameter(commandWrapper, "@HomePhone", DbType.String,  homePhone );
		database.AddInParameter(commandWrapper, "@MobilePhone", DbType.String,  mobilePhone );
		database.AddInParameter(commandWrapper, "@UpdateUser", DbType.String,  updateUser );
		database.AddInParameter(commandWrapper, "@ApptRemark", DbType.String,  apptRemark );
		database.AddInParameter(commandWrapper, "@IsDisabled", DbType.Boolean,  isDisabled );
		

		try
		{
			
			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
			
			
			
			return;
		}
		catch(SqlException ex)
		{
			throw new DataException("A data access error occured, please check inner SqlException.", ex);
		}
	}
	#endregion

	#region _VCSPatient_Insert
	
	/// <summary>
	///	This method wraps the '_VCSPatient_Insert' stored procedure. 
	/// </summary>
		/// <param name="patientCode"> A <c>System.String</c> instance.</param>
		/// <param name="firstName"> A <c>System.String</c> instance.</param>
		/// <param name="middleName"> A <c>System.String</c> instance.</param>
		/// <param name="lastName"> A <c>System.String</c> instance.</param>
		/// <param name="dateOfBirth"> A <c>System.DateTime?</c> instance.</param>
		/// <param name="sex"> A <c>System.String</c> instance.</param>
		/// <param name="nationality"> A <c>System.String</c> instance.</param>
		/// <param name="companyCode"> A <c>System.String</c> instance.</param>
		/// <param name="homePhone"> A <c>System.String</c> instance.</param>
		/// <param name="mobilePhone"> A <c>System.String</c> instance.</param>
		/// <param name="createUser"> A <c>System.String</c> instance.</param>
		/// <param name="apptRemark"> A <c>System.String</c> instance.</param>
	/// <param name="start">Row number at which to start reading.</param>
	/// <param name="pageLength">Number of rows to return.</param>
	/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
	/// <remark>This method is generated from a stored procedure.</remark>
	/// <returns>A <see cref="VList&lt;VcsPatient&gt;"/> instance.</returns>
	public override VList<VcsPatient> Insert(TransactionManager transactionManager, int start, int pageLength, System.String patientCode, System.String firstName, System.String middleName, System.String lastName, System.DateTime? dateOfBirth, System.String sex, System.String nationality, System.String companyCode, System.String homePhone, System.String mobilePhone, System.String createUser, System.String apptRemark)
	{
		SqlDatabase database = new SqlDatabase(this._connectionString);
		DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo._VCSPatient_Insert", true);
		
		database.AddInParameter(commandWrapper, "@PatientCode", DbType.StringFixedLength,  patientCode );
		database.AddInParameter(commandWrapper, "@FirstName", DbType.String,  firstName );
		database.AddInParameter(commandWrapper, "@MiddleName", DbType.String,  middleName );
		database.AddInParameter(commandWrapper, "@LastName", DbType.String,  lastName );
		database.AddInParameter(commandWrapper, "@DateOfBirth", DbType.DateTime,  dateOfBirth );
		database.AddInParameter(commandWrapper, "@Sex", DbType.AnsiStringFixedLength,  sex );
		database.AddInParameter(commandWrapper, "@Nationality", DbType.String,  nationality );
		database.AddInParameter(commandWrapper, "@CompanyCode", DbType.StringFixedLength,  companyCode );
		database.AddInParameter(commandWrapper, "@HomePhone", DbType.String,  homePhone );
		database.AddInParameter(commandWrapper, "@MobilePhone", DbType.String,  mobilePhone );
		database.AddInParameter(commandWrapper, "@CreateUser", DbType.String,  createUser );
		database.AddInParameter(commandWrapper, "@ApptRemark", DbType.String,  apptRemark );
		

		try
		{
			
			IDataReader reader = null;

			if (transactionManager != null)
			{	
				reader = Utility.ExecuteReader(transactionManager, commandWrapper);
			}
			else
			{
				reader = Utility.ExecuteReader(database, commandWrapper);
			}			
			
			// Create Collection
				VList<VcsPatient> rows = new VList<VcsPatient>();
				try
				{  
					Fill(reader, rows, start, pageLength);
				}
				finally
				{
					if (reader != null) 
						reader.Close();
				}
				
				
				
				return rows;
		}
		catch(SqlException ex)
		{
			throw new DataException("A data access error occured, please check inner SqlException.", ex);
		}
	}
	#endregion

	#endregion


	}//end class
} // end namespace
